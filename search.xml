<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Row size too large (> 8126) for mysql]]></title>
    <url>%2F2018%2F09%2F11%2FRow-size-too-large-8126-for-mysql%2F</url>
    <content type="text"><![CDATA[问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.错误分析根据报错信息，mysql提示是行的数据过大，应该将一些字段类型声明为TEXT或者BLOB，再或者将ROW_FORMAT(行格式)设置为DYNAMIC或者COMPRESSED。根据这个信息，我们查看一下mysql数据库的一些变量参数信息：1234567891011121314151617# 查看所有表的状态show table status;+--------+--------+---------+------------+------+----------------+-------------+| Name | Engine | Version | Row_format | Rows | Avg_row_length | Data_length |+--------+--------+---------+------------+------+----------------+-------------+| t_test | InnoDB | 10 | Dynamic | 0 | 0 | 16384 |+--------+--------+---------+------------+------+----------------+-------------+# 查看当前数据库innodb引擎的文件格式show variables like &apos;%innodb_file_format%&apos;;+--------------------------+-----------+| Variable_name | Value |+--------------------------+-----------+| innodb_file_format | Barracuda || innodb_file_format_check | ON || innodb_file_format_max | Barracuda |+--------------------------+-----------+ mysql的innodb引擎存储blob/text类型字段的行为，取决于三个因素：字段大小、整行(row)大小、innodb行格式。 innodb引擎支持的文件格式包括Antelope(羚羊)、Barracuda(梭子鱼): Antelope提供Redundant（冗长）、Compact（紧凑）文件格式 Barracuda除此之外提供Dynamic(动态)和 Compressed(压缩) Antelope格式的innodb引擎会尽可能地将整行数据存储在一个innodb page上，并且一个InnoDB page存储多行数据(至少是2行)，一个innodb page大约是16k，所以行大小限制为(16k - page header- page trailer) / 2。如果行中有可变长度字段(blob/text/varchar)，并且整行大小超过行大小限制，InnoDB会将字段其余数据页外存储(off-page)。这种情况下(Redundant或Compact)，每个可变长度字段(blob/text/varchar)的前768字节存储在innodb page内的行中，其余部分存储在页外。 导致innodb的1118错误的原因：1、多个可变长度字段；2、每个字段的值超过768(不是定义的字段大小，而是字段值的大小)；3、innodb引擎不是在定义表的时候判断，而是每次插入操作的时候判断。 Barracuda格式的innodb引擎，当ROW_FORMAT设置为DYNAMIC只使用一个20字节的指针作为可变长度类型，并且优先选择较小的字段存储在innodb page上。并且可以给blob增加前缀索引(prefix index)，将前缀索引建立在page外的blob上而不是page内。ROW_FORMAT设置为COMPRESSED时，innodb引擎的对可变长度字段的存储策略类似，并且总是压缩不在page内的数据，即使没有设置KEY_BLOCK_SIZE，也没有启用正常数据和索引的压缩。 innodb在存储blob时，page内部和外部的blob其实时不共享的。每个blob在页外都有16k分配，即使blob只有1个字节大小。如果每行有多个blob，可能会导致数据库效率比较低。所以最好是一行只定义一个blob来组合数据，并且压缩改数据，text类型同理 ==解决方案== 解决方案1 – Dynamic将innodb引擎的文件格式设置为Barracuda，并且将行格式设置为DYNAMIC。 123SET GLOBAL innodb_file_format=Barracuda;ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=DYNAMIC; 解决方案2 – Compressed将innodb引擎的文件格式设置为Barracuda，将行格式设置为COMPRESSED，并且设置缓冲池索引块大小。一般压缩效果明显，压缩率在30%-40%左右，但是会影响存储效率。 123SET GLOBAL innodb_file_format=Barracuda;ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8， 解决方案3 – 单表一文件每张表一个文件，不建议使用。对于单行多可变长度字段的表，效果可以，但是对于其他表浪费存储空间。123innodb_file_format=Barracudainnodb_file_per_table=1]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fatal: Pathspec 'xxx' is in submodule for php yaf vendor]]></title>
    <url>%2F2018%2F08%2F13%2Ffatal-Pathspec-xxx-is-in-submodule-for-php-yaf-vendor%2F</url>
    <content type="text"><![CDATA[使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。使用git status查看，没有任何提交，后手动删除重新copy了文件，再次使用git status： 1modified: vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php (modified content) git add后只增加了文件夹，但是没有文件。手动Add:1234git vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php报出错误信息： fatal: Pathspec &apos;xxx&apos; is in submodule 解决方法 发现vendor/phpgangsta/googleauthenticator/PHPGangsta/下 有.git文件 所以使用下面命令： 12git rm -rf --cached vendor/phpgangsta/googleauthenticator/PHPGangstagit add vendor/phpgangsta/* 然后正常提交。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>yaf</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ安装方法总结]]></title>
    <url>%2F2018%2F08%2F01%2Frabbit-mq-install%2F</url>
    <content type="text"><![CDATA[具体安装如下： 一：安装Erlang：12345678 # rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc # cd /etc/yum.repos.d/ # wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo # yum install esl-erlang 二：安装esl-erlang-compat：12345# cd /tmp/ # wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm # yum install esl-erlang-compat-R14B-1.el6.noarch.rpm 三：安装RabbitMQ 12345# cd /tmp # wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm # yum install rabbitmq-server-3.6.2-1.noarch.rpm 到此，RabbitMQ基本安装完成了。 四：RabbitMQ页面监控系统RabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。在Documentation下的Server下的Management是关于配置这个插件的。地址：http://www.rabbitmq.com/management.html这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。 命令：1# rabbitmq-plugins enable rabbitmq_management 五：配置登陆用户 123# rabbitmqctl add_user leyue leyue100# rabbitmqctl set_user_tags leyue administrator# rabbitmqctl set_permissions -p / leyue &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; 浏览器地址栏输入：http://localhost:15672 用户名登陆 RabbitMQ服务启动、关闭、重启12345# service rabbitmq-server start //开启# service rabbitmq-server stop //关闭#service rabbitmq-server restart //重启 具体使用，待续….]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 中 in_array 需要注意，根据具体场景设置第三个参数]]></title>
    <url>%2F2018%2F08%2F01%2Fphp-in-array%2F</url>
    <content type="text"><![CDATA[问题描述: 在使用php的in_array 函数时；我习惯性使用以下的方式判断： 1234567$a = &apos;1abc&apos;;$array = [1,2,3];if (in_array($a,$array)&#123; echo &apos;do .....&apos;;&#125; else &#123; echo &apos;do else .....&apos;;&#125; 按照预想应该会输出1do else ..... 但是实际输出的是：1do ..... 原因：根据官方文档函数 in_array 的描述： 在 array 中搜索 search，如果没有设置 type 则使用宽松的比较。第三个参数默认为 false，当 search 和 array 中的元素比较时会进行类型转换，相当于使用 == 进行比较。 备注：上个例子中的$a=’1abc’ 再和数字做比较时会转为$a=1 总结12in_array()第三个参数决定变量和数组中元素如何进行比较。值为 false（默认值）时，相当于 ==，值为 true 时，相当于 ===。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP float金额在强制转换为整型时，发现数值不对。]]></title>
    <url>%2F2018%2F08%2F01%2Fphp-float%2F</url>
    <content type="text"><![CDATA[今天发现一个很奇怪的问题: PHP float金额在强制转换为整型时，发现数值和实际相差1分。 123456789101112131415今天发现一个很奇怪的问题； 我有一笔订单金额为$a = 529.80 交易时我做了金额检验： 客户端传给我的是字符串52980（分）， 我从数据库取出是：529.80 然后 * 100 （变成分） $b = 52980， 然后在转为整型 intval($b),发现一个奇怪的问题，变成了52979 少了一分。然后都试了一遍，发现： [ *.30 *.80 *.31 *.81 ] 都有这个问题具体原因还不明白。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php 正则去掉字符串中非汉字字符串]]></title>
    <url>%2F2018%2F08%2F01%2Fphp-preg_match_all%2F</url>
    <content type="text"><![CDATA[直接上代码示例： 123456$str=&apos;2016，北京欢迎您 from around you..&apos;; preg_match_all(&apos;/[\x&#123;4e00&#125;-\x&#123;9fff&#125;]+/u&apos;, $str, $matches); $str = join(&apos;&apos;, $matches[0]); 输出 1北京欢迎您]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacBook brew yaf error: unknown type name 'HASHKIT_API']]></title>
    <url>%2F2018%2F07%2F31%2Fbrew-yaf-error-unknown-type-name-HASHKIT-API%2F</url>
    <content type="text"><![CDATA[问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name ‘HASHKIT_API’ 1234567891011121314151617181920212223\h:\W \u$ brew install php70-yaf==&gt; Installing php70-yaf from homebrew/php==&gt; Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gzAlready downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz==&gt; /usr/local/opt/php70/bin/phpize==&gt; ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config==&gt; makeLast 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:/usr/local/include/string.h:56:1: error: unknown type name &apos;HASHKIT_API&apos;HASHKIT_API^/usr/local/include/string.h:57:1: error: expected identifier or &apos;(&apos;const char *hashkit_string_c_str(const hashkit_string_st* self);^6 errors generated.make: *** [yaf_bootstrap.lo] Error 1make: *** Waiting for unfinished jobs....6 errors generated.make: *** [yaf.lo] Error 16 errors generated.make: *** [yaf_application.lo] Error 16 errors generated.make: *** [yaf_dispatcher.lo] Error 1 ====&gt; 解决方法：找到/usr/local/include/string.h 注释调和’HASHKIT_API有关的代码； 123456789101112/*=============================20180314 解决yaf 装不上的问题，注释#HASHKIT_APIvoid hashkit_string_free(hashkit_string_st *ptr);#HASHKIT_APIsize_t hashkit_string_length(const hashkit_string_st *self);#HASHKIT_APIconst char *hashkit_string_c_str(const hashkit_string_st* self);#================================================================*/ 补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错； 1234567891011&gt;&gt;&gt; nginx 报错： 2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: &quot;GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;, host: &quot;www.cloudins.com&quot;&gt;&gt;&gt;php-fpm报错:[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593[16-Mar-2018 12:21:27] NOTICE: ready to handle connections[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started[16-Mar-2018 14:10:02] NOTICE: Finishing ...[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye! 结论：12345=========================================================这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mac</tag>
      </tags>
  </entry>
</search>
