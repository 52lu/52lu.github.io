<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java-基础篇-了解多线程</title>
      <link href="/2019/11/27/java-11-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/11/27/java-11-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-多线程介绍"><a href="#1-多线程介绍" class="headerlink" title="1. 多线程介绍"></a>1. 多线程介绍</h1><p>多线程执行是Java平台的一个本质特性。每一个应用程序有至少一个线程（或者如果计算系统线程的话，如内存管理和信号处理，则是多个）。但是从应用程序程序员的角度，启动的只有一个线程，称为主线程（main thread）。这个线程有能力创建另外的线程。</p><p><a href="https://mrliuqh.github.io/2018/07/13/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/">什么是进程、线程、协程</a></p><h1 id="2-体验多线程"><a href="#2-体验多线程" class="headerlink" title="2. 体验多线程"></a>2. 体验多线程</h1><h2 id="2-1-单线程代码"><a href="#2-1-单线程代码" class="headerlink" title="2.1 单线程代码"></a>2.1 单线程代码</h2><p><strong>代码示例:</strong></p><pre><code class="java">public class ThreadDemo{    public static void main(String args[]){        new TestThread().run();        //循环输出        for (int i=0;i&lt;5;++i){            System.out.println(&quot;main线程在运行&quot;);        }    }}class TestThread{    public void run(){        for (int i=0;i&lt;5;++i){            System.out.println(&quot;TestThread在运行&quot;);        }    }}/**输出:TestThread在运行TestThread在运行TestThread在运行TestThread在运行TestThread在运行main线程在运行main线程在运行main线程在运行main线程在运行main线程在运行*/</code></pre><p><strong>代码分析:</strong></p><p>从上述代码中可以看出,如果要想运行main方法中的for循环,则必须要等TestThread类中的run()方法执行完后才可以运行，虽然mainain方法中for循环不依赖前面的代码块的计算结果，但是它也必须等待。这便是单一线程的缺陷。</p><h2 id="2-2-多线程代码"><a href="#2-2-多线程代码" class="headerlink" title="2.2 多线程代码"></a>2.2 多线程代码</h2><p>通过继承Thread类实现多线程,Thread类存放于java.lang类库里。在Thread类中定义了run()方法，要想实现多线程，必须覆写Thread类的run方法。</p><p><strong><span id="jump">代码示例</span>:</strong></p><pre><code>public class ThreadDemo {    public static void main(String[] args) {        //激活一个线程        new TestThread().start();         //循环输出        for (int i = 0; i &lt; 5; ++i) {            System.out.println(&quot;main线程在运行&quot;);            try {                //为了看出并发执行，睡眠1秒                Thread.sleep(1000);             } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}class TestThread extends Thread {    public void run() {        for (int i = 0; i &lt; 5; ++i) {            System.out.println(&quot;TestThread在运行&quot;);            try {                //为了看出并发执行，睡眠1秒                Thread.sleep(1000);             } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}/**输出:TestThread在运行main线程在运行TestThread在运行main线程在运行TestThread在运行main线程在运行TestThread在运行main线程在运行TestThread在运行main线程在运行*/</code></pre><h1 id="3-使用多线程"><a href="#3-使用多线程" class="headerlink" title="3. 使用多线程"></a>3. 使用多线程</h1><p>在java中，启动一个新线程有两种途径:</p><ul><li>提供一个Runnable接口的对象</li><li>使用Thread的子类</li></ul><h2 id="3-1-通过Runnable接口实现"><a href="#3-1-通过Runnable接口实现" class="headerlink" title="3.1 通过Runnable接口实现"></a>3.1 通过Runnable接口实现</h2><p><strong>使用格式:</strong><br>Runnable接口定义了一个单一的方法run()，在run()方法中包含要在线程中执行的代码。Runnable对象被传递给Thread的构造器中，如下面的代码所示。</p><pre><code>public class RunnableDemo implements Runnable {    public void run() {       // todo 线程执行方法体...    }    public static void main(String[] args) {      // 启动多线程      (new Thread(new RunnableDemo())).start();    }}</code></pre><p><strong>代码示例:</strong></p><pre><code>// TestThread类实现了Runnable接口，// 同时覆写了Runnable接口之中的run()方法，也就是说此类为一个多线程实现类class TestThread implements Runnable {    public void run() {        for (int i = 0; i &lt; 5; i++) {            System.out.println(&quot;TestThread在运行&quot;);            try {                Thread.sleep(1000); //睡眠1秒            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}// 测试多线程public class RunnableThread {    public static void main(String[] args) {        // 实例化了一个TestThread类的对象        TestThread t = new TestThread();        //使用Thread类的start方法启动线程        new Thread(t).start();         for (int i = 0; i &lt; 5; i++) {            System.out.println(&quot;main线程在运行&quot;);            try {                Thread.sleep(1000); //睡眠1秒            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}</code></pre><h3 id="问题1-Runnable对象-为什么要调用Thread类中的start方法？"><a href="#问题1-Runnable对象-为什么要调用Thread类中的start方法？" class="headerlink" title="问题1: Runnable对象,为什么要调用Thread类中的start方法？"></a>问题1: Runnable对象,为什么要调用Thread类中的start方法？</h3><p>为什么实现了Runnable接口还需要调用Thread类中的start方法才能启动多线程？查找JDK文档就可以发现，<font color="red">在Runnable接口中只有一个run方法，并没有start方法。</font></p><p>所以一个类即使实现了Runnable接口，也需用Thread类中的start方法来启动多线程。对这一点，通过查找JDK文档中的Thread类可以看到，在Thread类之中有这样一个构造方法。</p><pre><code>public Thread( Runnable target )</code></pre><p>由此构造方法可以看到，可以将一个Runnable接口（或其子类）的实例化对象作为参数去实例化Thread类对象。</p><h2 id="3-2-通过Thread的子类实现"><a href="#3-2-通过Thread的子类实现" class="headerlink" title="3.2 通过Thread的子类实现"></a>3.2 通过Thread的子类实现</h2><p><strong>使用格式:</strong></p><pre><code>public class ThreadDemo extends Thread {    //重写从Thread继承过来的run方法    public void run() {         // todo 线程执行方法体..    }    public static void main(String[] args) {        // 启动多线程        (new Thread(new ThreadDemo())).start();    }}</code></pre><p><a href="#jump">代码示例见:多线程代码</a></p><blockquote><p>Runnable接口和Thread类的关系:Thread类是Runnable接口的一个子类</p></blockquote><h1 id="4-深入案例-卖火车票"><a href="#4-深入案例-卖火车票" class="headerlink" title="4. 深入案例-卖火车票"></a>4. 深入案例-卖火车票</h1><p>下面是模拟一个铁路售票系统的范例，某日列车的车票剩余5张 ，通过4个售票点来售卖，一个售票点用一个线程来表示</p><h2 id="4-1-Thread子类实现"><a href="#4-1-Thread子类实现" class="headerlink" title="4.1 Thread子类实现"></a>4.1 Thread子类实现</h2><p><em>Thread子类实现-代码示例:</em></p><pre><code class="java">public class ThreadDemo {    public static void main(String[] args) {        TestThread t = new TestThread();        //一个线程对象只能启动一次        t.start();        t.start();        t.start();        t.start();    }}public class TestThread extends Thread {    private int tickets = 5;    public void run() {        while (tickets &gt; 0) {            // 获取当前运行线程的名称            Sting ThreadName = Thread.currentThread().getName();            System.out.println(ThreadName + &quot;出售票&quot; + tickets);            tickets -= 1;        }    }}/**** 输出:Thread-0出售票5Thread-0出售票4Thread-0出售票3Thread-0出售票2Thread-0出售票1Exception in thread &quot;main&quot; java.lang.IllegalThreadStateException    at java.lang.Thread.start(Thread.java:708)    at Main.main(Main.java:15)*/</code></pre><p><strong><font color="fc7900">@注意:</font> 一个类继承Thread类之后，这个类的实例化对象，无论调用多少次start方法，结果都只有一个线程在运行</strong></p><p><em>Thread子类实现-代码修改:</em></p><pre><code class="java">public class TestThreadDemo {    public static void main(String[] args) {        TestThread t = new TestThread();        //启动4个线程        new TreadDemo().start();        new TreadDemo().start();        new TreadDemo().start();        new TreadDemo().start();    }}public class TestThread extends Thread {    // 一共剩余5张票    private int tickets = 5;    public void run() {        while (tickets &gt; 0) {            // 获取当前运行线程的名称            Sting ThreadName = Thread.currentThread().getName();            System.out.println(ThreadName + &quot;出售票&quot; + tickets);            tickets -= 1;        }    }}/****输出:Thread-0出售票5Thread-1出售票5Thread-0出售票4Thread-1出售票4Thread-1出售票3Thread-1出售票2Thread-1出售票1Thread-2出售票5Thread-0出售票3Thread-2出售票4Thread-2出售票3Thread-2出售票2Thread-2出售票1Thread-0出售票2Thread-0出售票1Thread-3出售票5Thread-3出售票4Thread-3出售票3Thread-3出售票2Thread-3出售票1*/</code></pre><p><strong>问题1:剩余票一共5张，却卖出了4*5 = 20张</strong></p><p>我们的本意是一共有5张票，每个线程模拟一个售票窗口，一起把这5张票卖完，但从运行的结果可以看出，每个线程都卖了5张票，这样就卖出了4×5=20张票，这不是我们所需要的。因此，<font color="red">用Thread实际上很难达到资源共享的目的，但是可以通过静态变量达到资源共享，</font>例如，可将tickets设置为static类型的。</p><p><em>修改方法:改成静态变量</em></p><pre><code>// 一共剩余5张票private static int tickets = 5;</code></pre><blockquote><font color="red">即便改成静态变量也会出现一票多卖的情况,原因下稍后说明。</font></blockquote><h2 id="4-2-Runnabe接口实现"><a href="#4-2-Runnabe接口实现" class="headerlink" title="4.2 Runnabe接口实现"></a>4.2 Runnabe接口实现</h2><p><em>Runnabe接口实现(共享资源)-代码示例:</em></p><pre><code>public class RunnableDemo implements Runnable {    /**     * description: 剩余总票数     */    private static int tickets = 5;    @Override    public void run() {        while (tickets &gt; 0) {            // 获取当前运行线程的名称            String threadName = Thread.currentThread().getName();            System.out.println(threadName + &quot;出售票&quot; + tickets);            tickets -= 1;        }    }}public class TestThreadDemo {    public static void main(String[] args) {        RunnableDemo r = new RunnableDemo();        //启动4个线程        new Thread(r).start();        new Thread(r).start();        new Thread(r).start();        new Thread(r).start();    }}/****输出:Thread-0出售票5Thread-3出售票5Thread-2出售票5Thread-1出售票4Thread-0出售票3Thread-1出售票2Thread-1出售票0*/</code></pre><div style="color:green"><br>实现Runnable接口相对于继承Thread类来说，有如下几个显著的优势。<br><br>1. 避免由于Java的单继承特性带来的局限。<br>2. 可以使多个线程共享相同的资源，以达到资源共享的目的。<br><br></div><h2 id="4-3-一票多卖"><a href="#4-3-一票多卖" class="headerlink" title="4.3 一票多卖"></a>4.3 一票多卖</h2><p>不管是Thread子类实现，还是Runnabe接口实现的程序，多运行几次本程序，就会发现一票多卖的情况。比如在上面的运行结果中,第5张票就被线程0、线程2和线程3卖了3次，出现“一票多卖”的现象。</p><font color="orange">这是因为:当tickets=1时，线程0、线程2和线程3都同时看见了，满足条件tickets &gt; 0，当第一个线程就把票卖出去了，tickets理应减1，当它还没有来得及更新，当前的线程的运行时间片就到了，必须推出CPU，让其他线程执行，而其他线程看到的tickets依然是旧状态（tickets=1），所以，依次也把那张已经卖出去的票再次“卖”出去了。</font><p>事实上，在多线程运行环境中，tickets属于典型的临界资源（Critical resource），而run方法体就属于临界区（Critical Section）。多个进程中涉及到同一个临界资源的临界区称为相关临界区。</p><h1 id="5-线程状态"><a href="#5-线程状态" class="headerlink" title="5. 线程状态"></a>5. 线程状态</h1><p>每个Java程序都有一个默认的主线程，对于Java应用程序，主线程是main方法执行的线程；要想实现多线程，必须在主线程中创建新的线程对象。而一个线程具有5种状态，即创建、就绪、运行、阻塞、终止。</p><p><strong>线程状态的转移与转移原因之间的关系如下图所示:</strong><br><img src="https://mrliuqh.github.io/directionsImg/java/threadStatus.png" alt=""></p><p>在给定时间点上，一个线程只能处于一种状态（<a href="https://www.tbaqkj.com/javase/8/docs/api/" target="_blank" rel="noopener">详见JDK文档 Thread.State</a>）</p><ol><li>New(创建态): 至今尚未启动的线程处于这种状态。</li><li>Runnable(运行态):正在Java虚拟机中执行的线程处于这种状态。</li><li>Blocked(阻塞态):受阻塞并等待某个监视器锁的线程处于这种状态。</li><li>Waiting(无限等待态):无限期的等待另一个线程来执行某一个特定操作的线程处于这种状态。</li><li>Timed_Waiting(限时等待态):具有指定等待时间的某一等待线程的线程状态。</li><li>Terminated(死亡态):已退出的线程处于这种状态。</li></ol><h2 id="5-1-代码演示线程生命周期"><a href="#5-1-代码演示线程生命周期" class="headerlink" title="5.1 代码演示线程生命周期"></a>5.1 代码演示线程生命周期</h2><pre><code>package com.training.thread;import java.util.Scanner;/** * description :演示线程生命周期  * @author : Mr.Liuqh * @date : 2019-11-27 13:12 */public class ThreadLife implements Runnable {    @Override    public void run() {        System.out.println(&quot;处于运行状态!&quot;);        Scanner scanner = new Scanner(System.in);        System.out.println(&quot;等待I/O,处于阻塞状态!&quot;);        System.out.println(&quot;请输入字符串：&quot;);        //next()方法扫描scanner输入的字符串        scanner.next();        //扫描器结束，系统不再等待I/O，线程重新进入就绪状态        scanner.close();        System.out.println(&quot;结束阻塞状态,重新进入就绪状态,然后运行状态!&quot;);        try {            //线程暂停1000毫秒            Thread.sleep(1000);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println(&quot;线程进入死亡状态!&quot;);    }    public static void main(String[] args) {        Thread thread = new Thread(new ThreadLife());        System.out.println(&quot;处于创建状态!&quot;);        thread.start();        System.out.println(&quot;处于就绪状态!&quot;);    }}</code></pre><p>输出:</p><pre><code>处于创建状态!处于就绪状态!处于运行状态!等待I/O,处于阻塞状态!请输入字符串：hello结束阻塞状态,重新进入就绪状态,然后运行状态!线程进入死亡状态!</code></pre><h1 id="6-操作线程的方法"><a href="#6-操作线程的方法" class="headerlink" title="6. 操作线程的方法"></a>6. 操作线程的方法</h1><p>操作线程的主要方法在Thread类中，下表列出了Thread类中的主要方法，<a href="https://www.tbaqkj.com/javase/8/docs/api/" target="_blank" rel="noopener">查阅SDK文档获得更多线程方法</a>。</p><p><img src="https://mrliuqh.github.io/directionsImg/java/thread-fun-1.png" alt=""><br><img src="https://mrliuqh.github.io/directionsImg/java/thread-fun-2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven私服搭建(nexus3)和使用</title>
      <link href="/2019/11/24/maven-nexus-build/"/>
      <url>/2019/11/24/maven-nexus-build/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-使用docker安装"><a href="#1-使用docker安装" class="headerlink" title="1. 使用docker安装"></a>1. 使用docker安装</h1><h2 id="1-1-编写docker-compose-yml"><a href="#1-1-编写docker-compose-yml" class="headerlink" title="1.1 编写docker-compose.yml"></a>1.1 编写docker-compose.yml</h2><p><strong>文件位置</strong>: /service</p><p><strong>具体内容:</strong></p><pre><code>version: &#39;3.1&#39;services:  #服务名称:docker-compose exec 服务名称   nexus:    restart: always    image: sonatype/nexus3    #容器名称    container_name: nexus3     ports:      - 8081:8081    volumes:    # ${DATA_PATH} 变量信息，放在了.env 里      - ${DATA_PATH}/nexus:/nexus-data</code></pre><h2 id="1-2-编写-env-配置文件"><a href="#1-2-编写-env-配置文件" class="headerlink" title="1.2 编写.env 配置文件"></a>1.2 编写.env 配置文件</h2><p><strong>文件位置</strong>: /service</p><p><strong>具体内容:</strong></p><pre><code>#服务数据目录DATA_PATH=/service</code></pre><h2 id="1-3-创建目录"><a href="#1-3-创建目录" class="headerlink" title="1.3 创建目录"></a>1.3 创建目录</h2><p>创建对应的服务目录:/service/nexus,用来保存nexus服务的相关数据信息，并设置权限为可读写</p><pre><code># 创建目录root@hui-X555LD /service » mkdir nexus# 设置权限root@hui-X555LD /service » chmod 777 nexus</code></pre><p>目录信息总览:</p><pre><code>root@hui-X555LD /service » pwd/serviceroot@hui-X555LD /service » ls -la总用量 20drwxrwxrwx  3 root root 4096 11月 23 23:23 .drwxr-xr-x 25 root root 4096 11月 23 23:10 ..-rw-r--r--  1 root root  189 11月 23 23:10 docker-compose.yml-rwxrwxrwx  1 root root   39 11月 23 23:10 .envdrwxrwxrwx 15 root root 4096 11月 23 23:18 nexus</code></pre><h1 id="2-启动nexus3"><a href="#2-启动nexus3" class="headerlink" title="2. 启动nexus3"></a>2. 启动nexus3</h1><p><img src="https://mrliuqh.github.io/directionsImg/service/nexus/nexus3.png" alt=""></p><font color="red">@注意: 默认密码不是admin123,而是在容器中的/nexus-data/admin.password文件中</font><h2 id="2-1-找密码"><a href="#2-1-找密码" class="headerlink" title="2.1 找密码"></a>2.1 找密码</h2><pre><code># 进入服务目录root@hui-X555LD ~ » cd /service# 进入nexus服务容器中root@hui-X555LD /service » docker-compose exec nexus bash# 在容器中查看密码bash-4.4$ cat /nexus-data/admin.password# 密码2f3ab5c2-ea5c-40b5-8677-1fce929687cb</code></pre><p>登录之后，根据引导，可以设置新密码。</p><h1 id="3-使用nexus3"><a href="#3-使用nexus3" class="headerlink" title="3. 使用nexus3"></a>3. 使用nexus3</h1><h2 id="3-1-第一步-修改maven的配置文件"><a href="#3-1-第一步-修改maven的配置文件" class="headerlink" title="3.1 第一步:修改maven的配置文件"></a>3.1 第一步:修改maven的配置文件</h2><p>在maven的配置文件(settings.xml)中，servers 节点下添加以下代码</p><pre><code>&lt;servers&gt;  ...  &lt;!-- 个人私服开始节点 --&gt;      &lt;server&gt;        &lt;!-- 注意:pom.xml中的id要和这个一致！！ --&gt;        &lt;id&gt;self-nexus-releases&lt;/id&gt;        &lt;username&gt;admin&lt;/username&gt;        &lt;password&gt;123456&lt;/password&gt;      &lt;/server&gt;      &lt;server&gt;        &lt;id&gt;self-nexus-snapshots&lt;/id&gt;        &lt;username&gt;admin&lt;/username&gt;        &lt;password&gt;123456&lt;/password&gt;      &lt;/server&gt;      &lt;!-- 个人私服结束节点 --&gt;&lt;/servers&gt;</code></pre><h2 id="3-2-第二步-修改项目pom-xml文件"><a href="#3-2-第二步-修改项目pom-xml文件" class="headerlink" title="3.2 第二步:修改项目pom.xml文件"></a>3.2 第二步:修改项目pom.xml文件</h2><p>修改项目中pom.xml文件，添加节点distributionManagement，代码如下:</p><pre><code class="$xslt">&lt;!--  个人私服配置 -开始节点 --&gt;&lt;!--  id名称必须要与 maven settings.xml 中 Servers 配置的ID名称保持一致--&gt;&lt;distributionManagement&gt;    &lt;repository&gt;        &lt;id&gt;self-nexus-releases&lt;/id&gt;        &lt;name&gt;Nexus Release Repository&lt;/name&gt;        &lt;!-- 这个地址是nexus3的服务地址--&gt;        &lt;url&gt;http://192.168.0.110:8081/repository/maven-releases/&lt;/url&gt;    &lt;/repository&gt;    &lt;snapshotRepository&gt;        &lt;id&gt;self-nexus-snapshots&lt;/id&gt;        &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;         &lt;!-- 这个地址是nexus3的服务地址--&gt;        &lt;url&gt;http://192.168.0.110:8081/repository/maven-snapshots/&lt;/url&gt;    &lt;/snapshotRepository&gt;&lt;/distributionManagement&gt;&lt;!--  个人私服配置 -结束节点--&gt;</code></pre><font color="orange">@注意: repository节点和snapshotRepository节点下的id名称必须要与maven的配置文件(settings.xml)中的server下配置的id名称保持一致</font>]]></content>
      
      
      <categories>
          
          <category> 服务搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-异常处理</title>
      <link href="/2019/11/21/java-10-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2019/11/21/java-10-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-异常概述"><a href="#1-异常概述" class="headerlink" title="1. 异常概述"></a>1. 异常概述</h1><p>Java的异常处理机制也秉承着面向对象的基本思想。在Java中，所有的异常都是以类的类型存在。除了内置的异常类之外，Java也可以自定义异常类。此外，Java的异常处理机制也允许自定义抛出异常。</p><h1 id="2-处理错误特点"><a href="#2-处理错误特点" class="headerlink" title="2. 处理错误特点"></a>2. 处理错误特点</h1><ul><li>不需要打乱程序的结构，如果没有任何错误产生，那么程序的运行不受任何影响。</li><li><p>不依靠方法的返回值来报告错误是否产生。</p></li><li><p>采用集中的方式处理错误，能够根据错误种类的不同来进行对应的错误处理操作。</p></li></ul><h1 id="3-常见的异常"><a href="#3-常见的异常" class="headerlink" title="3. 常见的异常"></a>3. 常见的异常</h1><p><img src="https://mrliuqh.github.io/directionsImg/java/common-error-1.png" alt=""><br><img src="https://mrliuqh.github.io/directionsImg/java/common-error-2.png" alt=""></p><h1 id="4-抛出异常"><a href="#4-抛出异常" class="headerlink" title="4. 抛出异常"></a>4. 抛出异常</h1><h2 id="4-1-thorws关键"><a href="#4-1-thorws关键" class="headerlink" title="4.1 thorws关键"></a>4.1 thorws关键</h2><p>在方法中使用thorws关键字抛出错误</p><p><strong>语法</strong></p><pre><code>[权限修饰符] 返回类型 方法名 throws 具体错误类{    ....}</code></pre><p><strong>示例</strong></p><pre><code>public class Main {    public static void main(String[] args) {        System.out.println(divsion(10,0));    }    /**     * description: 测试除法异常     **/    public static int  divsion(int a, int b ) throws ArithmeticException{        return  a / b ;    }}/** * 输出:Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero    at Main.divsion(Main.java:27)    at Main.main(Main.java:17)**/</code></pre><h2 id="4-2-thorw关键"><a href="#4-2-thorw关键" class="headerlink" title="4.2 thorw关键"></a>4.2 thorw关键</h2><p><strong>使用示例</strong></p><pre><code>public class Main {    public static void main(String[] args) {        System.out.println(divsion(10,0));    }    /**     * description: 测试除法异常     **/    public static int  divsion(int a, int b ) throws ArithmeticException{        if (b == 0){            throw new ArithmeticException(&quot;除数不能为0！&quot;);        }        return  a / b ;    }}/** * 输出:Exception in thread &quot;main&quot; java.lang.ArithmeticException: 除数不能为0！    at Main.divsion(Main.java:47)    at Main.main(Main.java:39)**/</code></pre><h1 id="5-捕捉异常"><a href="#5-捕捉异常" class="headerlink" title="5. 捕捉异常"></a>5. 捕捉异常</h1><p>异常捕获处理是由try、catch与finally等3个关键字所组成的程序块，其语法如下所示</p><h2 id="5-1-try-catch"><a href="#5-1-try-catch" class="headerlink" title="5.1 try-catch"></a>5.1 try-catch</h2><pre><code>try {    // todo ...} catch (ArithmeticException e) {    // 捕获到对应的异常}</code></pre><h2 id="5-2-try-catch-catch"><a href="#5-2-try-catch-catch" class="headerlink" title="5.2 try-catch-catch"></a>5.2 try-catch-catch</h2><pre><code>try {    // todo ...} catch (ArithmeticException e) {    // 捕获到对应的异常} catch (ArithmeticException e) {    // 捕获到对应的异常}</code></pre><h2 id="5-3-try-finally"><a href="#5-3-try-finally" class="headerlink" title="5.3 try-finally"></a>5.3 try-finally</h2><pre><code>try {    // todo ...} finally (ArithmeticException e) {   // 总会处理的逻辑}</code></pre><h2 id="5-4-try-catch-finally"><a href="#5-4-try-catch-finally" class="headerlink" title="5.4  try-catch-finally"></a>5.4  try-catch-finally</h2><pre><code>try {    // todo ...} catch (ArithmeticException e) {    // 捕获到对应的异常} finally (ArithmeticException e) {  // 总会处理的逻辑}</code></pre><h1 id="6-异常类关系图"><a href="#6-异常类关系图" class="headerlink" title="6. 异常类关系图"></a>6. 异常类关系图</h1><p><img src="https://mrliuqh.github.io/directionsImg/java/throwable-tree.png" alt=""></p><h2 id="6-1-异常类型的继承关系"><a href="#6-1-异常类型的继承关系" class="headerlink" title="6.1 异常类型的继承关系"></a>6.1 异常类型的继承关系</h2><p>异常类型的最大父类是Throwable类，其分为两个子类，分别为Exception、Error。Exception表示程序可处理的异常，而Error表示JVM错误，一般无需程序开发人员自己处理。</p><h2 id="6-2-RuntimeException和Exception的区别"><a href="#6-2-RuntimeException和Exception的区别" class="headerlink" title="6.2 RuntimeException和Exception的区别"></a>6.2 RuntimeException和Exception的区别</h2><ul><li>RuntimeException类是Exception类的子类。</li><li>Exception定义的类，强制性要求用户必须处理 </li><li>RuntimeException定义的异常可以选择性地进行处理。</li></ul><h1 id="7-自定义异常类"><a href="#7-自定义异常类" class="headerlink" title="7.自定义异常类"></a>7.自定义异常类</h1><p><strong>自定义类的语法:</strong></p><pre><code>class 异常类名 extends Exception {    ....}</code></pre><p><strong>使用示例:</strong></p><pre><code>public class userDefinedException{  public static void main(String[]args)  {    try {       throw new MyException(&quot;自定义异常--仅为测试演示！&quot;);     } catch(MyException e){      System.out.println(e);    }  }}class MyException extends Exception{  public MyException(String msg)  {    super(msg); //调用Exception类的构造方法，存入异常信息  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-抽象类和接口</title>
      <link href="/2019/11/05/java-9-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/11/05/java-9-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1.抽象类"></a>1.抽象类</h1><h2 id="1-1-抽象类概念"><a href="#1-1-抽象类概念" class="headerlink" title="1.1 抽象类概念"></a>1.1 抽象类概念</h2><p>抽象方法是只声明而未实现的方法，所有的抽象方法必须使用abstract关键字声明，包含抽象方法的类也必须使用abstract class声明。</p><h3 id="1-1-1-抽象类定义规则"><a href="#1-1-1-抽象类定义规则" class="headerlink" title="1.1.1 抽象类定义规则"></a>1.1.1 抽象类定义规则</h3><ol><li>抽象类和抽象方法都必须用abstract关键字来修饰；</li><li>抽象类不能直接实例化，即不能使用new关键字去产生对象；</li><li>抽象类定义时抽象方法只需声明，而不需实现；</li><li>含有抽象方法的类必须被声明为抽象类，<font color="red">抽象类的子类必须覆写所有的抽象方法后才能被实例化，否则这个子类还是个抽象类。</font></li></ol><h2 id="1-2-抽象类声明"><a href="#1-2-抽象类声明" class="headerlink" title="1.2 抽象类声明"></a>1.2 抽象类声明</h2><pre><code>访问权限  abstract class 类名 {    // 声明成员变量    访问权限 变量类型 成员变量名;    // 声明一般方法    访问权限 返回类型 方法名(){        // ...    }    // 声明抽象方法    abstract 返回类型 方法名();}</code></pre><p><strong>实例</strong></p><pre><code>/** * description: * * @author : Mr.Liuqh * @since : 2019-10-31 18:51 */public abstract class People {    // 声明成员变量    private String name;    // 声明一般方法    public String getName(){        return this.name;    }    // 声明抽象方法    abstract String like();}</code></pre><font color="green">由上可知:抽象类的定义就是比普通类多了一些抽象方法的定义而已。虽然定义了抽象类，但是抽象类却不能直接使用。</font><blockquote><font color="red"> People girl = new People(); // 这种调用会报错,People 是抽象的，无法实例化</font></blockquote><h3 id="1-2-1-抽象类的使用原则"><a href="#1-2-1-抽象类的使用原则" class="headerlink" title="1.2.1 抽象类的使用原则"></a>1.2.1 抽象类的使用原则</h3><p>如果说一个类的对象可以被实例化，那么就表示这个对象可以调用类中的属性或者是方法，但是抽象类中存在抽象方法，而抽象方法没有方法体，没有方法体的方法无法使用。</p><p>对于抽象类的使用原则如下:</p><ul><li>抽象类必须有子类，子类使用extends继承抽象类，一个子类只能够继承一个抽象类；</li><li>子类（如果不是抽象类）则必须覆写抽象类之中的全部抽象方法；</li><li>若想实例化抽象类的对象，则可以使用子类进行对象的向上转型来完成。</li></ul><h2 id="1-3-抽象类特征"><a href="#1-3-抽象类特征" class="headerlink" title="1.3 抽象类特征"></a>1.3 抽象类特征</h2><h3 id="1-3-1-抽象类中可以有构造方法"><a href="#1-3-1-抽象类中可以有构造方法" class="headerlink" title="1.3.1 抽象类中可以有构造方法"></a>1.3.1 抽象类中可以有构造方法</h3><p>与一般类相同，在抽象类中也可以拥有构造方法，<font color="red">但是这些构造方法必须在子类中被调用，并且子类实例化对象的时候依然满足类继承的关系，</font>先默认调用父类的构造方法，而后再调用子类的构造方法，毕竟抽象类之中还是存在属性的，只不过这个抽象方法无法直接被外部实例化对象的时候所使用。</p><p><strong>代码示例:</strong></p><pre><code>//定义一抽象类Personabstract class Person{    String name;    int age;    String occupation;    public Person(String name,int age,String occupation) //定义构造函数    {        this.name=name;        this.age=age;        this.occupation=occupation;    }    public abstract String talk();    //声明一个抽象方法}//声明抽象类的子类class Student extends Person    {    public Student(String name,int age,String occupation){        //在这里必须明确调用抽象类中的构造方法        super(name,age,occupation);    }    //覆写talk()方法    public String talk() {        return &quot;学生——&gt;姓名：&quot;+this.name+&quot;，年龄：&quot;+this.age+&quot;，职业：&quot;+this.occupation+&quot;！&quot;;    }}// 测试class AbstractConstructor{    public static void main(String[] args){        //创建对象s        Student s=new Student(&quot;张三&quot;,18,&quot;学生&quot;);        //调用被覆写过的方法        System.out.println(s.talk()); // 输出:学生——&gt;姓名：张三，年龄：18，职业：学生！     }}</code></pre><blockquote><p>从程序中可以看到，抽象类也可以像普通类一样，有构造方法、一般方法和属性，更重要的是还可以有一些抽象方法，需要子类去实现，而且在抽象类中声明构造方法后，在子类中必须明确调用。</p></blockquote><h3 id="1-3-2-抽象类不能够使用final定义。"><a href="#1-3-2-抽象类不能够使用final定义。" class="headerlink" title="1.3.2 抽象类不能够使用final定义。"></a>1.3.2 抽象类不能够使用final定义。</h3><p>使用final定义的类不能有子类，而抽象类使用的时候必须有子类，这是一个矛盾的问题，所以抽象类上不能出现final定义。</p><h3 id="1-3-3-在外部抽象类上无法使用static声明"><a href="#1-3-3-在外部抽象类上无法使用static声明" class="headerlink" title="1.3.3 在外部抽象类上无法使用static声明"></a>1.3.3 在外部抽象类上无法使用static声明</h3><p>在外部抽象类上无法使用static声明，但是内部抽象类却可以使用static定义，使用static定义的内部抽象类就表示一个外部类。</p><p><strong>代码</strong></p><pre><code class="java">abstract class Book{    //抽象方法    public abstract void print();    //静态内部抽象类    static abstract class CD{      //抽象方法      public abstract void get();             }}//继承抽象类class JavaCD extends Book.CD {    public void get(){        System.out.println(&quot;java学习&quot;);    }}public class StaticInnerAbstractClass{    public static void main(String[]  args){        //实例化对象        Book.CD cd=new JavaCD();        cd.get(); // 输出:java学习    }}</code></pre><h1 id="2-接口"><a href="#2-接口" class="headerlink" title="2. 接口"></a>2. 接口</h1><p>接口（interface）是Java所提供的另一种重要技术，是一种特殊的类，它的结构和抽象类非常相似，也具有数据成员与抽象方法，但它与抽象类又有不同，并且Java 8中又添加了新特性。</p><h2 id="2-1-接口的基本概念"><a href="#2-1-接口的基本概念" class="headerlink" title="2.1 接口的基本概念"></a>2.1 接口的基本概念</h2><ul><li>接口里的数据成员必须初始化，且数据成员均为常量，常见的是全局变量。</li><li>接口里的方法为abstract，接口不能像抽象类一样定义一般的方法，需定义“抽象方法”。</li></ul><blockquote><font color="orange">Java8中为避免在接口中添加新方法后要修改所有实现类，允许定义默认方法，即default方法，也可以称为Defender方法，或者虚拟扩展方法（Virtual extension methods)。<br>Default方法是指，在接口内部包含了一些默认的方法实现（也就是接口中可以包含方法体，这打破了Java之前版本对接口的语法限制），从而使得接口在进行扩展的时候，不会破坏与接口相关的实现类代码。</font></blockquote><h2 id="2-2-接口定义"><a href="#2-2-接口定义" class="headerlink" title="2.2 接口定义"></a>2.2 接口定义</h2><p>声明格式:</p><pre><code>public interface 接口名称 {    //数据成员必须赋初值    final 数据类型 成员名称=常量；    //抽象方法，注意没有定义方法主体    abstract 返回数据类型 方法名称（参数…）；    //默认方法，包含方法体    default 返回值的数据类型方法名称（参数…）{        // 方法体...    }}</code></pre><p><strong>示例:</strong></p><ul><li>无默认方法的接口</li></ul><pre><code class="java">interface MyInterface{    // 数据成员必须赋初值    static final String NAME=&quot;Mr.Liu&quot;     // 抽象方法    abstract String getName();}</code></pre><ul><li>有默认方法的接口</li></ul><pre><code class="java">public interface MyInterface{    // 数据成员必须赋初值    static final String NAME=&quot;Mr.Liu&quot;     // 抽象方法    abstract String getName();    // 默认方法    default  String say(){        System.out.println(&quot;Hello!&quot;)    }}</code></pre><h2 id="2-3-接口使用原则"><a href="#2-3-接口使用原则" class="headerlink" title="2.3 接口使用原则"></a>2.3 接口使用原则</h2><ul><li>接口必须有子类，子类依靠implements关键字可以同时实现多个接口；</li><li><p>接口的子类（如果不是抽象类）则必须覆写接口之中的全部抽象方法；</p></li><li><p>接口可以利用对象多态性，利用子类实现对象的实例化。</p></li><li>接口与一般类一样，本身也具有数据成员与方法，但数据成员一定要赋初值，且此值不能再更改</li><li><p>接口中除default方法外必须都是抽象方法，所以接口定义格式中，抽象方法声明的关键字abstract是可以省略的。</p></li><li><p>一个类实现多个接口时，若接口有默认方法，不能出现同名的默认方法</p></li><li>接口可以继承多个接口</li></ul><h1 id="3-抽象类和接口的区别"><a href="#3-抽象类和接口的区别" class="headerlink" title="3.抽象类和接口的区别"></a>3.抽象类和接口的区别</h1><p><img src="https://mrliuqh.github.io/directionsImg/java/abstractInterface.jpeg" alt=""><br><!--![](https://mrliuqh.github.io/directionsImg/java/hascode-rule.jpg)--></p><h2 id="3-1-共同点"><a href="#3-1-共同点" class="headerlink" title="3.1 共同点"></a>3.1 共同点</h2><ul><li><p>都是抽象类型</p></li><li><p>都可以有实现方法（以前接口不行）</p></li><li>都可以不需要实现类或者继承者去实现所有方法。（以前不行，现在接口中默认方法不需要实现者实现）</li></ul><h2 id="3-2-不同点"><a href="#3-2-不同点" class="headerlink" title="3.2 不同点"></a>3.2 不同点</h2><ul><li><p>抽象类不可以多重继承，接口可以（无论是多重类型继承还是多重行为继承）</p></li><li><p>抽象类和接口所反映出的设计理念不同。其实抽象类表示的是”is-a”关系，接口表示的是”like-a”关系</p></li><li><p>接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值</p><blockquote><p>如果一个类、类属变量及方法不以这三种修饰符来修饰，它就是friendly类型的，那么包内的任何类都可以访问它，而包外的任何类都不能访问它(包括包外继承了此类的子类)</p></blockquote></li></ul><p>总体来说，抽象类和接口在很大程度上都是可以互相替换使用的，但就是由于抽象类本身具备单继承局限，所以当抽象类和接口全部都可以使用的时候优先考虑接口，因为接口没有单继承局限，并且在Java8中接口可以设定默认方法，在一定程度上避免代码重复，利于后期的维护。</p>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-整理篇-map操作</title>
      <link href="/2019/10/28/java-8-map%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/10/28/java-8-map%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-声明及初始化Map"><a href="#1-声明及初始化Map" class="headerlink" title="1.声明及初始化Map"></a>1.声明及初始化Map</h1><h2 id="1-1-先定义-后赋值"><a href="#1-1-先定义-后赋值" class="headerlink" title="1.1 先定义,后赋值"></a>1.1 先定义,后赋值</h2><pre><code>Map&lt;String , Object&gt; map = new HashMap&lt;String , Object&gt;();map.put(&quot;key1&quot;, &quot;value1&quot;);map.put(&quot;key2&quot;, &quot;value2&quot;);map.put(&quot;keyN&quot;, &quot;valueN&quot;);</code></pre><h2 id="1-2-双括号初始化法"><a href="#1-2-双括号初始化法" class="headerlink" title="1.2 双括号初始化法"></a>1.2 双括号初始化法</h2><pre><code>Map&lt;String , String&gt; map = new HashMap&lt;String , Object&gt;(){{    put("key1", "value1");    put("key2", "value2");    put("keyN", "valueN");}};</code></pre><h2 id="1-3-使用初始块"><a href="#1-3-使用初始块" class="headerlink" title="1.3 使用初始块"></a>1.3 使用初始块</h2><pre><code>public class MyMap {     Map&lt;String,String&gt; maps;    // 使用初始块定义    {        maps = new HashMap&lt;&gt;();        maps.put(&quot;key1&quot;,&quot;value1&quot;);        maps.put(&quot;key2&quot;,&quot;value2&quot;);        maps.put(&quot;key3&quot;,&quot;value3&quot;);    }    public void printMap(){        System.out.println(maps);        // 输出:{key1=value1, key2=value2, key3=value3}    }}</code></pre><h1 id="2-遍历Map"><a href="#2-遍历Map" class="headerlink" title="2.遍历Map"></a>2.遍历Map</h1><h2 id="2-1-key-gt-value"><a href="#2-1-key-gt-value" class="headerlink" title="2.1 key=&gt;value"></a>2.1 key=&gt;value</h2><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {   System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue()); }</code></pre><h2 id="2-2-遍历keys或values"><a href="#2-2-遍历keys或values" class="headerlink" title="2.2 遍历keys或values"></a>2.2 遍历keys或values</h2><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); //遍历map中的键 for (Integer key : map.keySet()) {   System.out.println(&quot;Key = &quot; + key); } //遍历map中的值 for (Integer value : map.values()) {   System.out.println(&quot;Value = &quot; + value); }</code></pre><h2 id="2-3-使用Iterator遍历"><a href="#2-3-使用Iterator遍历" class="headerlink" title="2.3 使用Iterator遍历"></a>2.3 使用Iterator遍历</h2><h3 id="2-3-1-使用泛型"><a href="#2-3-1-使用泛型" class="headerlink" title="2.3.1 使用泛型"></a>2.3.1 使用泛型</h3><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet().iterator(); while (entries.hasNext()) {   Map.Entry&lt;Integer, Integer&gt; entry = entries.next();   System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue()); }// 在keySet上Iterator&lt;String&gt; iterator = map.keySet().iterator();while (iterator.hasNext()) {    String key = iterator.next();    System.out.println(&quot;MyClass.testMap key=&quot; + key);}//在values上Iterator&lt;Integer&gt; iterator2 = map.values().iterator();while (iterator2.hasNext()){    Integer values = iterator2.next();    System.out.println(&quot;MyClass.testMap values=&quot;+values);}</code></pre><h3 id="2-3-2-不使用泛型"><a href="#2-3-2-不使用泛型" class="headerlink" title="2.3.2 不使用泛型"></a>2.3.2 不使用泛型</h3><pre><code>Map map = new HashMap(); Iterator entries = map.entrySet().iterator(); while (entries.hasNext()) {   Map.Entry entry = (Map.Entry) entries.next();   Integer key = (Integer)entry.getKey();   Integer value = (Integer)entry.getValue();   System.out.println(&quot;Key = &quot; + key + &quot;, Value = &quot; + value); }</code></pre><h2 id="2-4-通过键找值遍历（效率低）"><a href="#2-4-通过键找值遍历（效率低）" class="headerlink" title="2.4 通过键找值遍历（效率低）"></a>2.4 通过键找值遍历（效率低）</h2><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for (Integer key : map.keySet()) {   Integer value = map.get(key);   System.out.println(&quot;Key = &quot; + key + &quot;, Value = &quot; + value);}</code></pre><h1 id="3-map接口方法使用"><a href="#3-map接口方法使用" class="headerlink" title="3.map接口方法使用"></a>3.map接口方法使用</h1><h2 id="3-1-void-clear-删除该Map对象中的所有key-value对"><a href="#3-1-void-clear-删除该Map对象中的所有key-value对" class="headerlink" title="3.1 void clear():删除该Map对象中的所有key-value对"></a>3.1 void clear():删除该Map对象中的所有key-value对</h2><p><code>clear():删除该Map对象中的所有key-value对</code></p><pre><code>Map&lt;String,String&gt;  maps = new HashMap&lt;&gt;();maps.put(&quot;key1&quot;,&quot;value1&quot;);maps.put(&quot;key2&quot;,&quot;value2&quot;);System.out.println(&quot;clear前:&quot; + maps); maps.clear();System.out.println(&quot;clear后:&quot; + maps);/*** 输出: clear前:{key1=value1, key2=value2} clear后:{}*/</code></pre><h2 id="3-2-boolean-containsKey-Object-key"><a href="#3-2-boolean-containsKey-Object-key" class="headerlink" title="3.2 boolean containsKey(Object key)"></a>3.2 boolean containsKey(Object key)</h2><p><code>containsKey(Object key):查询Map中是否包含指定的key，如果包含则返回true</code></p><pre><code>Map&lt;String,String&gt;  maps = new HashMap&lt;&gt;();maps.put(&quot;key1&quot;,&quot;value1&quot;);maps.put(&quot;key2&quot;,&quot;value2&quot;);System.out.println(&quot;判断key1是否存在:&quot; + maps.containsKey(&quot;key1&quot;));System.out.println(&quot;判断key8是否存在:&quot; + maps.containsKey(&quot;key8&quot;));/*** 输出:判断key1是否存在:true判断key8是否存在:false*/</code></pre><h2 id="3-3-boolean-containsValue-Object-value"><a href="#3-3-boolean-containsValue-Object-value" class="headerlink" title="3.3 boolean containsValue(Object value)"></a>3.3 boolean containsValue(Object value)</h2><p><code>查询Map中是否包含一个或多个value，如果包含则返回true。</code></p><pre><code>Map&lt;String,String&gt;  maps = new HashMap&lt;&gt;();maps.put(&quot;key1&quot;,&quot;value1&quot;);maps.put(&quot;key2&quot;,&quot;value2&quot;);System.out.println(&quot;判断value1是否存在:&quot; + maps.containsValue(&quot;value1&quot;));System.out.println(&quot;判断value8是否存在:&quot; + maps.containsValue(&quot;value8&quot;));/*** 输出:判断value1是否存在:true判断value8是否存在:false*/</code></pre><h2 id="3-4-Set-entrySet"><a href="#3-4-Set-entrySet" class="headerlink" title="3.4 Set entrySet()"></a>3.4 Set entrySet()</h2><p><code>Set entrySet():返回Map中包含的key-value对所组成的Set集合，每个集合元素都是Map.Entry （Entry是Map的内部类）对象。</code></p><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {   System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue()); }</code></pre><h2 id="3-5-Object-get-Object-key"><a href="#3-5-Object-get-Object-key" class="headerlink" title="3.5  Object get(Object key)"></a>3.5  Object get(Object key)</h2><p><code>返回指定key所对应的value；如果此Map中不包含该key，则返回null。</code></p><pre><code>Map&lt;String,String&gt;  maps = new HashMap&lt;&gt;();maps.put(&quot;key1&quot;,&quot;value1&quot;);maps.put(&quot;key2&quot;,&quot;value2&quot;);System.out.println(&quot;key1的值:&quot; + maps.get(&quot;key1&quot;));System.out.println(&quot;key2的值:&quot; + maps.get(&quot;key2&quot;));/*** 输出:key1的值:value1key2的值:value2*/</code></pre><h2 id="3-6-boolean-isEmpty"><a href="#3-6-boolean-isEmpty" class="headerlink" title="3.6 boolean isEmpty()"></a>3.6 boolean isEmpty()</h2><p><code>查询该Map是否为空（即不包含任何key-value对），如果为空则返回true。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key2&quot;,&quot;value2&quot;);Map&lt;String,String&gt;  map2 = new HashMap&lt;&gt;();System.out.println(&quot;map1是否为空:&quot; + map1.isEmpty());System.out.println(&quot;map2是否为空:&quot; + map2.isEmpty());/*** 输出:map1是否为空:falsemap2是否为空:true*/</code></pre><h2 id="3-7-Set-keySet"><a href="#3-7-Set-keySet" class="headerlink" title="3.7 Set keySet()"></a>3.7 Set keySet()</h2><p><code>返回该Map中所有key组成的Set集合。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key2&quot;,&quot;value2&quot;);System.out.println(&quot;keySet结果:&quot; + map1.keySet());//  输出:keySet结果:[key1, key2]</code></pre><h2 id="3-8-Object-put-Object-key-Object-value"><a href="#3-8-Object-put-Object-key-Object-value" class="headerlink" title="3.8 Object put(Object key, Object value):"></a>3.8 Object put(Object key, Object value):</h2><p><code>添加一个key-value对，如果当前Map中已有一个与该key相等的key-value对，则新的key-value对会覆盖原来的key-value对。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key1&quot;,&quot;value11&quot;);System.out.println(&quot;keySet结果:&quot; + map1.keySet());//输出:map1结果:{key1=value11, key2=value2}</code></pre><h2 id="3-9-void-putAll-Map-m"><a href="#3-9-void-putAll-Map-m" class="headerlink" title="3.9 void putAll(Map m)"></a>3.9 void putAll(Map m)</h2><p><code>将指定Map中的key-value对复制到本Map中。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key2&quot;,&quot;value2&quot;);Map&lt;String,String&gt;  map2 = new HashMap&lt;&gt;();map2.put(&quot;a&quot;,&quot;php&quot;);map2.put(&quot;key2&quot;,&quot;java&quot;);map1.putAll(map2);System.out.println(&quot;map1结果:&quot; + map1);//输出:{key1=value1, key2=java, a=php}</code></pre><h2 id="3-10-Object-remove-Object-key"><a href="#3-10-Object-remove-Object-key" class="headerlink" title="3.10 Object remove(Object key)"></a>3.10 Object remove(Object key)</h2><p><code>删除指定key所对应的key-value对，返回被删除key所关联的value，如果该key不存在，则返回null。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key2&quot;,&quot;value2&quot;);map1.put(&quot;key3&quot;,&quot;value3&quot;);map1.remove(&quot;key2&quot;);System.out.println(&quot;map1结果:&quot; + map1);//输出:map1结果:{key1=value1, key3=value3}</code></pre><h2 id="3-11-int-size"><a href="#3-11-int-size" class="headerlink" title="3.11 int size()"></a>3.11 int size()</h2><p><code>返回该Map里的key-value对的个数。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key2&quot;,&quot;value2&quot;);map1.put(&quot;key3&quot;,&quot;value3&quot;);System.out.println(&quot;map1的key-value对的个数:&quot; + map1.size());//输出:map1的key-value对的个数:3</code></pre><h2 id="3-12-Collection-values"><a href="#3-12-Collection-values" class="headerlink" title="3.12 Collection values()"></a>3.12 Collection values()</h2><p><code>返回该Map里所有value组成的Collection。</code></p><pre><code>Map&lt;String,String&gt;  map1 = new HashMap&lt;&gt;();map1.put(&quot;key1&quot;,&quot;value1&quot;);map1.put(&quot;key2&quot;,&quot;value2&quot;);map1.put(&quot;key3&quot;,&quot;value3&quot;);System.out.println(&quot;map1的value集合:&quot; + map1.values());//输出:map1的value集合:[value1, value2, value3]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-集合</title>
      <link href="/2019/10/18/java-7-%E9%9B%86%E5%90%88/"/>
      <url>/2019/10/18/java-7-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-集合的作用"><a href="#1-集合的作用" class="headerlink" title="1.集合的作用"></a>1.集合的作用</h2><p>为了保存数量不确定的数据，以及保存具有映射关系的数据（也被称为关联数组），Java提供了集合类。集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所有的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，Java 5还在java.util.concurrent包下提供了一些多线程支持的集合类。</p><h2 id="2-集合分类"><a href="#2-集合分类" class="headerlink" title="2.集合分类"></a>2.集合分类</h2><p>Java集合大致可分为Set、List和Map三种体系，</p><ul><li>Set: 代表无序、不可重复的集合；</li><li>List: 代表有序、重复的集合；而</li><li>Map: 代表具有映射关系的集合。</li><li><code>Queue: 从Java 5以后，Java又增加了Queue体系集合，代表一种队列集合实现</code></li></ul><h2 id="3-集合和数组的区别"><a href="#3-集合和数组的区别" class="headerlink" title="3.集合和数组的区别"></a>3.集合和数组的区别</h2><p>集合类和数组不一样，数组元素既可以是基本类型的值，也可以是对象（实际上保存的是对象的引用变量）；而集合里只能保存对象（实际上只是保存对象的引用变量，但通常习惯上认为集合里保存的是对象）。</p><h3 id="3-1-存储元素角度"><a href="#3-1-存储元素角度" class="headerlink" title="3.1 存储元素角度:"></a>3.1 存储元素角度:</h3><ul><li>数组: 可以保存基本类型的值和是<code>对象</code>。</li><li>集合: 只能保存<code>对象</code>。</li></ul><blockquote><font color="red">数组和集合中保存对象，实际上只是保存对象的引用变量</font></blockquote><h3 id="3-2-长度角度"><a href="#3-2-长度角度" class="headerlink" title="3.2. 长度角度:"></a>3.2. 长度角度:</h3><p>数组的长度是固定的，集合的长度是可变的。</p><h2 id="4-集合分类的关系"><a href="#4-集合分类的关系" class="headerlink" title="4.集合分类的关系"></a>4.集合分类的关系</h2><p>Java的集合类主要由两个接口派生而出：Collection和Map，Collection和Map是Java集合框架的根接口，这两个接口又包含了一些子接口或实现类。</p><h3 id="4-1-Collection接口、子接口及其实现类的继承树"><a href="#4-1-Collection接口、子接口及其实现类的继承树" class="headerlink" title="4.1 Collection接口、子接口及其实现类的继承树"></a>4.1 Collection接口、子接口及其实现类的继承树</h3><p><img src="https://mrliuqh.github.io/directionsImg/java/collection-extends-tree.jpeg" alt=""></p><p><code>粗线圈出的Set和List接口是Collection接口派生的两个子接口，它们分别代表了无序集合和有序集合；Queue是Java提供的队列实现，有点类似于List</code></p><h3 id="4-2-Map接口、子接口及其实现类的继承树"><a href="#4-2-Map接口、子接口及其实现类的继承树" class="headerlink" title="4.2  Map接口、子接口及其实现类的继承树"></a>4.2  Map接口、子接口及其实现类的继承树</h3><p><img src="https://mrliuqh.github.io/directionsImg/java/map-tree.jpg" alt=""></p><h2 id="5-集合读存"><a href="#5-集合读存" class="headerlink" title="5.集合读存"></a>5.集合读存</h2><h3 id="5-1-存储"><a href="#5-1-存储" class="headerlink" title="5.1 存储"></a>5.1 存储</h3><p>我们可以把Java的所有集合分成三大类，</p><ul><li>Set集合类似于一个罐子，把一个对象添加到Set集合时，Set集合无法记住添加这个元素的顺序，所以Set里的元素不能重复（否则系统无法准确识别这个元素）；</li><li>List集合非常像一个数组，它可以记住每次添加元素的顺序，只是List的长度可变。</li><li>Map集合也像一个罐子，只是它里面的每项数据都由两个值组成。</li></ul><p><strong>三种集合示意图:</strong><br><img src="https://mrliuqh.github.io/directionsImg/java/conllection-save.jpg" alt=""></p><h3 id="5-2-读取"><a href="#5-2-读取" class="headerlink" title="5.2 读取"></a>5.2 读取</h3><ul><li>List集合中的元素，可以直接根据元素的索引来访问；</li><li>Map集合中的元素，可以根据每项元素的key来访问其value；</li><li>Set集合中的元素，可以根据元素本身来访问（这也是Set集合里元素不允许重复的原因）</li></ul><h2 id="6-常用集合类及继承关系"><a href="#6-常用集合类及继承关系" class="headerlink" title="6.常用集合类及继承关系"></a>6.常用集合类及继承关系</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/offen-use-conllection.png" alt=""></p><h2 id="7-collection接口"><a href="#7-collection接口" class="headerlink" title="7.collection接口"></a>7.collection接口</h2><p>Collection接口是List、Set和Queue接口的父接口，该接口里定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。Collection接口里定义了如下操作集合元素的方法</p><h3 id="7-1-操作集合方法列表"><a href="#7-1-操作集合方法列表" class="headerlink" title="7.1 操作集合方法列表"></a>7.1 操作集合方法列表</h3><p>Collection接口操作集合元素的方法</p><ul><li>boolean add(Object o)：该方法用于向集合里添加一个元素。如果集合对象被添加操作改变了，则返回true。</li></ul><pre><code>public static void TestAdd(){  // 定义一个list集合  ArrayList&lt;String&gt; myList = new ArrayList&lt;&gt;();  boolean a1 = myList.add(&quot;第1个元素&quot;);  boolean a2 = myList.add(&quot;第2个元素&quot;);  System.out.println(myList);  System.out.println(a1);  System.out.println(a2);}/* 输出:[第1个元素, 第2个元素]truetrue*/</code></pre><ul><li>boolean addAll(Collection c)：该方法把集合c里的所有元素添加到指定集合里。如果集合对象被添加操作改变了，则返回true。</li></ul><pre><code>public static void TestAddAll(){  ArrayList&lt;String&gt; strList = new ArrayList&lt;&gt;();  strList.add(&quot;A&quot;);  strList.add(&quot;B&quot;);  Collection&lt;String&gt; subStrList = new ArrayList&lt;&gt;();  subStrList.add(&quot;C&quot;);  subStrList.add(&quot;D&quot;);  System.out.println(&quot;合并前的strList:&quot; + strList);  strList.addAll(subStrList);  System.out.println(&quot;合并后的strList:&quot; + strList);}/* 输出:合并前的strList:[A, B]合并后的strList:[A, B, C, D]*/</code></pre><ul><li>void clear()：清除集合里的所有元素，将集合长度变为0。</li></ul><pre><code>public static void TestClear(){  ArrayList&lt;String&gt; strList = new ArrayList&lt;&gt;();  strList.add(&quot;A&quot;);  strList.add(&quot;B&quot;);  strList.add(&quot;C&quot;);  strList.add(&quot;D&quot;);  System.out.println(&quot;Clear前的strList:&quot; + strList);  strList.clear();  System.out.println(&quot;Clear后的strList:&quot; + strList);}/* 输出:Clear前的strList:[A, B, C, D]Clear后的strList:[]*/</code></pre><ul><li>boolean contains(Object o)：返回集合里是否包含指定元素。</li><li>boolean containsAll(Collection c)：返回集合里是否包含集合c里的所有元素。</li><li>boolean isEmpty()：返回集合是否为空。当集合长度为0时返回true，否则返回false。</li><li>Iterator iterator()：返回一个Iterator对象，用于遍历集合里的元素。</li><li>boolean remove(Object o)：删除集合中的指定元素o，当集合中包含了一个或多个元素o时，这些元素将被删除，该方法将返回true。</li><li>boolean removeAll(Collection c)：从集合中删除集合c里包含的所有元素（相当于用调用该方法的集合减集合c），如果删除了一个或一个以上的元素，则该方法返回true。</li><li><p>boolean retainAll(Collection c)：从集合中删除集合c里不包含的元素（相当于把调用该方法的集合变成该集合和集合c的交集），如果该操作改变了调用该方法的集合，则该方法返回true。</p></li><li><p>int size()：该方法返回集合里元素的个数。</p></li><li>Object[] toArray()：该方法把集合转换成一个数组，所有的集合元素变成对应的数组元素。</li></ul><h3 id="7-2-foreach-遍历集合元素"><a href="#7-2-foreach-遍历集合元素" class="headerlink" title="7.2 foreach 遍历集合元素"></a>7.2 foreach 遍历集合元素</h3><pre><code>public static void TestForeach(){    ArrayList&lt;String&gt; strList = new ArrayList&lt;&gt;();    strList.add(&quot;A&quot;);    strList.add(&quot;B&quot;);    strList.add(&quot;C&quot;);    strList.add(&quot;D&quot;);    for (String str: strList){      System.out.println(str);    }}/**输出:ABCD**/</code></pre><blockquote><p>foreach循环中的迭代变量不是集合元素本身，系统只是依次把集合元素的值赋给迭代变量，因此在foreach循环中修改迭代变量的值没有任何实际意义。<br>同样，<font color="red">当使用foreach循环迭代访问集合元素时，该集合不能被改变，否则将引发Concurrent ModificationException异常</font>。</p></blockquote><p><strong>下面示例会报错:</strong></p><pre><code> public static void TestForeach() {   Collection&lt;String&gt; strList = new ArrayList&lt;&gt;();   strList.add(&quot;A&quot;);   strList.add(&quot;B&quot;);   strList.add(&quot;C&quot;);   strList.add(&quot;D&quot;);   for (String str : strList) {       if (str.equals(&quot;A&quot;)) {           // 这一行代码会报错           strList.remove(str);       }   }   System.out.println(strList);}/**报错:**Exception in thread &quot;main&quot; java.util.ConcurrentModificationException..*/</code></pre><blockquote><font color="ff6a00">上面程序如果改为删除“C”字符串，则不会引发异常，这样可能有些读者会“心存侥幸”地想：在迭代时好像也可以删除集合元素啊。实际上这是一种危险的行为：对于HashSet以及后面的ArrayList等，迭代时删除元素都会导致异常——只有在删除集合中的某个特定元素时才不会抛出异常，这是由集合类的实现代码决定的，程序员不应该这么做。</font></blockquote><h2 id="8-Set集合"><a href="#8-Set集合" class="headerlink" title="8. Set集合"></a>8. Set集合</h2><p>Set集合不允许包含相同的元素，如果试图把两个相同的元素加入同一个Set集合中，则添加操作失败，add方法返回false，且新元素不会被加入。</p><font color="green">Set判断两个对象相同不是使用==运算符，而是根据equals方法。也就是说，只要两个对象用equals方法比较返回true，Set就不会接受这两个对象；反之，只要两个对象用equals方法比较返回false，Set就会接受这两个对象（甚至这两个对象是同一个对象，Set也可把它们当成两个对象处理。</font><h3 id="8-1-HashSet类"><a href="#8-1-HashSet类" class="headerlink" title="8.1 HashSet类"></a>8.1 HashSet类</h3><p>HashSet是Set接口的典型实现，大多数时候使用Set集合时就是使用这个实现类。HashSet按Hash算法来存储集合中的元素，因此具有很好的存取和查找性能。</p><h4 id="8-1-1-HashSet特点"><a href="#8-1-1-HashSet特点" class="headerlink" title="8.1.1 HashSet特点"></a>8.1.1 HashSet特点</h4><ul><li>不能保证元素的排列顺序，顺序有可能发生变化。</li><li>HashSet不是同步的，如果多个线程同时访问一个HashSet，假设有两个或者两个以上线程同时修改了HashSet集合时，则必须通过代码来保证其同步。</li><li>集合元素值可以是null。</li></ul><p><code>当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据该HashCode值决定该对象在HashSet中的存储位置。如果有两个元素通过equals()方法比较返回true，但它们的hashCode()方法返回值不相等，HashSet将会把它们存储在不同的位置，依然可以添加成功。</code></p><blockquote><p>简单地说，HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法返回值也相等。</p></blockquote><h4 id="8-1-2-重写hasCode的规则"><a href="#8-1-2-重写hasCode的规则" class="headerlink" title="8.1.2 重写hasCode的规则"></a>8.1.2 重写hasCode的规则</h4><p>HashSet中每个能存储元素的“槽位”（slot）通常称为“桶”（bucket），如果有多个元素的hashCode值相同，但它们通过equals()方法比较返回false，就需要在一个“桶”里放多个元素，这样会导致性能下降。</p><p><strong>重写hashCode()方法的基本规则。</strong></p><ul><li><p>在程序运行过程中，同一个对象多次调用hashCode()方法应该返回相同的值。</p></li><li><p>当两个对象通过equals()方法比较返回true时，这两个对象的hashCode()方法应返回相等的值。</p></li><li>对象中用作equals()方法比较标准的Field，都应该用来计算hashCode值。</li></ul><p>下面给出重写hashCode()方法的一般规则。</p><ul><li>第一步:把对象内每个有意义的Field（即每个用做equals()方法比较标准的Field）计算出一个int类型的hashCode值。计算方式如下表:<br><img src="https://mrliuqh.github.io/directionsImg/java/hascode-rule.jpg" alt=""></li></ul><p><strong>例如代码:</strong></p><pre><code>return f1.hashCode() + (int)f2;</code></pre><ul><li>第二步:为了避免直接相加产生偶然相等（两个对象的f1、f2 Field并不相等，但它们的和恰好相等），可以通过为各Field乘以任意一个质数后再相加。例如如下代码：</li></ul><p><strong>例如代码:</strong></p><pre><code>return f1.hashCode() * 17 + (int)f2 * 13;</code></pre><h3 id="8-2-LinkedHashSet类"><a href="#8-2-LinkedHashSet类" class="headerlink" title="8.2 LinkedHashSet类"></a>8.2 LinkedHashSet类</h3><p>HashSet还有一个子类LinkedHashSet，LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的。也就是说，当遍历LinkedHashSet集合里的元素时，LinkedHashSet将会按元素的添加顺序来访问集合里的元素。<br>LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet的性能，但在迭代访问Set里的全部元素时将有很好的性能，因为它以链表来维护内部顺序。</p><pre><code>public class LinkedHashSetTest{   public static void main(String[] args)   {      LinkedHashSet books=new LinkedHashSet();      books.add(&quot;Java&quot;);      books.add(&quot;PHP&quot;);      System.out.println(books);      //删除 Java      books.remove(&quot;Java&quot;);      //重新添加 Java      books.add(&quot;Java&quot;);      System.out.println(books);   }}/*输出:[Java,PHP][PHP,Java]*/</code></pre><blockquote><p>输出LinkedHashSet集合的元素时，元素的顺序总是与添加顺序一致。</p></blockquote><font color="green">虽然LinkedHashSet使用了链表记录集合元素的添加顺序，但LinkedHashSet依然是HashSet，因此它依然不允许集合元素重复。</font><h3 id="8-3-TreeSet类"><a href="#8-3-TreeSet类" class="headerlink" title="8.3 TreeSet类"></a>8.3 TreeSet类</h3><p>TreeSet是SortedSet接口的实现类，正如SortedSet名字所暗示的，<font color="ff6a00">TreeSet可以确保集合元素处于排序状态。</font>与HashSet集合相比，TreeSet还提供了如下几个额外的方法。</p><h4 id="8-3-1-TreeSet专有的方法"><a href="#8-3-1-TreeSet专有的方法" class="headerlink" title="8.3.1 TreeSet专有的方法"></a>8.3.1 TreeSet专有的方法</h4><ul><li><p>Comparator comparator()：如果TreeSet采用了定制排序，则该方法返回定制排序所使用的Comparator；如果TreeSet采用了自然排序，则返回null。</p></li><li><p>Object first()：返回集合中的第一个元素。</p></li><li>Object last()：返回集合中的最后一个元素。</li><li>Object lower(Object e)：返回集合中位于指定元素之前的元素（即小于指定元素的最大元素，参考元素不需要是TreeSet集合里的元素）。</li><li>Object higher (Object e)：返回集合中位于指定元素之后的元素（即大于指定元素的最小元素，参考元素不需要是TreeSet集合里的元素）。</li><li>SortedSet subSet(fromElement, toElement)：返回此Set的子集合，范围从fromElement（包含）到toElement（不包含）。</li><li>SortedSet headSet(toElement)：返回此Set的子集，由小于toElement的元素组成。</li><li>SortedSet tailSet(fromElement)：返回此Set的子集，由大于或等于fromElement的元素组成。</li></ul><p><strong>使用</strong></p><pre><code>TreeSet treeSet = new TreeSet();treeSet.add(1);treeSet.add(2);</code></pre><p><strong><font color="fc7900">@注意:</font></strong></p><ul><li><p>TreeSet并不是根据元素的插入顺序进行排序的，而是根据元素的实际值的大小进行排序的。</p></li><li><p>TreeSet是采用红黑树的数据结构来存储集合元素。</p></li><li>TreeSet支持两种排序方法:自然排序和定制排序，默认采用自然排序</li><li>TreeSet的集合，只能存放实现Comparable接口的类的对象（java一些常用的类已经实现了Comparable接口）。</li></ul><h3 id="8-4-EnumSet类"><a href="#8-4-EnumSet类" class="headerlink" title="8.4 EnumSet类"></a>8.4 EnumSet类</h3><p>EnumSet是一个专为枚举类设计的集合类，EnumSet中的所有元素都必须是指定枚举类型的枚举值，该枚举类型在创建EnumSet时显式或隐式地指定。EnumSet的集合元素也是有序的，EnumSet以枚举值在Enum类内的定义顺序来决定集合元素的顺序。</p><p><strong><font color="fc7900">@注意:</font></strong></p><ul><li>EnumSet的集合元素也是有序。</li><li>EnumSet在内部以位向量的形式存储，这种存储形式非常紧凑、高效，因此EnumSet对象占用内存很小，而且运行效率很好。</li><li>批量操作（如调用containsAll和retainAll方法）时，如果其参数也是EnumSet集合，则该批量操作的执行速度也非常快。</li><li>EnumSet集合不允许加入null元素，否则抛出NullPointerException异常</li><li>EnumSet类没有暴露任何构造器来创建该类的实例，程序应该通过它提供的static方法来创建EnumSet对象。</li></ul><h4 id="8-4-1-创建EnumSet对象的静态方法"><a href="#8-4-1-创建EnumSet对象的静态方法" class="headerlink" title="8.4.1 创建EnumSet对象的静态方法"></a>8.4.1 创建EnumSet对象的静态方法</h4><ul><li><p>static EnumSet allOf(Class elementType)：创建一个包含指定枚举类里所有枚举值的EnumSet集合。</p></li><li><p>static EnumSet complementOf(EnumSet s)：创建一个其元素类型与指定EnumSet里元素类型相同的EnumSet集合，新EnumSet集合包含原EnumSet集合所不包含的、此枚举类剩下的枚举值（即新EnumSet集合和原EnumSet集合的集合元素加起来就是该枚举类的所有枚举值）。</p></li><li>static EnumSet copyOf(Collection c)：使用一个普通集合来创建EnumSet集合。</li><li>static EnumSet copyOf(EnumSet s)：创建一个与指定EnumSet具有相同元素类型、相同集合元素的EnumSet集合。</li><li>static EnumSet noneOf(Class elementType)：创建一个元素类型为指定枚举类型的空EnumSet。</li><li>static EnumSet of(E first, E… rest)：创建一个包含一个或多个枚举值的EnumSet集合，传入的多个枚举值必须属于同一个枚举类。</li><li>static EnumSet range(E from, E to)：创建一个包含从from枚举值到to枚举值范围内所有枚举值的EnumSet集合。</li></ul><p><strong>下面程序示范了如何使用EnumSet来保存枚举类的多个枚举值</strong></p><pre><code>enum Season{    SPRING,SUMMER,FALL,WINTER}public class EnumSetTest{    public static void main(String[] args)    {       //创建一个EnumSet集合，集合元素就是Season枚举类的全部枚举值       EnumSet es1=EnumSet.allOf(Season.class);       //输出[SPRING,SUMMER,FALL,WINTER]       System.out.println(es1);       //创建一个EnumSet空集合，指定其集合元素是Season类的枚举值       EnumSet es2=EnumSet.noneOf(Season.class);       //输出[]       System.out.println(es2);       //手动添加两个元素       es2.add(Season.WINTER);       es2.add(Season.SPRING);       //输出[SPRING,WINTER]       System.out.println(es2);       //以指定枚举值创建EnumSet集合       EnumSet es3=EnumSet.of(Season.SUMMER , Season.WINTER);       //输出[SUMMER,WINTER]       System.out.println(es3);       EnumSet es4=EnumSet.range(Season.SUMMER , Season.WINTER);       //输出[SUMMER,FALL,WINTER]       System.out.println(es4);       //新创建的EnumSet集合元素和es4集合元素有相同的类型       /es5集合元素 + es4集合元素=Season枚举类的全部枚举值       EnumSet es5=EnumSet.complementOf(es4);       //输出[SPRING]       System.out.println(es5);    }}</code></pre><h3 id="8-5-各Set实现类的性能分析"><a href="#8-5-各Set实现类的性能分析" class="headerlink" title="8.5 各Set实现类的性能分析"></a>8.5 各Set实现类的性能分析</h3><p>HashSet和TreeSet是Set的两个典型实现，到底如何选择HashSet和TreeSet呢？HashSet的性能总是比TreeSet好（特别是最常用的添加、查询元素等操作），因为TreeSet需要额外的红黑树算法来维护集合元素的次序。只有当需要一个保持排序的Set时，才应该使用TreeSet，否则都应该使用HashSet。</p><p>HashSet还有一个子类：LinkedHashSet，对于普通的插入、删除操作，LinkedHashSet比HashSet要略微慢一点，这是由维护链表所带来的额外开销造成的；不过，因为有了链表，遍历LinkedHashSet会更快。</p><p>EnumSet是所有Set实现类中性能最好的，但它只能保存同一个枚举类的枚举值作为集合元素。</p><p>必须指出的是，Set的三个实现类HashSet、TreeSet和EnumSet都是线程不安全的。如果有多个线程同时访问一个Set集合，并且有超过一个线程修改了该Set集合，则必须手动保证该Set集合的同步性。通常可以通过Collections工具类的synchronizedSortedSet方法来“包装”该Set集合。此操作最好在创建时进行，以防止对Set集合的意外非同步访问。例如：</p><pre><code>SortedSet s=Collections.synchronizedSortedSet(new TreeSet(...));</code></pre><h2 id="9-List集合"><a href="#9-List集合" class="headerlink" title="9.List集合"></a>9.List集合</h2><p>List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素。List集合默认按元素的添加顺序设置元素的索引，</p><h3 id="9-1-List接口和ListIterator接口"><a href="#9-1-List接口和ListIterator接口" class="headerlink" title="9.1 List接口和ListIterator接口"></a>9.1 List接口和ListIterator接口</h3><p>List作为Collection接口的子接口，当然可以使用Collection接口里的全部方法。而且由于List是有序集合，因此List集合里增加了一些根据索引来操作集合元素的方法。<br><!--<div style="background:#b4d068">--></p><ul><li><p>void add(int index, Object element): 将元素element插入到List集合的index处。</p></li><li><p>boolean addAll(int index, Collection c): 将集合c所包含的所有元素都插入到List集合的index处。</p></li><li>Object get(int index): 返回集合index索引处的元素。</li><li>int indexOf(Object o): 返回对象o在List集合中第一次出现的位置索引。</li><li>int lastIndexOf(Object o): 返回对象o在List集合中最后一次出现的位置索引。</li><li>Object remove(int index): 删除并返回index索引处的元素。</li><li>Object set(int index, Object element): 将index索引处的元素替换成element对象，返回新元素。</li><li>List subList(int fromIndex, int toIndex): 返回从索引fromIndex（包含）到索引toIndex（不包含）处所有集合元素组成的子集合。</li></ul><blockquote><p>所有的List实现类都可以调用这些方法来操作集合元素。与Set集合相比，List增加了根据索引来插入、替换和删除集合元素的方法。</p></blockquote><h3 id="9-2-ArrayList和Vector实现类"><a href="#9-2-ArrayList和Vector实现类" class="headerlink" title="9.2 ArrayList和Vector实现类"></a>9.2 ArrayList和Vector实现类</h3><p>ArrayList和Vector作为List类的两个典型实现，完全支持前面介绍的List接口的全部功能。</p><p>ArrayList或Vector对象使用initialCapacity参数来设置该数组的长度，当向ArrayList或Vector中添加元素超出了该数组的长度时，它们的initialCapacity会自动增加。<br>对于通常的编程场景，程序员无须关心ArrayList或Vector的initialCapacity。<font color="#ffa500">但如果向ArrayList或Vector集合中添加大量元素时，可使用ensureCapacity(int minCapacity)方法一次性地增加initialCapacity。这可以减少重分配的次数，从而提高性能。</font></p><p><strong>创建空的ArrayList或Vector集合时不指定initialCapacity参数，则Object[]数组的长度默认为10。</strong></p><h4 id="9-2-1-重新分配ArrayList和Vector长度方法"><a href="#9-2-1-重新分配ArrayList和Vector长度方法" class="headerlink" title="9.2.1 重新分配ArrayList和Vector长度方法"></a>9.2.1 重新分配ArrayList和Vector长度方法</h4><ul><li><p>void ensureCapacity(int minCapacity)：将ArrayList或Vector集合的Object[]数组长度增加minCapacity。</p></li><li><p>void trimToSize()：调整ArrayList或Vector集合的Object[]数组长度为当前元素的个数。程序可调用该方法来减少ArrayList或Vector集合对象占用的存储空间。</p></li></ul><h4 id="9-2-2-ArrayList和Vector的区别"><a href="#9-2-2-ArrayList和Vector的区别" class="headerlink" title="9.2.2 ArrayList和Vector的区别"></a>9.2.2 ArrayList和Vector的区别</h4><ul><li>ArrayList是线程不安全的: 当多个线程访问同一个ArrayList集合时，如果有超过一个线程修改了ArrayList集合，则程序必须手动保证该集合的同步性</li><li>Vector集合则是线程安全的:因为Vector是线程安全的，所以Vector的性能比ArrayList的性能要低</li></ul><blockquote><p>实际上，即使需要保证List集合线程安全，也同样不推荐使用Vector实现类。Collections工具类可以将一个ArrayList变成线程安全的。</p></blockquote><h4 id="9-2-3-固定长度的List"><a href="#9-2-3-固定长度的List" class="headerlink" title="9.2.3 固定长度的List"></a>9.2.3 固定长度的List</h4><p>操作数组的工具类：Arrays，供了asList(Object… a)方法，该方法可以把一个数组或指定个数的对象转换成一个List集合，这个List集合既不是ArrayList实现类的实例，也不是Vector实现类的实例，而是Arrays的内部类ArrayList的实例。</p><font color="red">Arrays.ArrayList是一个固定长度的List集合，程序只能遍历访问该集合里的元素，不可增加、删除该集合里的元素。</font><p><strong>如下程序所示:</strong></p><pre><code>public class FixedSizeList{    public static void main(String[] args)    {          List fixedList=Arrays.asList(&quot;Java&quot;                , &quot;PHP&quot;);          //获取fixedList的实现类，将输出Arrays$ArrayList          System.out.println(fixedList.getClass());          //遍历fixedList的集合元素          for (int i=0; i &lt; fixedList.size() ; i++)          {              System.out.println(fixedList.get(i));          }          //试图增加、删除元素都会引发UnsupportedOperationException异常          fixedList.add(&quot;Go&quot;); // &lt;1&gt;          fixedList.remove(&quot;Python&quot;); // &lt;2&gt;    }}/*输出:JavaPHPException in thread &quot;main&quot; java.lang.UnsupportedOperationException...*/</code></pre><blockquote><p>上面程序中<1> <2>两行代码对于普通的List集合完全正常，但如果试图通过这两个方法来增加、删除Arrays$ArrayList集合里的元素，将会引发异常。所以上面程序在编译时完全正常，但会在运行第一行粗体字标识的代码行处引发UnsupportedOperationException异常。</2></1></p></blockquote><h2 id="10-Queue集合"><a href="#10-Queue集合" class="headerlink" title="10.Queue集合"></a>10.Queue集合</h2><p>Queue用于模拟队列这种数据结构，队列通常是指“先进先出”（FIFO）的容器。队列的头部保存在队列中存放时间最长的元素，队列的尾部保存在队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素。通常，队列不允许随机访问队列中的元素。</p><h3 id="10-1-Queue接口方法"><a href="#10-1-Queue接口方法" class="headerlink" title="10.1 Queue接口方法"></a>10.1 Queue接口方法</h3><ul><li><p>void add(Object e)：将指定元素加入此队列的尾部。</p></li><li><p>Object element()：获取队列头部的元素，但是不删除该元素。</p></li><li>boolean offer(Object e)：将指定元素加入此队列的尾部。当使用有容量限制的队列时，此方法通常比add(Object e)方法更好。</li><li>Object peek()：获取队列头部的元素，但是不删除该元素。如果此队列为空，则返回null。</li><li>Object poll()：获取队列头部的元素，并删除该元素。如果此队列为空，则返回null。</li><li>Object remove()：获取队列头部的元素，并删除该元素。</li></ul><p>Queue接口有一个PriorityQueue实现类。除此之外，Queue还有一个Deque接口，Deque代表一个“双端队列”，双端队列可以同时从两端来添加、删除元素，因此Deque的实现类既可当成队列使用，也可当成栈使用。Java为Deque提供了ArrayDeque和LinkedList两个实现类。</p><h3 id="10-2-PriorityQueue实现类"><a href="#10-2-PriorityQueue实现类" class="headerlink" title="10.2 PriorityQueue实现类"></a>10.2 PriorityQueue实现类</h3><h4 id="10-2-1-特点"><a href="#10-2-1-特点" class="headerlink" title="10.2.1 特点:"></a>10.2.1 特点:</h4><ul><li>存元素顺序:PriorityQueue保存队列元素的顺序并不是按加入队列的顺序，而是按队列元素的大小进行重新排序</li><li>取元素顺序:当调用peek()方法或者poll()方法取出队列中的元素时，并不是取出最先进入队列的元素，而是取出队列中最小的元素。</li><li>PriorityQueue不允许插入null元素</li></ul><blockquote><p>PriorityQueue不遵守队列的最基本规则:先进先出（FIFO）</p></blockquote><h4 id="10-2-2-元素排序方式"><a href="#10-2-2-元素排序方式" class="headerlink" title="10.2.2 元素排序方式"></a>10.2.2 元素排序方式</h4><ul><li>自然排序：采用自然顺序的PriorityQueue集合中的元素必须实现了Comparable接口，而且应该是同一个类的多个实例，否则可能导致ClassCastException异常。</li><li>定制排序：创建PriorityQueue队列时，传入一个Comparator对象，该对象负责对队列中的所有元素进行排序。采用定制排序时不要求队列元素实现Comparable接口。</li></ul><blockquote><p>PriorityQueue队列对元素的要求与TreeSet对元素的要求基本一致，因此关于使用自然排序和定制排序和TreeSet一样。</p></blockquote><h3 id="10-3-Deque接口与ArrayDeque实现类"><a href="#10-3-Deque接口与ArrayDeque实现类" class="headerlink" title="10.3 Deque接口与ArrayDeque实现类"></a>10.3 Deque接口与ArrayDeque实现类</h3><p>Deque接口是Queue接口的子接口，它代表一个双端队列，Deque接口里定义了一些双端队列的方法，这些方法允许从两端来操作队列的元素。</p><ul><li>void addFirst(Object e):将指定元素插入该双端队列的开头。</li><li>void addLast(Object e):将指定元素插入该双端队列的末尾。</li><li>Iterator descendingIterator():返回该双端队列对应的迭代器，该迭代器将以逆向顺序来迭代队列中的元素。</li><li>Object getFirst():获取但不删除双端队列的第一个元素。</li><li>Object getLast():获取但不删除双端队列的最后一个元素。</li><li>boolean offerFirst(Object e):将指定元素插入该双端队列的开头。</li><li>boolean offerLast(Object e):将指定元素插入该双端队列的末尾。</li><li>Object peekFirst():获取但不删除该双端队列的第一个元素；如果此双端队列为空，则返回null。</li><li>Object peekLast():获取但不删除该双端队列的最后一个元素；如果此双端队列为空，则返回null。</li><li>Object pollFirst():获取并删除该双端队列的第一个元素；如果此双端队列为空，则返回null。</li><li>Object pollLast():获取并删除该双端队列的最后一个元素；如果此双端队列为空，则返回null。</li><li>Object pop()（栈方法）:pop出该双端队列所表示的栈的栈顶元素。相当于removeFirst()。</li><li>void push(Object e)（栈方法）:将一个元素push进该双端队列所表示的栈的栈顶。相当于addFirst(e)。</li><li>Object removeFirst():获取并删除该双端队列的第一个元素。</li><li>Object removeFirstOccurrence(Object o):删除该双端队列的第一次出现的元素o。</li><li><p>removeLast():获取并删除该双端队列的最后一个元素。</p></li><li><p>removeLastOccurrence(Object o):删除该双端队列的最后一次出现的元素o。</p></li></ul><blockquote><p>Deque不仅可以当成双端队列使用，而且可以被当成栈来使用，因为该类里还包含了pop（出栈）、push（入栈）两个方法。</p></blockquote><p>Deque接口提供了一个典型的实现类：ArrayDeque，它是一个基于数组实现的双端队列，创建Deque时可指定一个numElements参数，该参数用于指定Object[]数组的长度；如果不指定numElements参数，Deque底层数组的长度为16。</p><p><strong><font color="green">@提示:</font></strong></p><blockquote><p>ArrayList和ArrayDeque两个集合类的实现机制基本相似，它们的底层都采用一个动态的、可重分配的Object[]数组来存储集合元素，当集合元素超出了该数组的容量时，系统会在底层重新分配一个Object[]数组来存储集合元素。</p></blockquote><h3 id="10-4-LinkedList实现类"><a href="#10-4-LinkedList实现类" class="headerlink" title="10.4  LinkedList实现类"></a>10.4  LinkedList实现类</h3><p>LinkedList类是List接口的实现类——这意味着它是一个List集合，可以根据索引来随机访问集合中的元素。除此之外，LinkedList还实现了Deque接口，因此它可以被当成双端队列来使用，自然也可以被当成“栈”来使用了。</p><h4 id="10-4-1-LinkedList与ArrayList、ArrayDeque的实现机制区别"><a href="#10-4-1-LinkedList与ArrayList、ArrayDeque的实现机制区别" class="headerlink" title="10.4.1 LinkedList与ArrayList、ArrayDeque的实现机制区别"></a>10.4.1 LinkedList与ArrayList、ArrayDeque的实现机制区别</h4><ul><li>ArrayList、ArrayDeque内部以数组的形式来保存集合中的元素，因此随机访问集合元素时有较好的性能；</li><li>LinkedList内部以链表的形式来保存集合中的元素，因此随机访问集合元素时性能较差，但在插入、删除元素时性能非常出色（只需改变指针所指的地址即可）。</li></ul><h2 id="11-各种线性表性能分析"><a href="#11-各种线性表性能分析" class="headerlink" title="11. 各种线性表性能分析"></a>11. 各种线性表性能分析</h2><p>Java提供的List就是一个线性表接口，而ArrayList、LinkedList又是线性表的两种典型实现：基于数组的线性表和基于链的线性表。Queue代表了队列，Deque代表了双端队列（既可作为队列使用，也可作为栈使用），接下来对各种实现类的性能进行分析。</p><p>LinkedList集合不仅提供了List的功能，还提供了双端队列、栈的功能。关于性能方面可看下图：<br><img src="https://mrliuqh.github.io/directionsImg/java/collentions-comparison.jpg" alt=""></p><ul><li>以数组作为底层实现的集合在随机访问时性能较好；</li><li>以链表作为底层实现的集合在执行插入、删除操作时有很好的性能；</li><li>进行迭代操作时，以链表作为底层实现的集合比以数组作为底层实现的集合性能好。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-泛型</title>
      <link href="/2019/10/17/java-6-%E6%B3%9B%E5%9E%8B/"/>
      <url>/2019/10/17/java-6-%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-为什么使用泛型程序设计？"><a href="#1-为什么使用泛型程序设计？" class="headerlink" title="1. 为什么使用泛型程序设计？"></a>1. 为什么使用泛型程序设计？</h2><p>使用泛型机制编写的程序代码要比那些杂乱地使用Object变量，然后再进行强制类型转换的代码具有更好的安全性和可读性。 泛型对于集合类尤其有用。</p><blockquote><p>泛型程序设计(Generic programming) 意味着编写的代码可以被很多不同类型的对象所 重用。 </p></blockquote><h2 id="2-泛型定义"><a href="#2-泛型定义" class="headerlink" title="2. 泛型定义"></a>2. 泛型定义</h2><p>声明类的泛型版本与声明类的一般版本的语法格式很类似，只有稍微的不同。</p><p><strong>声明一般类的语法格式为：</strong></p><pre><code>[修饰符] class类名 [extends父类名] [implements接口1名,接口2名,…]{        //类体}</code></pre><p><strong>而声明泛型类型时，只需要在类名后面跟上一个类型参数即可，其语法格式为：</strong></p><ul><li>单类型参数泛型类型声明</li></ul><pre><code>[修饰符] class类名&lt;类型参数&gt; [extends父类名] [implements接口1名,接口2名,。。。]{       //类体}</code></pre><ul><li>多类型参数泛型类型声明</li></ul><pre><code>[修饰符] class类名&lt;类型参数1,类型参数2,类型参数3&gt; [extends父类名] [implements接口1名,接口2名,。。。]{       //类体}</code></pre><blockquote><font color="red">每个类型参数必须唯一。</font></blockquote><p><strong>代码示例:</strong></p><ul><li>box类</li></ul><pre><code>public class Box {    private Object object;    public void add(Object object){        this.object = object;    }    public Object get(){        return object;    }}</code></pre><ul><li>box 泛型类</li></ul><pre><code>// Box类的泛型版本.public class Box&lt;T&gt; {    private T t;        // T代表&quot;类型&quot;    public void add(T t) {      this.t = t;    }    public T get() {      return t;  }}</code></pre><ul><li>T:”代表类型变量”</li></ul><h2 id="3-泛型使用"><a href="#3-泛型使用" class="headerlink" title="3. 泛型使用"></a>3. 泛型使用</h2><p>一个泛型类型调用通常被看做是“参数化类型”。要实例化这个类，照常使用new关键字，但是将<code>&lt;Integer&gt;</code>放在类名和圆括号之间：</p><pre><code>Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;();integerBox.add(new Integer(10));// 不需要类型转换Integer someInteger = integerBox.get();System.out.println(someInteger)</code></pre><h2 id="4-泛型方法"><a href="#4-泛型方法" class="headerlink" title="4.泛型方法"></a>4.泛型方法</h2><h3 id="4-1-定义泛型方法"><a href="#4-1-定义泛型方法" class="headerlink" title="4.1 定义泛型方法"></a>4.1 定义泛型方法</h3><p>类型参数还可以在方法和构造器签名中声明，用来创建“泛型方法”和“泛型构造器”。这与声明一个泛型类型相似，但是类型参数的作用域被限制在它被声明的方法或构造器中。</p><p><strong>声明格式:</strong></p><pre><code>[修饰符] &lt;类型变量&gt; [返回类型] 方法名(参数列表){    // 方法体}</code></pre><p><strong>代码示例:</strong></p><pre><code>class ArrayAlg{    public static &lt;T&gt; T getMiddle(T... a){      return a[a.length / 2];  }}</code></pre><p>这个方法是在普通类中定义的， 而不是在泛型类中定义的。 然而， 这是一个泛型方法， 可以从尖括号和类型变量看出这一点。<font color="red">注意:类型变量放在修饰符(这里是 public static) 的后面，返回类型的前面。</font></p><h3 id="4-2-调用泛型方法"><a href="#4-2-调用泛型方法" class="headerlink" title="4.2 调用泛型方法"></a>4.2 调用泛型方法</h3><p>当调用一个泛型方法时’ 在方法名前的尖括号中放入具体的类型</p><p><strong>调用ArrayAlg类中的泛型方法:</strong></p><pre><code>String middle = ArrayAlg.&lt;String&gt;getMiddle(&quot;]ohnM, &quot;Q.n, &quot;Public&quot;);</code></pre><p>在大多数情况下,方法调用中可以省略<string>类型参数。编译器有足够的信息能够推断出所调用的方法。它用 names 的类型(即 String[]) 与泛型类型 T[ ] 进行匹配并推断出 T 一定是 String。也就是说上述代码也可以修改为:</string></p><pre><code>String middle = ArrayAlg.getHiddle(&quot;]ohn&quot;, &quot;Q.&quot;, &quot;Public&quot;);</code></pre><h2 id="5-类型变量"><a href="#5-类型变量" class="headerlink" title="5.类型变量"></a>5.类型变量</h2><h3 id="5-1-类型参数命名惯例"><a href="#5-1-类型参数命名惯例" class="headerlink" title="5.1 类型参数命名惯例"></a>5.1 类型参数命名惯例</h3><p>按惯例，类型参数命名为单个的大写字母。这与已经知道的变量命名规则不太相同。这样命名的原因是：如果不这样命名，将很难区分在一个类型变量和一个变通类或接口名称之间的不同。最普遍使用的类型参数名称如下：</p><ul><li>E——元素（被Java集合框架所广泛地使用）。</li><li>K——键。</li><li>N——数字。</li><li>T——类型。</li><li>V——值。</li><li>S，U，V等——第二、第三、第四个类型。</li></ul><h3 id="5-2-类型变量的限定"><a href="#5-2-类型变量的限定" class="headerlink" title="5.2 类型变量的限定"></a>5.2 类型变量的限定</h3><h4 id="5-2-1-类型参数边界"><a href="#5-2-1-类型参数边界" class="headerlink" title="5.2.1 类型参数边界"></a>5.2.1 类型参数边界</h4><p>默认可以使用任何类型来实例化一个泛型类对象，但Java中也对泛型类实例的类型作了限制。</p><p><strong>语法如下:</strong></p><pre><code> &lt;T exteds anyClass&gt;</code></pre><ol><li>anyClass指某个接口或类</li><li>anyClass指的是上限</li><li>限定上限的类型中，最多只能有1个类(或0个类)，其余的必须均为接口。</li><li>限定上限的类型中，接口可以有多个，中间用&amp;字符分割。</li></ol><blockquote><p>使用泛型限制后，泛型类的类型必须实现或者继承了anyClass 这个接口或类。无论anyClass是接口还是类，在进行泛型限制时都必须使用extends关键字。</p></blockquote><ul><li>泛型类限制使用</li></ul><pre><code>import java.util.List;public class LimitClass&lt;T extends List&gt;{    // ....}</code></pre><ul><li>泛型方法限制使用</li></ul><pre><code>import java.util.List;public class LimitClass{    public static &lt;T extends List&gt; void testMedthod(T t){        // ....    }}</code></pre><p>对类型参数的限定，也可以包括指定额外的必须被实现的接口，使用&amp;字符，例如指定类型变量U可接收的值为实现了MyInterface接口的Number类或其之类。<br><strong>语法如下:</strong></p><pre><code>// 上限类型中有一个接口&lt;U extends Number &amp; MyInterface&gt;// 上限类型中有n个接口&lt;U extends Number &amp; MyInterface1 &amp; MyInterface2 &amp; ... &amp;MyInterface...&gt;</code></pre><h4 id="5-2-2-使用通配符"><a href="#5-2-2-使用通配符" class="headerlink" title="5.2.2 使用通配符: ?"></a>5.2.2 使用通配符: ?</h4><p>固定的泛型类型使用起来不灵活，java提供一种巧妙的方案:通配符类型。</p><p><strong>定义格式</strong></p><pre><code>//不设置上限:表示任何类型AnyGeneric&lt;?&gt;AnyGeneric&lt;?,？&gt;// 设置上限AnyGeneric&lt;? extends MyClass&gt;</code></pre><font color="blue"> 表示任何泛型AnyGeneric类型，它的类型参数是MyClass的子类</font><p><strong>代码1:</strong></p><pre><code>public class Demo {    public static void main(String[] args){        Point&lt;Integer, Integer&gt; p1 = new Point&lt;Integer, Integer&gt;();        p1.setX(10);        p1.setY(20);        printPoint(p1);        Point&lt;String, String&gt; p2 = new Point&lt;String, String&gt;();        p2.setX(&quot;东经180度&quot;);        p2.setY(&quot;北纬210度&quot;);        printPoint(p2);    }    // 使用通配符    public static void printPoint(Point&lt;?, ?&gt; p){          System.out.println(&quot;This point is: &quot; + p.getX() + &quot;, &quot; + p.getY());    }}class Point&lt;T1, T2&gt;{    T1 x;    T2 y;    public T1 getX() {        return x;    }    public void setX(T1 x) {        this.x = x;    }    public T2 getY() {        return y;    }    public void setY(T2 y) {        this.y = y;    }}/*运行结果：This point is: 10, 20This point is: 东经180度, 北纬210度*/</code></pre><p><strong>代码2:</strong></p><pre><code>public class Demo {    public static void main(String[] args){        Point&lt;Integer, Integer&gt; p1 = new Point&lt;Integer, Integer&gt;();        p1.setX(10);        p1.setY(20);        printNumPoint(p1);        Point&lt;String, String&gt; p2 = new Point&lt;String, String&gt;();        p2.setX(&quot;东经180度&quot;);        p2.setY(&quot;北纬210度&quot;);        printStrPoint(p2);    }    // 借助通配符限制泛型的范围    public static void printNumPoint(Point&lt;? extends Number, ? extends Number&gt; p){        System.out.println(&quot;x: &quot; + p.getX() + &quot;, y: &quot; + p.getY());    }    public static void printStrPoint(Point&lt;? extends String, ? extends String&gt; p){        System.out.println(&quot;GPS: &quot; + p.getX() + &quot;，&quot; + p.getY());    }}class Point&lt;T1, T2&gt;{    T1 x;    T2 y;    public T1 getX() {        return x;    }    public void setX(T1 x) {        this.x = x;    }    public T2 getY() {        return y;    }    public void setY(T2 y) {        this.y = y;    }}/*运行结果：x: 10, y: 20GPS: 东经180度，北纬210度*/</code></pre><h2 id="6-类型擦除"><a href="#6-类型擦除" class="headerlink" title="6.类型擦除"></a>6.类型擦除</h2><p>当一个泛型被实例化时，编译器通过称为“类型擦除”的技术来编译这些类型。<font color="green">所谓类型擦除，指的是编译器移除一个类或方法中所有与类型参数相关的信息。</font>类型擦除能够使使用泛型的Java应用程序与Java类库和在泛型出现之前创建的应用程序保持二进制上的兼容性。</p><p>例如:将泛型类Pair<t> 进行类型擦除<br><strong>擦除前:</strong></t></p><pre><code>public class Pair&lt;T&gt; {    private T first;    private T last;    public Pair(T first, T last) {        this.first = first;        this.last = last;    }    public T getFirst() {        return first;    }    public T getLast() {        return last;    }}</code></pre><p><strong>擦除后:</strong></p><pre><code>public class Pair {    private Object first;    private Object last;    public Pair(Object first, Object last) {        this.first = first;        this.last = last;    }    public Object getFirst() {        return first;    }    public Object getLast() {        return last;    }}</code></pre><p>因此，Java使用擦拭法实现泛型，导致了：</p><ul><li>编译器把类型<t>视为Object；</t></li><li>编译器根据<t>实现安全的强制转型。</t></li></ul><h2 id="7-泛型的局限"><a href="#7-泛型的局限" class="headerlink" title="7.泛型的局限"></a>7.泛型的局限</h2><p>Java的泛型是由编译器在编译时实行的，编译器内部永远把所有类型T视为Object处理，但是，在需要转型的时候，编译器会根据T的类型自动为我们实行安全地强制转型。了解了Java泛型的实现方式——擦拭法，我们就知道了Java泛型的局限：</p><h3 id="7-1-不能用类型参数代替基本类型"><a href="#7-1-不能用类型参数代替基本类型" class="headerlink" title="7.1 不能用类型参数代替基本类型"></a>7.1 不能用类型参数代替基本类型</h3><p>不能用类型参数代替基本类型，因此没有 Pair<int>、Pair<double>…</double></int></p><pre><code>Pair&lt;int&gt; p = new Pair&lt;int&gt;(1, 2); // compile error!</code></pre><h3 id="7-2-无法判断带泛型的Class"><a href="#7-2-无法判断带泛型的Class" class="headerlink" title="7.2 无法判断带泛型的Class"></a>7.2 无法判断带泛型的Class</h3><pre><code>Pair&lt;Integer&gt; p = new Pair&lt;&gt;(123, 456);// Compile error:if (p instanceof Pair&lt;String&gt;.class) {}</code></pre><font color="purple">原因和前面一样，并不存在Pair<string>.class，而是只有唯一的Pair.class。</string></font><h3 id="7-3-无法实例化T类型"><a href="#7-3-无法实例化T类型" class="headerlink" title="7.3 无法实例化T类型"></a>7.3 无法实例化T类型</h3><pre><code>public class Pair&lt;T&gt; {    private T first;    private T last;    public Pair() {        // Compile error:        first = new T();        last = new T();    }}</code></pre><p>上述代码无法通过编译，因为构造方法的两行语句：</p><pre><code>first = new T();last = new T();//擦拭后实际上变成了：first = new Object();last = new Object();</code></pre><h3 id="7-4-无法创建参数化类型的数组"><a href="#7-4-无法创建参数化类型的数组" class="headerlink" title="7.4 无法创建参数化类型的数组"></a>7.4 无法创建参数化类型的数组</h3><pre><code>Pair&lt;String&gt;[] table = new Pair&lt;String&gt;[10]; //error </code></pre><p>需要说明的是，只是不允许创建这些数组，而声明类型为Pair<string>[]的变量仍是合法的，不过不能用new Pair<string>[10]初始化这个变量。</string></string></p><h3 id="7-5-总结"><a href="#7-5-总结" class="headerlink" title="7.5 总结"></a>7.5 总结</h3><p>Java的泛型是采用擦拭法实现的；擦拭法决定了泛型<code>&lt;T&gt;</code>：</p><ul><li>不能是基本类型，例如：int；</li><li>不能获取带泛型类型的Class，例如：Pair<string>.class；</string></li><li>不能判断带泛型类型的类型，例如：x instanceof Pair<string>；</string></li><li>不能实例化T类型，例如：new T()。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-枚举</title>
      <link href="/2019/10/15/java-4-%E6%9E%9A%E4%B8%BE/"/>
      <url>/2019/10/15/java-4-%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-枚举类型"><a href="#1-枚举类型" class="headerlink" title="1.枚举类型"></a>1.枚举类型</h1><p>在java语言中，使用关键字enum定义一个枚举类型</p><p><strong>注意事项</strong></p><ul><li>所有的枚举都隐含地继承自 java.lang.Enum,因为Java不支持多重继承，所以枚举类型不能再继承其他类</li><li>枚举类型的构造器必须为包级私有或私有的</li><li>枚举之间是逗号，与其他语法的间隔是分号。</li></ul><h2 id="1-1-无参构造器的枚举"><a href="#1-1-无参构造器的枚举" class="headerlink" title="1.1 无参构造器的枚举"></a>1.1 无参构造器的枚举</h2><p><strong>声明</strong></p><pre><code>public enum 类名 {   ...}</code></pre><p><strong>实例</strong></p><pre><code>public enum EnumStudy {    A, B, C, D;    // ....}</code></pre><h2 id="1-2-有参构造器的枚举"><a href="#1-2-有参构造器的枚举" class="headerlink" title="1.2 有参构造器的枚举"></a>1.2 有参构造器的枚举</h2><p><strong>声明</strong></p><pre><code>public enum 类名 {   ...}</code></pre><p><strong>实例</strong></p><pre><code>public enum EnumStudy {    A(&quot;优秀&quot;,&quot;90分以上&quot;),    B(&quot;优良&quot;,&quot;80~90分&quot;),    C(&quot;良&quot;,&quot;70~80分&quot;),    D(&quot;及格&quot;,&quot;60 ~70分&quot;),    E(&quot;不及格&quot;,&quot;60分以下&quot;);    //自定义成员变量    public String value;    //自定义成员变量    public String desc;    EnumStudy(String value, String desc){        this.value = value;        this.desc = desc;    }}</code></pre><h2 id="1-3-枚举遍历"><a href="#1-3-枚举遍历" class="headerlink" title="1.3 枚举遍历"></a>1.3 枚举遍历</h2><h3 id="1-3-1-无参构造器遍历"><a href="#1-3-1-无参构造器遍历" class="headerlink" title="1.3.1 无参构造器遍历"></a>1.3.1 无参构造器遍历</h3><pre><code>// 无参构造器枚举遍历for (EnumStudy item:EnumStudy.values()){    System.out.println(item);}/**输出:ABCD*/</code></pre><h3 id="1-3-2-有参构造器遍历"><a href="#1-3-2-有参构造器遍历" class="headerlink" title="1.3.2 有参构造器遍历"></a>1.3.2 有参构造器遍历</h3><pre><code>// 有参构造器枚举遍历for (EnumStudy item:EnumStudy.values()){    System.out.println(&quot;获得:&quot;+item.value + &quot;, 分值:&quot;+item.desc);}/**输出:    获得:优秀, 分值:90分以上    获得:优良, 分值:80~90分    获得:良, 分值:70~80分    获得:及格, 分值:60 ~70分    获得:不及格, 分值:60分以下*/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-类</title>
      <link href="/2019/10/15/java-3-%E7%B1%BB/"/>
      <url>/2019/10/15/java-3-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-类"><a href="#1-类" class="headerlink" title="1. 类"></a>1. 类</h1><p><strong>类的定义</strong></p><pre><code>[修饰符] class 类名 {    // 零或多个构造器定义...    // 零或多个Field...    // 零或多个方法...}</code></pre><ul><li>修饰符: 如public，private及许多其他修饰符</li><li>类名，并且按惯例首字母要大写。</li><li>父类（超类）的名称，都要在前面加上关键字extends。一个类只能继承自一个父类。</li><li>被该类实现的接口列表（用逗号进行分隔），在接口前面加上关键字implements。一个类可以实现多个接口。</li><li>类体，用花括号{}包围。</li></ul><h2 id="1-1-定义MyClass类"><a href="#1-1-定义MyClass类" class="headerlink" title="1.1 定义MyClass类"></a>1.1 定义MyClass类</h2><pre><code>public class MyClass {    /**    * @Description: 静态常量    */    public final static Double PI = 3.1415;    /**     * @Description: 名称（成员变量）     */    private String name;    /**     * @Description: 设置名称（成员方法）     */    public void setName(String name) {        this.name = name;    }    /**     * @description: 获取名称（成员方法）     **/    public String getName() {        return this.name;    }    /**     * @Description: 无参构造方法     */    public MyClass() {        System.out.println(&quot;无参构造方法....&quot;);    }    public static void staticMethod(){        System.out.println(&quot;这是个静态方法&quot;);    }    /**     * @description:有参构造方法     **/    public MyClass(String name) {        this.name = name;        System.out.println(&quot;有参构造方法....&quot;);    }}</code></pre><h2 id="1-2-调用MyClass类"><a href="#1-2-调用MyClass类" class="headerlink" title="1.2 调用MyClass类"></a>1.2 调用MyClass类</h2><h3 id="1-2-1-实例化调用"><a href="#1-2-1-实例化调用" class="headerlink" title="1.2.1 实例化调用"></a>1.2.1 实例化调用</h3><pre><code>MyClass classTest = new MyClass();classTest.setName(&quot;小明&quot;);String name = classTest.getName();System.out.println(name);/*输出:无参构造方法....小明*/</code></pre><h3 id="1-2-2-静态调用"><a href="#1-2-2-静态调用" class="headerlink" title="1.2.2 静态调用"></a>1.2.2 静态调用</h3><pre><code>//调用静态成员System.out.println(MyClass.PI);//调用静态方法MyClass.staticMethod();/*输出:无参构造方法....小明*/</code></pre><blockquote><font color="006400">虽然静态成员也可以使用”对象.静态成员”的形式进行调用，但通常不建议用这样的形式，因为这样容易混淆静态成员和非静态成员。</font></blockquote><ul><li>测试有参构造方法</li></ul><pre><code>MyClass classTest2 = new MyClass(&quot;张三&quot;);System.out.println(classTest2.getName());/*输出:有参构造方法....张三*/</code></pre><h2 id="1-3-类方法分析"><a href="#1-3-类方法分析" class="headerlink" title="1.3 类方法分析"></a>1.3 类方法分析</h2><pre><code>[修饰符] 返回类型 方法名称(方法参数列表){    // 方法体} </code></pre><ul><li>返回类型: 方法所返回的数据值的数据类型，若方法不返回值，用void</li></ul><h3 id="1-3-1-方法重载"><a href="#1-3-1-方法重载" class="headerlink" title="1.3.1 方法重载"></a>1.3.1 方法重载</h3><p>Java语言支持“重载”方法，并且Java能够根据不同的“方法签名”来区分重载的方法。这意味着在一个类中，可以有相同名称但具有不同参数列表的方法（当然会有一些限定条件，这将在“接口和继承”中讨论）。</p><p><strong>代码示例</strong></p><pre><code>public class DrawDate{    //声明绘制字符串的方法    public void draw(String s){                  // ...    }    //声明绘制整数的方法    public void draw(int i){        // ...    }     //声明绘制双精度小数的方法    public void draw(double f){        // ...    }    //声明绘制一个整数和一个小数的方法    public void draw(int i , double f){           // ...    }}</code></pre><h3 id="1-3-2-传递任意数量的参数"><a href="#1-3-2-传递任意数量的参数" class="headerlink" title="1.3.2 传递任意数量的参数"></a>1.3.2 传递任意数量的参数</h3><p>可以使用“可变参数”来传递任意数量的值到一个方法。当程序员不知道有多少个特定类型的参数要被传递给方法时，使用可变参数。可变参数是手工创建一个数组的简洁方法。<br>要使用可变参数，在最后一个参数的类型后面跟上省略号“…”，然后是一个空格，再接着是参数名。具有这种可变参数的方法可以接收任意数量的该类型的参数，包括空参数。例如下面代码：</p><pre><code>public Polygon polygonFrom(Point... corners) {    //corners参数被当作数组处理，可以调用数组属性length获得长度    int numberOfSides = corners.length;    //声明两个变量    double squareOfSide1, lengthOfSide1;    squareOfSide1 = (corners[1].x - corners[0].x)*(corners[1].x - corners[0].x) + (corners[1].y - corners[0].y)*(corners[1].y - corners[0].y) ;    lengthOfSide1 = Math.sqrt(squareOfSide1); //调用Math类的静态方法求平方根    …}</code></pre><blockquote><p>可以看出来，在上面这个方法中，corners被当做数组使用。调用这个方法时，既可以使用一个数组，也可以使用一系列的参数。不管使用哪种形式，方法中的代码都会将参数作为一个数组对待。</p></blockquote><h2 id="1-4-构造器"><a href="#1-4-构造器" class="headerlink" title="1.4 构造器"></a>1.4 构造器</h2><p><strong>语法</strong></p><pre><code>public 类名称(方法参数列表){    // 方法体} </code></pre><ul><li>构造器与类同名 </li><li>每个类可以有一个以上的构造器 </li><li>构造器可以有 0 个、1 个或多个参数 </li><li>构造器没有返回值 </li><li>构造器总是伴随着 new 操作一起调用</li></ul><h3 id="1-4-1-无参构造器"><a href="#1-4-1-无参构造器" class="headerlink" title="1.4.1 无参构造器"></a>1.4.1 无参构造器</h3><pre><code>    /**    * @description:无参构造器     **/    public MyClass() {        System.out.println(&quot;无参构造器....&quot;);    }</code></pre><h3 id="1-4-2-有参构造器"><a href="#1-4-2-有参构造器" class="headerlink" title="1.4.2 有参构造器"></a>1.4.2 有参构造器</h3><pre><code>    /**     * @description:有参构造器     **/    public MyClass(String name) {        this.name = name;        System.out.println(&quot;有参构造器....&quot;);    }</code></pre><h1 id="2-Object类"><a href="#2-Object类" class="headerlink" title="2. Object类"></a>2. Object类</h1><p>Object类是Java一个比较特殊的类，Java中所有的类从根本上都继承自Object类。Object是Java中唯一没有父类的类。</p><blockquote><p>如果一个类没有使用extends关键字明确标识继承另外一个类，那么这个类就默认继承Object类</p></blockquote><h2 id="Object类中常用的方法"><a href="#Object类中常用的方法" class="headerlink" title="Object类中常用的方法"></a>Object类中常用的方法</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/object-fun1.jpg" alt=""><br><img src="https://mrliuqh.github.io/directionsImg/java/object-fun2.jpg" alt=""></p><h1 id="3-内部类"><a href="#3-内部类" class="headerlink" title="3. 内部类"></a>3. 内部类</h1><p>所谓的内部类就是指在一个类的内部又定义了其他类的情况。如果在类Outer的内部再定义一个类Inner，此时类Inner就称为内部类，而类Outer则称为外部类。内部类可声明为public或private。当内部类声明为public或private时，对其访问的限制与成员变量和成员方法完全相同。</p><h2 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h2><pre><code class="java">权限标示符 class 外部类名称{    ...    权限标示符 class 内部类名称 {        ...    }}</code></pre><p><strong>示例:</strong></p><pre><code>// 外部类public class Outer{    // 外部类属性    int score=95;    // 外部类方法，调用内部类方法    void inst(){        Inner in=new Inner();        in.display();    }    // 内部类    public class Inner{        //在内部类中声明name属性        String name=&quot;张三&quot;;        // 内部类方法        void display(){            //内部类访问外部类中的属性            System.out.println(&quot;成绩:score=&quot;+score);        }    }}// 测试使用public class ObjectInnerDemo{    public static void main(String[]args){        Outer outer=new Outer();        outer.inst(); //输出:成绩:score=95    }}</code></pre><h2 id="3-2-内部类主要作用"><a href="#3-2-内部类主要作用" class="headerlink" title="3.2 内部类主要作用"></a>3.2 内部类主要作用</h2><ul><li><p>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类。</p></li><li><p>内部类成员可以直接访问外部类的私有数据，因为内部类被当成其外部类成员，同一个类的成员之间可以相互访问。<font color="red">但外部类不能访问内部类的实现细节，例如内部类的成员变量</font>。</p></li><li>匿名内部类适合用于创建那些仅需要一次的类</li></ul><h2 id="3-3-使用static定义的内部类就是外部类"><a href="#3-3-使用static定义的内部类就是外部类" class="headerlink" title="3.3 使用static定义的内部类就是外部类"></a>3.3 使用static定义的内部类就是外部类</h2><p>如果使用static来修饰一个内部类，则这个内部类就属于外部类本身，而不属于外部类的某个对象。因此使用static修饰的内部类被称为类内部类，有的地方也称为静态内部类。</p><blockquote><p><font color="green">static关键字的作用是把类的成员变成类相关，而不是实例相关，即static修饰的成员属于整个类，而不属于单个对象。</font></p></blockquote><p>静态内部类可以包含静态成员，也可以包含非静态成员。根据静态成员不能访问非静态成员的规则，静态内部类不能访问外部类的实例成员，只能访问外部类的类成员。即使是静态内部类的实例方法也不能访问外部类的实例成员，只能访问外部类的静态成员。</p><p>静态内部类是外部类的一个静态成员，因此外部类的静态方法、静态初始化也可以使用静态内部类来定义变量、创建对象等。</p><font>外部类依然不能直接访问静态内部类的成员，但可以使用静态内部类的类名作为调用者来访问静态内部类的类成员，也可以使用静态内部类对象作为调用者来访问静态内部类的实例成员。</font><p><strong>使用示例:</strong></p><pre><code>class StaticInnerClassTest {    // 外部类实例成员    private int propl=5;    // 外部类静态成员    private static int prop2=9;    void display() {         StaticInnerClass in=new StaticInnerClass();        in.display();    }    // 静态内部类    static class StaticInnerClass {        //内部类里的静态成员        private static int age;        public void display() {            //下面代码出现错误-静态内部类无法访问外部类的实例成员            // System.out.println(propl);            //下面代码正常            System.out.println(prop2);        }    }}public class ObjectStaticDemo {    public static void main(String[]args) {        StaticInnerClassTest outer=new StaticInnerClassTest();        outer.display(); // 输出:9    }}</code></pre><h2 id="3-4-匿名内部类"><a href="#3-4-匿名内部类" class="headerlink" title="3.4 匿名内部类"></a>3.4 匿名内部类</h2><p>匿名内部类由于没有名字，所以它的创建方式也比较特别。创建格式如下。</p><pre><code>new 父类构造器（参数列表）|实现接口（）{    //匿名内部类的类体部分}</code></pre><blockquote><p>匿名内部类我们必须要继承一个父类或者实现一个接口。同时它没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。</p></blockquote><p><strong>使用示例</strong></p><pre><code class="java">abstract class Bird {    private String name;    public String getName() {        return name;    }    public void setName(String name) {        this.name=name;    }    public abstract int fly();}public class AnonymousInnerClass {    public void test(Bird bird) {        System.out.println(bird.getName()+&quot;最高能飞&quot;+bird.fly()+&quot;米&quot;);    }    public static void main(String[]args) {        // 声明一个名为 animal 的AnonymousInnerClass对象        AnonymousInnerClass animal=new AnonymousInnerClass();        // 调用实例方法,并传入一个匿名对象        animal.test( new Bird() {            public int fly() {                return 1000;            }            public String getName() {                return&quot;小鸟&quot;;            }        }    }}</code></pre><p><strong>代码详解</strong></p><p><code>在AnonymousInnerClass类中，test()方法接受一个Bird类型的参数，同时我们知道一个抽象类是没有办法直接new的，我们必须要先有实现类才能new出来它的实现类实例。所以在main方法中直接使用匿名内部类来创建一个Bird实例。匿名内部类不能是抽象类，所以必须要实现它的抽象父类或者接口里面所有的抽象方法。</code></p><blockquote><p>匿名内部类存在一个缺陷，就是它仅能被使用一次，创建匿名内部类时它会立即创建一个该类的实例，该类的定义会立即消失，所以匿名内部类不能够被重复使用。</p></blockquote><h1 id="4-匿名对象"><a href="#4-匿名对象" class="headerlink" title="4. 匿名对象"></a>4. 匿名对象</h1><p>匿名对象，顾名思义就是没有明确的声明的对象。读者也可以简单地理解为只使用一次的对象，即没有任何一个具体的对象名称引用它</p><p><strong>使用示例:</strong></p><pre><code>class Person{    private String name=&quot;张三&quot;;    private int age=25;    public String talk(){        return&quot;我是：&quot;+name+&quot;，今年：&quot;+age+&quot;岁&quot;;    }}public class AnonymousObject {    public static void main(String[]args) {      // 使用匿名对象      System.out.println(new Person().talk());    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-注解</title>
      <link href="/2019/10/15/java-5-%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/10/15/java-5-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-什么是注解？"><a href="#1-什么是注解？" class="headerlink" title="1.什么是注解？"></a>1.什么是注解？</h1><p>标注（Annotations）就是代码里的标记，它提供与程序有关的数据，但是标注本身不是程序一部分。标注不对其所注解的代码的操作有直接的影响。在有的书中，将标注也称为注解。通过使用标注，程序开发人员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充的信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或进行部署。</p><h1 id="2-注解的作用"><a href="#2-注解的作用" class="headerlink" title="2.注解的作用"></a>2.注解的作用</h1><p>简单地说，标注就是代码里的标记，这些标记在类加载、运行时或编译的时候可以被解释，但是不对程序的运行产生直接的影响。标注有很多作用，包括：</p><ul><li><p>为编译器提供信息。编译器可以使用标注来检测错误或禁止警告。</p></li><li><p>在编译和部署时处理。软件开发工具可以处理标注信息以生成代码、XML文件等。</p></li><li>在运行时处理。有些标注在运行时可以被检查并使用。</li></ul><blockquote><p>从某些方面看，标注就像修饰符一样被使用，<font color="red">并应用于包、类型、构造方法、方法、成员变量、参数、本地变量的声明中。</font>标注可以应用到程序的类的声明、字段的声明、方法的声明及其他程序元素的声明中。按惯例标注要出现在它自己所在行的第一行，并且可以包括带有名称或未命名值的元素，</p></blockquote><h1 id="3-注解的分类"><a href="#3-注解的分类" class="headerlink" title="3.注解的分类"></a>3.注解的分类</h1><p>Java的注解可以分为三类：</p><ul><li>第一类是由编译器使用的注解，</li></ul><p>例如：</p><pre><code>@Override：让编译器检查该方法是否正确地实现了重写；@SuppressWarnings：告诉编译器忽略此处代码产生的警告。@Deprecated: 被此注解标记的类或者方法表示不再推荐使用此类或者方法</code></pre><p><strong>这类注解不会被编译进入.class文件，它们在编译后就被编译器扔掉了。</strong></p><ul><li>第二类是由工具处理.class文件使用的注解</li></ul><p>比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入.class文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p><ul><li>第三类是在程序运行期能够读取的注解，它们在加载后一直存在于JVM中，这也是最常用的注解。</li></ul><h1 id="4-内置注解"><a href="#4-内置注解" class="headerlink" title="4.内置注解"></a>4.内置注解</h1><h2 id="4-1-Override"><a href="#4-1-Override" class="headerlink" title="4.1 @Override"></a>4.1 @Override</h2><p>@Override 是一个标记注解，表示重写父类方法。<br><strong>使用实例:</strong></p><pre><code>// UserDao 接口public interface IUserDao {    User loadUserByUsername(String username);    // ...}// UserDao 实现类public class UserDao implement IUserDao {    @Override    public User loadUserByUsername(String username) {        // TODO:     }    // ...}</code></pre><h2 id="4-2-SuppressWarnnings"><a href="#4-2-SuppressWarnnings" class="headerlink" title="4.2 @SuppressWarnnings"></a>4.2 @SuppressWarnnings</h2><p>@SuppressWarnnings 抑制编译器警告，取值为:</p><ul><li>deprecation ：使用了不赞成使用的类或方法时的警告；</li><li>unchecked ：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型;</li><li>fallthrough ：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;</li><li>path ：在类路径、源文件路径等中有不存在的路径时的警告;</li><li>serial ：当在可序列化的类上缺少 serialVersionUID 定义时的警告;</li><li>finally ：任何 finally 子句不能正常完成时的警告;</li><li>all ：关于以上所有情况的警告。</li></ul><p><strong>实例</strong></p><pre><code>public class UserDao {    @SuppressWarnings(value = {&quot;rawtypes&quot;, &quot;unchecked&quot;})    public List&lt;User&gt; getUserList() {        List&lt;User&gt; list = new ArrayList();        return list;    }    // ...}</code></pre><h2 id="4-3-Deprecated"><a href="#4-3-Deprecated" class="headerlink" title="4.3 @Deprecated"></a>4.3 @Deprecated</h2><p>被此注解标记的类或者方法表示不再推荐使用此类或者方法。 此外对应的 java doc 中有一个 @deprecated tag。</p><p><strong>实例</strong></p><pre><code>public class UserDao {    /**     * 根据用户的登录昵称拉取用户信息     *     * @param username 登录昵称     * @return 用户信息     */    public User loadUserByUsername(String username) {        // ...    }    /**     * 根据用户的真实姓名拉取用户信息     *     * @param realname 真实姓名     * @return 用户信息     * @deprecated 该方法已过期，不推荐使用     */    @Deprecated    public User loadUserByRealname(String realname) {        // ...    }    // ...}</code></pre><h1 id="5-元注解"><a href="#5-元注解" class="headerlink" title="5.元注解"></a>5.元注解</h1><p>元注解的作用就是负责注解其他注解.</p><p><strong>Java5.0定义的元注解：</strong></p><h2 id="5-1-Target"><a href="#5-1-Target" class="headerlink" title="5.1 @Target:"></a>5.1 @Target:</h2><p>指定注解所修饰对象的范围。</p><ul><li>ElementType.CONSTRUCTOR :用于描述构造器</li><li>ElementType.FIELD :用于描述域</li><li>ElementType.LOCAL_VARIABLE :用于描述局部变量</li><li>ElementType.METHOD :用于描述方法</li><li>ElementType.PACKAGE :用于描述包</li><li>ElementType.PARAMETER :用于描述参数</li><li>ElementType.TYPE :用于描述类、接口(包括注解类型) 或enum声明</li></ul><h2 id="5-2-Retention"><a href="#5-2-Retention" class="headerlink" title="5.2 @Retention"></a>5.2 @Retention</h2><p>定义Annotation保留的时间长短。</p><ul><li>RetentionPoicy.SOURCE :在源文件中有效（即源文件保留）</li><li>RetentionPoicy.CLASS :在class文件中有效（即class保留）</li><li>RetentionPoicy.RUNTIME :在运行时有效（即运行时保留），在运行时保留可以通过反射获取到该值的属性值同时相应做一些逻辑处理</li></ul><h2 id="5-3-Documented"><a href="#5-3-Documented" class="headerlink" title="5.3 @Documented"></a>5.3 @Documented</h2><p>标记注解，含有该注解类型的元素(带有注释的)会通过javadoc或类似工具进行文档化。</p><h2 id="5-4-Inherited"><a href="#5-4-Inherited" class="headerlink" title="5.4 @Inherited"></a>5.4 @Inherited</h2><p>表示注解类型能被自动继承。 如果一个类使用了 @Inherited 类型的注解，则此类的子类也将含有该注解，当 Retention 为 RUNTIME 时通过反射API可以查询到此类以及其父类直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p><h1 id="6-自定义注解"><a href="#6-自定义注解" class="headerlink" title="6.自定义注解"></a>6.自定义注解</h1><p>注解类型的定义有点类似接口的定义，使用<font color="red">@interface关键字用来声明一个注解，</font>实际上标注类型是接口的一种。里面的每一个方法表示声明了一个可配置的参数，方法名即为参数名。</p><ul><li>访问修饰符只能使用 public 或者 default（默认的、友好的）</li><li>返回值类型就是参数的类型且只能为 八种基本数据类型 、 Class 、 String 、 Enum 、Annotations类型以及上述类型所组成的 数组</li><li>通过 default 关键字声明参数的默认值。</li><li>如果只有一个参数成员最好命名为 value()</li><li>注解元素必须有确定的值，要么在定义注解元素时默认值指定，要么使用此注解时指定。非基本类型注解元素的值不可为 null</li></ul><h2 id="6-1-第1步-用-interface定义注解"><a href="#6-1-第1步-用-interface定义注解" class="headerlink" title="6.1 第1步:用@interface定义注解"></a>6.1 第1步:用@interface定义注解</h2><pre><code>public @interface Report {}</code></pre><h2 id="6-2-第2步-添加参数、默认值"><a href="#6-2-第2步-添加参数、默认值" class="headerlink" title="6.2 第2步:添加参数、默认值"></a>6.2 第2步:添加参数、默认值</h2><pre><code>public @interface Report {    int type() default 0;    String level() default &quot;info&quot;;    String value() default &quot;&quot;;    ...;}</code></pre><h2 id="6-3-用元注解配置注解："><a href="#6-3-用元注解配置注解：" class="headerlink" title="6.3 用元注解配置注解："></a>6.3 用元注解配置注解：</h2><pre><code>@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)public @interface Report {    int type() default 0;    String level() default &quot;info&quot;;    String value() default &quot;&quot;;    ...;}</code></pre><blockquote><p>其中，必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取。一般情况下，不必写@Inherited和@Repeatable。</p></blockquote><h1 id="7-解析注解"><a href="#7-解析注解" class="headerlink" title="7. 解析注解"></a>7. 解析注解</h1><p>Java的注解本身对代码逻辑没有任何影响。根据@Retention的配置：</p><ul><li>SOURCE类型的注解在编译期就被丢掉了；</li><li>CLASS类型的注解仅保存在class文件中，它们不会被加载进JVM；</li><li>RUNTIME类型的注解会被加载进JVM，并且在运行期可以被程序读取。</li></ul><p>如何使用注解完全由工具决定。SOURCE类型的注解主要由编译器使用，因此我们一般只使用，不编写。CLASS类型的注解主要由底层工具库使用，涉及到class的加载，一般我们很少用到。只有RUNTIME类型的注解不但要使用，还经常需要编写。</p><p>因此，我们只讨论如何读取RUNTIME类型的注解。</p><h2 id="7-1-读取注解"><a href="#7-1-读取注解" class="headerlink" title="7.1 读取注解"></a>7.1 读取注解</h2><p>因为注解定义后也是一种class，所有的注解都继承自java.lang.annotation.Annotation，因此，读取注解，需要使用反射API。Java提供的使用反射API读取Annotation的方法包括：</p><h3 id="7-1-1-判断某个注解是否存在于Class、Field、Method或Constructor："><a href="#7-1-1-判断某个注解是否存在于Class、Field、Method或Constructor：" class="headerlink" title="7.1.1 判断某个注解是否存在于Class、Field、Method或Constructor："></a>7.1.1 判断某个注解是否存在于Class、Field、Method或Constructor：</h3><p><strong>方法列表:</strong></p><ul><li>Class.isAnnotationPresent(Class) </li><li>Field.isAnnotationPresent(Class)</li><li>Method.isAnnotationPresent(Class)</li><li>Constructor.isAnnotationPresent(Class)</li></ul><p><strong>实例</strong></p><pre><code>// 判断@Report是否存在于Person类:Person.class.isAnnotationPresent(Report.class);</code></pre><h3 id="7-1-2-直接读取注解的方法列表"><a href="#7-1-2-直接读取注解的方法列表" class="headerlink" title="7.1.2 直接读取注解的方法列表"></a>7.1.2 直接读取注解的方法列表</h3><ul><li>Class.getAnnotation(Class)</li><li>Field.getAnnotation(Class)</li><li>Method.getAnnotation(Class)</li><li>Constructor.getAnnotation(Class)</li></ul><p><strong>实例</strong></p><pre><code>// 获取Person定义的@Report注解:Report report = Person.class.getAnnotation(Report.class);int type = report.type();String level = report.level();</code></pre><h3 id="7-1-3-射API读取注解的两种方法"><a href="#7-1-3-射API读取注解的两种方法" class="headerlink" title="7.1.3 射API读取注解的两种方法"></a>7.1.3 射API读取注解的两种方法</h3><ul><li>是先判断Annotation是否存在，如果存在，就直接读取</li></ul><pre><code>Class cls = Person.class;if (cls.isAnnotationPresent(Report.class)) {    Report report = cls.getAnnotation(Report.class);    ...}</code></pre><ul><li>直接读取Annotation，如果Annotation不存在，将返回null</li></ul><pre><code>Class cls = Person.class;Report report = cls.getAnnotation(Report.class);if (report != null) {   ...}</code></pre><h1 id="8-第三方注解"><a href="#8-第三方注解" class="headerlink" title="8.第三方注解"></a>8.第三方注解</h1><h2 id="8-1-springmvc校验注解"><a href="#8-1-springmvc校验注解" class="headerlink" title="8.1 springmvc校验注解"></a>8.1 springmvc校验注解</h2><ul><li>@NotNull: 注解元素必须是非空</li><li>@Null: 注解元素必须是空</li><li>@Digits: 验证数字构成是否合法</li><li>@Future: 验证是否在当前系统时间之后</li><li>@Past: 验证是否在当前系统时间之前</li><li>@Max: 验证值是否小于等于最大指定整数值</li><li>@Min: 验证值是否大于等于最小指定整数值</li><li>@Pattern: 验证字符串是否匹配指定的正则表达式</li><li>@Size: 验证元素大小是否在指定范围内</li><li>@DecimalMax: 验证值是否小于等于最大指定小数值</li><li>@DecimalMin: 验证值是否大于等于最小指定小数值</li><li>@AssertTrue: 被注释的元素必须为true</li><li>@AssertFalse: 被注释的元素必须为false</li><li>@Email: 被注释的元素必须是电子邮箱地址</li><li>@Length: 被注释的字符串的大小必须在指定的范围内</li><li>@NotEmpty: 被注释的字符串的必须非空</li><li>@Range: 被注释的元素必须在合适的范围内</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-数组</title>
      <link href="/2019/10/14/java-2-%E6%95%B0%E7%BB%84/"/>
      <url>/2019/10/14/java-2-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h1><h2 id="1-1-数组的特点"><a href="#1-1-数组的特点" class="headerlink" title="1.1 数组的特点"></a>1.1 数组的特点</h2><ul><li><p>Java中的数组，既能存储原始数据类型，又能存储对象类型。</p></li><li><p>数组元素的个数称为数组的长度。数组长度一旦确定，就不能改变。</p></li><li>数组元素的下标是从0开始的，即第一个元素的下标是0。</li><li>Java不支持多维数组，但是可以创建数组的数组。</li><li>Java中将数组作为对象处理。数组对象含有成员变量length，用来表示数组的长度。</li></ul><h2 id="1-2-一维数组"><a href="#1-2-一维数组" class="headerlink" title="1.2 一维数组"></a>1.2 一维数组</h2><p>在Java里创建并使用一维数组，需要以下步骤:</p><ol><li>声明一个数组变量来存放该数组。</li><li>创建一个新的数组对象并将其赋值给上一步所创建的数组变量。</li><li>在该数组中存储数据。</li><li>访问或修改此数组中存储的数据（元素）。</li></ol><h3 id="1-2-1-声明一维数组"><a href="#1-2-1-声明一维数组" class="headerlink" title="1.2.1 声明一维数组"></a>1.2.1 声明一维数组</h3><p><strong>语法:</strong></p><pre><code>// 方式1数组类型[] 数组名字;// 方式2数组类型 数组名字[];</code></pre><blockquote><p>这两种数组变量声明的方式在作用上是相同的，但通常建议采用第一种方式</p></blockquote><p><em>实例</em></p><pre><code>int[]  weeks; //声明一个整型数组boolean[]  flag; //声明一个布尔类型的数组float[]  score;  //声明一个浮点类型的数组</code></pre><h3 id="1-2-2-创建一维数组"><a href="#1-2-2-创建一维数组" class="headerlink" title="1.2.2 创建一维数组"></a>1.2.2 创建一维数组</h3><p>声明了数组变量之后，下一步就需要创建一个数组对象，并将其赋给所声明的数组变量。而创建数组对象，实际上就是在内存中分配相应大小的存储空间给数组。有两种方式可以用来创建数组对象。</p><ul><li><strong>使用new运算符</strong></li></ul><p>在Java中，数组是引用对象，所以可以使用new运算符来直接创建一个数组对象，如以下代码所示:</p><pre><code>//创建一个整型数组对象，数组大小为7int[] weeks = new int[7] ;//创建一个字符串数组，数组大小为10String[] studentNames = new String[10];</code></pre><blockquote><font color="ffa500">使用new运算符来创建数组对象时，必须指定这个数组的大小。创建数组对象时，仅仅是在内存中为数组变量分配指定大小的空间，并没有实际存储数据，这时数组的所有元素会被自动地赋予初值</font></blockquote><pre><code>- 数字数组，初值是0。- 布尔数组，初值是false。- 字符数组，初值是‘\0’。- 对象数组，初值是null。</code></pre><ul><li><strong>直接初始化数组元素</strong></li></ul><p>也可以通过把数组元素值直接放在大括号中的办法来同时完成创建和初始化数组，这时将在内存中分配与元素数量相适应的空间大小，并赋予指定的元素值，如以下代码所示。</p><pre><code>//创建一个整型数组对象，数组大小为7，并同时赋初值int[]  weeks = {1,2,3,4,5,6,7};//创建一个String数组对象，并初始化String[] studentNames = {&quot;张小明&quot;,&quot;黄芳&quot;,&quot;赵秀丽&quot;}; </code></pre><blockquote><p>使用这种方法创建数组对象时，大括号里的元素类型必须与指定的数据类型一致，并且数组的大小与大括号中包含的元素个数相同。</p></blockquote><h2 id="1-3-多维数组"><a href="#1-3-多维数组" class="headerlink" title="1.3 多维数组"></a>1.3 多维数组</h2><p>数组元素除了可以是原始数据类型、对象类型之外，还可以是数组，即数组的元素是数组。所以虽然Java不支持多维数组，但是可以通过声明数组的数组来实现同样的功能。元素数组还可以包含数组，依此类推，最后创建出达到需要的任意维数。</p><h3 id="1-3-1-声明二维数组"><a href="#1-3-1-声明二维数组" class="headerlink" title="1.3.1 声明二维数组"></a>1.3.1 声明二维数组</h3><p><strong>语法:</strong></p><pre><code>数组类型[][] 数组名字;数组类型 数组名字[][];</code></pre><p><strong>实例</strong></p><pre><code>int[][]  year;boolean[][] flag;float[][]  score;</code></pre><h3 id="1-3-2-创建二维数组"><a href="#1-3-2-创建二维数组" class="headerlink" title="1.3.2 创建二维数组"></a>1.3.2 创建二维数组</h3><p>声明了数组变量之后，下一步就需要创建一个数组对象，并将其赋给所声明的数组变量。而创建数组对象实际上就是在内存中分配相应大小的存储空间给数组。有两种方式可以用来创建二维数组对象。</p><ul><li><strong>使用new运算符</strong></li></ul><pre><code>//创建了一个二维数组对象，用来保存一年中的52个星期及每个星期的7天int[][]  year = new int[52][7] ;</code></pre><ul><li><strong>直接初始化数组元素</strong></li></ul><pre><code>//在这里，定义了一个二维数组arrays2，它有3行5列。int[][] arrays2={{11,12,13,14,15},{21,22,23,24,25},{31,32,33,34,35}}；//数组中每一行的长度也可以不同：int[][] arrays2 = {{11,12 },{21,22,23,24,25},{31, 34,35}}；boolean flags = {{true,false},{true,true,false,false},{false,false,true}};</code></pre><h2 id="1-4-数组操作"><a href="#1-4-数组操作" class="headerlink" title="1.4 数组操作"></a>1.4 数组操作</h2><h3 id="1-4-1-遍历数组"><a href="#1-4-1-遍历数组" class="headerlink" title="1.4.1 遍历数组"></a>1.4.1 遍历数组</h3><p><strong>遍历一维数组</strong></p><pre><code>String[] studentNames = {&quot;张三&quot;,&quot;李四&quot;,&quot;王伟&quot;,&quot;刘想&quot;};//第一种遍历数组for (int i = 0; i &lt; studentNames.length; i++){    System.out.println(&quot;第一种遍历打印&gt;&gt;&gt;&gt;&gt; &quot; + studentNames[i]);}/** 输出:第一种遍历打印&gt;&gt;&gt;&gt;&gt; 张三第一种遍历打印&gt;&gt;&gt;&gt;&gt; 李四第一种遍历打印&gt;&gt;&gt;&gt;&gt; 王伟第一种遍历打印&gt;&gt;&gt;&gt;&gt; 刘想**///第二种遍历数组for (String item:studentNames) {    System.out.println(&quot;第二种遍历打印 ---&gt;&quot; + item);}/** 输出:第二种遍历打印 ---&gt;张三第二种遍历打印 ---&gt;李四第二种遍历打印 ---&gt;王伟第二种遍历打印 ---&gt;刘想**/</code></pre><p><strong>遍历二维数组</strong></p><pre><code>String[][] args = {{"张三","李四","王伟","刘想"},{"100","200","300","300"}};//第一种遍历数组for (int i = 0; i &lt; args.length; i++){  for (int j = 0; j &lt; args[i].length; j++){      System.out.println(&quot;第一种遍历: &quot;+i+&quot;-&quot;+j+&quot; &gt;&quot;+ args[i][j]);  }}/** 输出:第一种遍历: 0-0 &gt;张三第一种遍历: 0-1 &gt;李四第一种遍历: 0-2 &gt;王伟第一种遍历: 0-3 &gt;刘想第一种遍历: 1-0 &gt;900第一种遍历: 1-1 &gt;200第一种遍历: 1-2 &gt;300第一种遍历: 1-3 &gt;300**///第二种遍历数组for (String[] item:args) {    for (String value: item){        System.out.println(&quot;第二种遍历打印 ---&gt;&quot; + value);    }}/** 输出:第二种遍历打印 ---&gt;张三第二种遍历打印 ---&gt;李四第二种遍历打印 ---&gt;王伟第二种遍历打印 ---&gt;刘想第二种遍历打印 ---&gt;900第二种遍历打印 ---&gt;200第二种遍历打印 ---&gt;300第二种遍历打印 ---&gt;300**/</code></pre><h3 id="1-4-2-数组填充-fill"><a href="#1-4-2-数组填充-fill" class="headerlink" title="1.4.2 数组填充(fill)"></a>1.4.2 数组填充(fill)</h3><p><strong>语法</strong></p><pre><code>// 把数组所有元素初始化为:valueArrays.fill(数据类型[] 数组变量名, value)// 把数组从索引startIndex(包括)开始到endIndex(不包括)内的所有元素初始化为:valueArrays.fill(数据类型[] 数组变量名, startIndex,endIndex,value)</code></pre><p><strong>实例</strong></p><pre><code>public static void testFill(){    // 填充数据 Arrays.fill(数据类型[] 数组变量名, value)    int[] number = new int[5];    Arrays.fill(number,10);    System.out.println(Arrays.toString(number)); // 输出: [10, 10, 10, 10, 10]    int[] number2 = new int[5];    Arrays.fill(number2,0,3,6);    System.out.println(Arrays.toString(number2)); // 输出: [6, 6, 6, 0, 0]}</code></pre><h3 id="1-4-3-数组排序-sort"><a href="#1-4-3-数组排序-sort" class="headerlink" title="1.4.3 数组排序(sort)"></a>1.4.3 数组排序(sort)</h3><pre><code>int[] arr = {23,90,72,37,662,12};System.out.println(Arrays.toString(arr));Arrays.sort(arr);System.out.println(&quot;排序后:&quot;+ Arrays.toString(arr));//输出: 排序后:[12, 23, 37, 72, 90, 662]</code></pre><h3 id="1-4-4-数组复制-copyOf、copyOfRange"><a href="#1-4-4-数组复制-copyOf、copyOfRange" class="headerlink" title="1.4.4 数组复制(copyOf、copyOfRange)"></a>1.4.4 数组复制(copyOf、copyOfRange)</h3><pre><code>int[] number = {23, 90, 72, 37, 662, 12, 239, 234};int[] number1 = Arrays.copyOf(number, 5);System.out.println(Arrays.toString(number1)); //输出:[23, 90, 72, 37, 662]int[] number2 = Arrays.copyOfRange(number,3,6);System.out.println(Arrays.toString(number2)); //输出:[37, 662, 12]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础篇-原始数据类型及运算</title>
      <link href="/2019/10/12/java-1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97/"/>
      <url>/2019/10/12/java-1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-变量和常量"><a href="#1-变量和常量" class="headerlink" title="1.变量和常量"></a>1.变量和常量</h1><h2 id="1-1-关键字"><a href="#1-1-关键字" class="headerlink" title="1.1 关键字"></a>1.1 关键字</h2><p><strong>关键字不能作为变量名使用,以下表格中是java中的关键字列表</strong></p><p><img src="https://mrliuqh.github.io/directionsImg/java/keyword.jpg" alt=""></p><blockquote><p>true、false、null不是关键字，是保留字，但是仍然不能用于命名标识符。保留字是为Java预留的关键字，它们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。</p></blockquote><h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h2><h3 id="1-2-1-变量声明"><a href="#1-2-1-变量声明" class="headerlink" title="1.2.1 变量声明"></a>1.2.1 变量声明</h3><h4 id="单一变量声明"><a href="#单一变量声明" class="headerlink" title="单一变量声明"></a>单一变量声明</h4><p><strong>① 先声明后赋值:</strong></p><pre><code>变量类型 变量名</code></pre><p><em>实例</em></p><pre><code>String studentName;studentName = &quot;小明&quot;;</code></pre><p><strong>② 声明及赋值:</strong></p><pre><code>String studentName = &quot;小明&quot;;</code></pre><h4 id="多个变量声明"><a href="#多个变量声明" class="headerlink" title="多个变量声明"></a>多个变量声明</h4><pre><code>// 只声明String studentName, className;// 声明及赋值String studentName = &quot;小明&quot;, className =&quot;三年级&quot;;</code></pre><h2 id="1-3-常量"><a href="#1-3-常量" class="headerlink" title="1.3 常量"></a>1.3 常量</h2><p>常量分为字面常量和字符常量两种。</p><ul><li>字面常量：指的是如123、12.34、‘m’、true这样字面上本身就是一个固定值的数据。</li><li>字符常量：指的是代表一个固定值的标识符。使用字符常量需要在程序中先声明后使用。</li></ul><h3 id="1-3-1-常量声明"><a href="#1-3-1-常量声明" class="headerlink" title="1.3.1 常量声明"></a>1.3.1 常量声明</h3><p>声明字符常量的语法如下。</p><pre><code>final 常量类型  常量标识符=常量值；</code></pre><p><strong>① 声明及赋值:</strong></p><pre><code>//声明一个float类型常量，并初始化为3.14final float PI = 3.14F; //声明一个整型常量，并初始化为24final int STUENT_NUMBER = 24;  </code></pre><p><strong>② 先声明后赋值:</strong></p><pre><code>final float PI;                     //声明一个float类型常量final int STUENT_NUMBER;           //声明一个整型常量PI = 3.14F;                         //初始化为3.14STUENT_NUMBER = 24;                 //初始化为24</code></pre><blockquote><p>初始化以后，就不允许再在程序中对这些常量进行重新赋值，即不允许改变常量的值。</p></blockquote><h3 id="1-3-2-批量声明"><a href="#1-3-2-批量声明" class="headerlink" title="1.3.2 批量声明"></a>1.3.2 批量声明</h3><p>如果需要声明多个同一类型的常量，可以使用下面的语法：</p><pre><code>final常量类型  常量标识符1,常量标识符2,常量标识符3，…;final常量类型  常量标识符1=常量值1,常量标识符2=常量值2,常量标识符3=常量值3;</code></pre><p><strong>实例</strong></p><pre><code> //声明三个float类型的变量final float PI，PRICE，WEIGHT;  //声明三个float类型的变量，同时进行初始化final float PI=3.14F,price=13.86F,WEIGHT=86.32F;</code></pre><h2 id="1-4-命名规则"><a href="#1-4-命名规则" class="headerlink" title="1.4 命名规则"></a>1.4 命名规则</h2><ul><li><p>一个标识符可以由几个单词连接而成，以表明它所代表的含义，如applePrice。</p></li><li><p>如果是类名，每个单词的首字母都要大写，其他字母则小写，如StudentInfo。</p></li><li>如果是方法名或者变量名，第一个单词的首字母小写，其他单词的首字母都要大写，如getStudentInfo()、studentName。</li><li>如果是常量，所有单词的所有字母全部大写，如果由多个单词组成，通常情况下单词之间用下画线“_”分隔，如PI、MAX_VALUE。</li><li>如果是包名，所有单词的所有字母全部小写，如examples.chapter02。</li></ul><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h1><p><img src="https://mrliuqh.github.io/directionsImg/java/basic_data_type.jpg" alt=""></p><h2 id="2-1-整数类型"><a href="#2-1-整数类型" class="headerlink" title="2.1 整数类型"></a>2.1 整数类型</h2><p><b>整数类型取值范围</b><br><img src="https://mrliuqh.github.io/directionsImg/java/int_ranage.jpg" alt=""></p><pre><code>byte age = 18;short number = 2300;long account = 8172651756L;</code></pre><blockquote><p>在为long型常量或变量赋值时，需要在所赋值的后面加上一个字母”L”（或小写”l”），说明所赋的值为long型。如果所赋的值未超出int型的取值范围，也可以省略字母”L”（或小写”l”)</p></blockquote><pre><code>//所赋的值超出了int型的取值范围，必须在后面加上字母“L”long account = 3124567893L;//所赋的值未超出int型的取值范围，可以在后面加上字母“L”long account = 31245678L; //所赋的值未超出int型的取值范围，可以省略字母“L”long account = 31245678;  // !但是下面的这种赋值方式是错误的。long account = 3124567893; //所赋的值超出了int型的取值范围，但是没有在后面加上字母“L”</code></pre><h2 id="2-2-浮点类型"><a href="#2-2-浮点类型" class="headerlink" title="2.2 浮点类型"></a>2.2 浮点类型</h2><p><b>浮点类型取值范围</b><br><img src="https://mrliuqh.github.io/directionsImg/java/float_ranage.jpg" alt=""></p><p>如果要声明一个用来保存小数的变量，必须使用浮点类型;</p><pre><code>//声明一个float类型的变量，并赋值float price = 326.85F;//声明一个double类型的变量，并赋值double height = 3836.8;double height = 3836.8D;</code></pre><blockquote><p>在默认情况下，小数都被看作double型。若使用float型小数，则需要在其值后面添加F或f,否则编译时，会提示错误。因为不加上字母“F”或小写“f”时，默认的数值为double类型，把double类型的数值赋给float类型的变量，是不正确的。而在为double类型变量赋值时，后面的字母“D”或者“d”,可加可不加。</p></blockquote><h2 id="2-3-字符类型"><a href="#2-3-字符类型" class="headerlink" title="2.3 字符类型"></a>2.3 字符类型</h2><p>字符类型（char）用于存储单个字符，占用16位（两个字节）的内存空间,在定义字符型变量时，要以单引号表示,如’a’、’#’、’3’。而双引号则表示一个字符串;</p><pre><code>//声明一个char类型的变量，用来存储性别信息char gender = &#39;男&#39;;//声明一个char类型的变量，用来存储符号&#39;*&#39;char star = &#39;*&#39;;//声明一个char类型的常量，用来存储圆周率符号&#39;π&#39;final char PI = &#39;π&#39;;       </code></pre><h2 id="2-4-逻辑类型（布尔类型）"><a href="#2-4-逻辑类型（布尔类型）" class="headerlink" title="2.4 逻辑类型（布尔类型）"></a>2.4 逻辑类型（布尔类型）</h2><p>声明逻辑类型常量或者变量，需要使用关键字 boolean,</p><pre><code>boolean falg = false;</code></pre><h1 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h1><p><strong>数据类型级别与取值范围</strong><br><img src="https://mrliuqh.github.io/directionsImg/java/data_type_level.jpg" alt=""></p><h2 id="3-1-自动（隐式）类型转换"><a href="#3-1-自动（隐式）类型转换" class="headerlink" title="3.1 自动（隐式）类型转换"></a>3.1 自动（隐式）类型转换</h2><p>在对变量进行赋值时，如果是将低级数据类型（相对取值范围较小的数据类型）的数据，赋给高级数据类型（相对取值范围较大的数据类型）的变量，这时Java会自动完成从低级类型向高级类型的转换。在原始数据类型中，除了boolean类型外，其他数据均可参与算术运算。</p><p><strong>实例</strong></p><pre><code>//定义float类型的变量，并赋值float price = 36; //输出price变量的值：price=36.0System.out.println(&quot;price=&quot;+price);        </code></pre><p><code>可以看出，因为相对于float类型来说，整数36为int型，属于低级数据类型，所以Java自动将其转换为float类型的36.0</code></p><blockquote><p>将低类型的数据赋给高类型的变量时，Java会自动将低类型的数据转换为高类型的数据，然后赋值。</p></blockquote><h2 id="3-2-混合数据类型运算"><a href="#3-2-混合数据类型运算" class="headerlink" title="3.2 混合数据类型运算"></a>3.2 混合数据类型运算</h2><p>在不同类型的数据进行混合运算时，分为两种情况：</p><ul><li>只有byte、short或char类型的数据。<br>这种情况下，Java首先将byte或short或char类型转换为int类型，然后再参与运算，并且运算结果也是int型的</li></ul><p><em>例如：</em></p><pre><code>public class Test3{    public static void main(String[] args){        byte      byteVar = 68;             //声明一个byte类型的字节变量        short  shortVar = 873;              //声明一个short类型的整型变量        char  charVar = ‘a’;               //声明一个char类型的字符变量        int  value = byteVar + shortVar + charVar;        System.out.println(“value = ” + value);//输出value的值：value=1038    }}</code></pre><ul><li>含有int、long、float或double型的数据。<br>这种情况下，Java首先将所有低数据类型转换为表达式中数据类型最高的数据类型，然后再参与运算，并且运算结果也是表达式中最高的数据类型。</li></ul><p><em>例如：</em></p><pre><code>public class Test4{    public static void main(String[] args){        //声明一个字节类型的变量        byte  byteVar = 68;        //声明一个int类型的变量        int   intVar = 873;         //声明一个float类型的变量        float  floatVar = 128.5F;         // 不同类型进行混合运算        double  value = byteVar + intVar + floatVar;        System.out.println(&quot;value = &quot; + value) // 输出:1069.5    }}</code></pre><h2 id="3-2-强制（显式）类型转换"><a href="#3-2-强制（显式）类型转换" class="headerlink" title="3.2 强制（显式）类型转换"></a>3.2 强制（显式）类型转换</h2><p>在对变量进行赋值时，如果是将高级数据类型的数据赋值给低级数据类型的变量，java 不会自动完成类型的转换，需要主动转换；</p><pre><code>// 定义int类型的变量，并赋值double类型的36.5int count = 36.5;System.out.println(&quot;count=&quot;+count);</code></pre><p>上述代码在编译时会提示错误，因为将高级类型的数据36.5赋给了低级类型的变量count。</p><p>可改为下面这种形式：</p><pre><code>//强制类型转换int count = (int)36.5;  //输出count变量的值：count=36         System.out.println(&quot;count=&quot;+count);</code></pre><blockquote><p>在上面的代码中，（int）显示为强制类型转换的语法，即在欲转换的数据或变量前面，用“（目的数据类型）”的形式，强制转换为括号中的目的数据类型。另外，在上面的示例中也可以看到，<font color="red">在进行强制类型转换时，进行了简单的截断而不是四舍五入（输出的是36，而不是37）。</font></p></blockquote><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h1><h2 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 算术运算符</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/arithmetic_operation.jpg" alt=""></p><h2 id="4-2-赋值运算符"><a href="#4-2-赋值运算符" class="headerlink" title="4.2 赋值运算符"></a>4.2 赋值运算符</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/assignment_operation.jpg" alt=""></p><h2 id="4-3-关系运算符"><a href="#4-3-关系运算符" class="headerlink" title="4.3 关系运算符"></a>4.3 关系运算符</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/relational_operation.jpg" alt=""></p><h2 id="4-4-位运算符"><a href="#4-4-位运算符" class="headerlink" title="4.4 位运算符"></a>4.4 位运算符</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/bit_operation.png" alt=""></p><h2 id="4-5-逻辑运算符"><a href="#4-5-逻辑运算符" class="headerlink" title="4.5 逻辑运算符"></a>4.5 逻辑运算符</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/logic_operation.png" alt=""></p><h2 id="4-6-三元运算符"><a href="#4-6-三元运算符" class="headerlink" title="4.6 三元运算符"></a>4.6 三元运算符</h2><pre><code>逻辑表达式 ？ 表达式1（为true） : 表达式2 (为false) </code></pre><h2 id="4-7-运算符优先级"><a href="#4-7-运算符优先级" class="headerlink" title="4.7 运算符优先级"></a>4.7 运算符优先级</h2><p><img src="https://mrliuqh.github.io/directionsImg/java/operator_precedence.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx限流(防恶意请求)</title>
      <link href="/2019/08/07/nginx-limit/"/>
      <url>/2019/08/07/nginx-limit/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-限流算法"><a href="#1-限流算法" class="headerlink" title="1. 限流算法"></a>1. 限流算法</h1><h2 id="1-1-漏桶算法"><a href="#1-1-漏桶算法" class="headerlink" title="1.1 漏桶算法"></a>1.1 漏桶算法</h2><p>以固定速率从桶中流出水滴，以任意速率往桶中放入水滴，桶容量大小是不会发生改变的。  </p><ul><li>流入：以任意速率往桶中放入水滴。</li><li>流出：以固定速率从桶中流出水滴。</li><li>水滴：是唯一不重复的标识。</li></ul><p>因为桶中的容量是固定的，如果流入水滴的速率&gt;流出的水滴速率，桶中的水滴可能会溢出。那么溢出的水滴请求都是拒绝访问的，或者直接调用服务降级方法</p><h2 id="1-2-令牌桶算法"><a href="#1-2-令牌桶算法" class="headerlink" title="1.2 令牌桶算法"></a>1.2 令牌桶算法</h2><ul><li>令牌以固定速率产生，并缓存到令牌桶中；</li><li>令牌桶放满时，多余的令牌被丢弃；</li><li>请求要消耗等比例的令牌才能被处理；</li><li>令牌不够时，请求被缓存。</li></ul><p>相比漏桶算法，令牌桶算法不同之处在于它不但有一只“桶”，还有个队列，这个桶是用来存放令牌的，队列才是用来存放请求的</p><p>从作用上来说，漏桶和令牌桶算法最明显的区别就是是否允许突发流量(burst)的处理，漏桶算法能够强行限制数据的实时传输（处理）速率，对突发流量不做额外处理；而令牌桶算法能够在限制数据的平均传输速率的同时允许某种程度的突发传输。</p><h1 id="2-限速使用"><a href="#2-限速使用" class="headerlink" title="2. 限速使用"></a>2. 限速使用</h1><p>nginx可以通过limit_conn_zone 和limit_req_zone两个组件来对客户端访问目录和文件的访问频率和次数进行限制，另外还可以善用进行服务安全加固，两个模块都能够对客户端访问进行限制。能够对 <a href="https://baike.baidu.com/item/CC%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">CC攻击</a>、<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB/3802159?fromtitle=DDOS%E6%94%BB%E5%87%BB&amp;fromid=177090" target="_blank" rel="noopener">DDOS攻击</a>等此类进行有效的防御。</p><h2 id="2-1-示例"><a href="#2-1-示例" class="headerlink" title="2.1 示例"></a>2.1 示例</h2><pre><code>http {       # 定义一个名称为one内存区域大小为10m,表示请求的速率是1秒10个请求。    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;    # 定义 按IP配置内存区域zone的大小为10m:    limit_conn_zone $binary_remote_addr zone=perip_conn:10m;    # 定义 按server配置一个连接 zone    limit_conn_zone $server_name zone=perserver_conn:100m;}# 负载均衡配置upstream server_list{    server 192.168.40.11:8000 max_fails=3 fail_timeout=10s weight=50;    server 192.168.40.12:8000 max_fails=3 fail_timeout=10s weight=100;    server 192.168.40.13:8000 max_fails=3 fail_timeout=10s weight=100;    keepalive 1000;}server {    listen       8887;    server_name  127.0.0.1;    access_log  /var/log/nginx/sz_proxy_access.log  main;    location / {        # 使用one(与上面limit_req_zone，的name一致)区域配置限制，burst队列长度为100,nodelay:是否抛出503        limit_req zone=one burst=100 nodelay;        # 限制同一个IP同一时间来源的连接数:10个        limit_conn perip_conn 10;        # 限制同一个虚拟服务器同一时的总连接数        limit_conn perserver_conn 2000;        # 限制速度        # limit_rate 1k;        proxy_buffer_size 64k;        proxy_buffers 32 32k;        proxy_busy_buffers_size 128k;        proxy_set_header Connection &quot;Keep-Alive&quot;;        proxy_http_version 1.1;        proxy_set_header Connection &quot;&quot;;        proxy_intercept_errors on;        proxy_pass http://server_list/;    }    # 以上限制，超出后会报503，以下代码会把把503转成200，并返回固定的错误页面    error_page   503 =200  /success.html;    location = /success.html {       root /data/web/test/www/;       index error.html;    }}</code></pre><h2 id="2-2-示例解析"><a href="#2-2-示例解析" class="headerlink" title="2.2 示例解析"></a>2.2 示例解析</h2><h3 id="2-2-1-http-配置段"><a href="#2-2-1-http-配置段" class="headerlink" title="2.2.1 http 配置段"></a>2.2.1 http 配置段</h3><h4 id="1-limit-req-zone"><a href="#1-limit-req-zone" class="headerlink" title="1. limit_req_zone"></a>1. limit_req_zone</h4><p><strong>语法</strong></p><blockquote><p>limit_req_zone $binary_remote_addr zone=one:?m rate=?r/s;</p></blockquote><pre><code># 限速配置: 设置一个名称为one内存区域大小为10m,表示请求的速率是1秒10个请求。limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;</code></pre> <!--- zone:one:10m 表示一个内存区域大小为10m,并且设定了名称为one--> <!--- rate=10r/s 表示请求的速率是1秒10个请求，当单位设置成60r/m时，并不能达到限速1分钟60次的效果，它等同于1r/s。--> <!--- $binary_remote_addr 表示远程的ip地址，当此nginx前方还存在代理时，需进行处理--><ul><li><p>第一个参数key: $binary_remote_addr 表示远程的ip地址，当此nginx前方还存在代理时，需进行处理。</p></li><li><p>第二个参数zone: 定义共享内存区来存储访问信息，1M能存储16000 IP地址的访问信息，10M可以存储16W个IP地址访问信息。zone=one:10m表示生成一个大小为10M，名字为one的内存区域</p></li><li>第三个参数rate : rate=1r/s表示允许相同标识的客户端的访问频次，这里限制的是每秒1次<blockquote><p>当单位设置成60r/m时，并不能达到限速1分钟60次的效果，它等同于1r/s</p></blockquote></li></ul><h4 id="2-limit-conn-zone"><a href="#2-limit-conn-zone" class="headerlink" title="2. limit_conn_zone"></a>2. limit_conn_zone</h4><p><strong>语法</strong></p><blockquote><p>imit_conn_zone $variable zone=name:size;</p></blockquote><p><strong>参数说明:</strong></p><ul><li>$variable: 定义的键，要限流的维度,[$binary_remote_addr:同一客户端IP，$server_name:限制同一server最大并发数]</li><li>size: 定义各个键共享内存空间大小</li><li>name: zone名称</li></ul><pre><code># 按IP配置内存区域zone的大小为10m:limit_conn_zone $binary_remote_addr zone=perip_conn:10m;# 按server配置一个连接 zonelimit_conn_zone $server_name zone=perserver_conn:100m;</code></pre><h3 id="2-2-2-server-配置段"><a href="#2-2-2-server-配置段" class="headerlink" title="2.2.2 server 配置段"></a>2.2.2 server 配置段</h3><h4 id="1-limit-req"><a href="#1-limit-req" class="headerlink" title="1. limit_req"></a>1. limit_req</h4><pre><code>limit_req zone=one burst=100 nodelay;</code></pre><ul><li>zone=one : 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应</li><li>burst=100 : 表示请求队列的长度</li><li>nodelay : 表示不延时</li></ul><h4 id="2-limit-conn"><a href="#2-limit-conn" class="headerlink" title="2. limit_conn"></a>2. limit_conn</h4><pre><code> # 限制同一个IP同一时间来源的连接数:10个 limit_conn perip_conn 10; # 限制同一个虚拟服务器同一时的总连接数 limit_conn perserver_conn 2000;</code></pre><h4 id="3-limit-rate-限速"><a href="#3-limit-rate-限速" class="headerlink" title="3.limit_rate 限速"></a>3.limit_rate 限速</h4><pre><code># 从下载指定的文件大小(1M)之后开始限速limit_rate_after 1m;# 限制请求资源limit_rate 1k;</code></pre><h2 id="2-3-为什么使用-binary-remote-addr，而不使用-remote-addr"><a href="#2-3-为什么使用-binary-remote-addr，而不使用-remote-addr" class="headerlink" title="2.3 为什么使用$binary_remote_addr，而不使用$remote_addr"></a>2.3 为什么使用$binary_remote_addr，而不使用$remote_addr</h2><p><code>原因是，两个变量的长度不一样。</code></p><ul><li>$remote_addr变量的长度为7字节到15字节，而存储状态在32位平台中占用32字节或64字节，在64位平台中占用64字节。</li><li>$binary_remote_addr变量的长度是固定的4字节，存储状态在32位平台中占用32字节或64字节，在64位平台中占用64字节。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8问题归纳</title>
      <link href="/2019/08/03/php-mysql8-bug/"/>
      <url>/2019/08/03/php-mysql8-bug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="报错：PDO-construct-Server-sent-charset-255-unknown-to-the-client-Please-report-to-the-developers"><a href="#报错：PDO-construct-Server-sent-charset-255-unknown-to-the-client-Please-report-to-the-developers" class="headerlink" title="报错：PDO::__construct(): Server sent charset (255) unknown to the client. Please, report to the developers"></a>报错：PDO::__construct(): Server sent charset (255) unknown to the client. Please, report to the developers</h4><p>根据网上资料显示，是由于Mysql8.0将默认的字符集改为了utfmb4，因此和客户端（不仅仅是PHP）的通信无法识别，我们需要更改my.cnf来指定字符集。</p><pre><code class="$xslt">[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]collation-server = utf8_unicode_cicharacter-set-server = utf8</code></pre><h4 id="报错：PDO-construct-The-server-requested-authentication-method-unknown-to-the-client-caching-sha2-password"><a href="#报错：PDO-construct-The-server-requested-authentication-method-unknown-to-the-client-caching-sha2-password" class="headerlink" title="报错：PDO::__construct(): The server requested authentication method unknown to the client [caching_sha2_password]"></a>报错：PDO::__construct(): The server requested authentication method unknown to the client [caching_sha2_password]</h4><p>根据<a href="https://stackoverflow.com/questions/49083573/php-7-2-2-mysql-8-0-pdo-gives-authentication-method-unknown-to-the-client-ca" target="_blank" rel="noopener">网上资料</a>显示，是由于用户身份认证的加密方式不兼容导致的，mysql8.0中默认方式为caching_sha2_password，引起老版本兼容性问题，老版本加密方式为mysql_native_password。</p><p>新建用老版加密方式初始化密码的用户即可：</p><pre><code class="$xslt">CREATE USER username@localhost identified with mysql_native_password by &#39;password&#39;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建自己的镜像</title>
      <link href="/2019/05/21/create-self-Image/"/>
      <url>/2019/05/21/create-self-Image/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-创建一个简单的Node-js-应用镜像"><a href="#1-创建一个简单的Node-js-应用镜像" class="headerlink" title="1.创建一个简单的Node.js 应用镜像"></a>1.创建一个简单的Node.js 应用镜像</h3><h4 id="1-1-创建一个本地目录"><a href="#1-1-创建一个本地目录" class="headerlink" title="1.1 创建一个本地目录"></a>1.1 创建一个本地目录</h4><pre><code> makedir helloword</code></pre><h4 id="1-2-编写应用代码server-js-代码保存到-“helloword-“文件下"><a href="#1-2-编写应用代码server-js-代码保存到-“helloword-“文件下" class="headerlink" title="1.2 编写应用代码server.js,代码保存到 “helloword/“文件下"></a>1.2 编写应用代码server.js,代码保存到 “helloword/“文件下</h4><pre><code>var http = require(&#39;http&#39;);var handleRequest = function(request, response) {  console.log(&#39;Received request for URL: &#39; + request.url);  response.writeHead(200);  response.end(&#39;Hello World!&#39;);};var www = http.createServer(handleRequest);www.listen(8080);</code></pre><h4 id="1-3-编写Dockerfile文件"><a href="#1-3-编写Dockerfile文件" class="headerlink" title="1.3 编写Dockerfile文件"></a>1.3 编写Dockerfile文件</h4><pre><code> FROM node:4.4 EXPOSE 8080 COPY server.js . CMD node server.js</code></pre><h4 id="1-4-创建新镜像，给它起一个名字"><a href="#1-4-创建新镜像，给它起一个名字" class="headerlink" title="1.4  创建新镜像，给它起一个名字"></a>1.4  创建新镜像，给它起一个名字</h4><blockquote><p>使用命令: docker build [OPTIONS] PATH | URL | -<br><code>--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</code></p></blockquote><pre><code>➜ docker build -t liuqh/hellonde:v1 .Sending build context to Docker daemon  3.072kBStep 1/4 : FROM node:4.44.4: Pulling from library/node357ea8c3d80b: Pull complete52befadefd24: Pull complete3c0732d5313c: Pull completeceb711c7e301: Pull complete868b1d0e2aad: Pull complete3a438db159a5: Pull completeDigest: sha256:7b657ccf24be2c8bab969b215e6853bc87a0d2fbe0896d5305cc87122f5360d0Status: Downloaded newer image for node:4.4 ---&gt; 93b396996a16Step 2/4 : EXPOSE 8080 ---&gt; Running in a7798374f671Removing intermediate container a7798374f671 ---&gt; 0c394b4854faStep 3/4 : COPY server.js . ---&gt; cb0dd1a3ffedStep 4/4 : CMD node server.js ---&gt; Running in 7d1ec9e39d79Removing intermediate container 7d1ec9e39d79 ---&gt; db149c04d3faSuccessfully built db149c04d3faSuccessfully tagged liuqh/hellonde:v1</code></pre><blockquote><p><span style="color:red">注意命令后面的圆点</span></p></blockquote><h4 id="1-5-查看本地镜像，会发现自己建议的镜像"><a href="#1-5-查看本地镜像，会发现自己建议的镜像" class="headerlink" title="1.5 查看本地镜像，会发现自己建议的镜像"></a>1.5 查看本地镜像，会发现自己建议的镜像</h4><pre><code>➜ docker imagesREPOSITORY             TAG                 IMAGE ID            CREATED             SIZEliuqh/hellonde         v1                  db149c04d3fa        12 seconds ago      648MBlaradock_nginx         latest              fb8945ae0cb8        11 days ago         27.6MB</code></pre><h4 id="1-6-运行容器"><a href="#1-6-运行容器" class="headerlink" title="1.6 运行容器"></a>1.6 运行容器</h4><pre><code>➜  docker run -d -p 8080:8080 --name hello-word liuqh/hellonde:v1f18a619dafb3e333cd3592ce5e8e7b373d622c81fe968558307970f22cb1a92a</code></pre><h4 id="1-7-验证"><a href="#1-7-验证" class="headerlink" title="1.7 验证"></a>1.7 验证</h4><p>在浏览器输入 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a></p><h3 id="2-镜像上传至dockerHub"><a href="#2-镜像上传至dockerHub" class="headerlink" title="2.镜像上传至dockerHub"></a>2.镜像上传至<a href="https://hub.docker.com" target="_blank" rel="noopener">dockerHub</a></h3><p><code>前提是有自己的帐号，没有请去注册。</code></p><h4 id="2-1-将容器commit-成镜像"><a href="#2-1-将容器commit-成镜像" class="headerlink" title="2.1 将容器commit 成镜像"></a>2.1 将容器commit 成镜像</h4><blockquote><p>使用命令 docker commit <exiting-container> <hub-user>/<repo-name>[:<tag>] </tag></repo-name></hub-user></exiting-container></p></blockquote><pre><code>➜ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                            NAMESf18a619dafb3        liuqh/hellonde:v1   &quot;/bin/sh -c &#39;node se…&quot;   3 seconds ago       Up 2 seconds        0.0.0.0:8080-&gt;8080/tcp                                           hello-word➜ docker commit f18a619dafb3 liuqinghui/hellowordsha256:efb1301fb0fdd607b4e0ff2c34e3d36c890c665a14abef1bf82316ec05938491</code></pre><blockquote><p><code>如果是已经存在的镜像则使用:docker tag &lt;existing-image&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</code></p></blockquote><p>这里的<tag>不指定就是latest。</tag></p><h4 id="2-2-push-镜像到docker-hub的仓库"><a href="#2-2-push-镜像到docker-hub的仓库" class="headerlink" title="2.2 push 镜像到docker hub的仓库"></a>2.2 push 镜像到docker hub的仓库</h4><pre><code># 登录 docker hub➜ docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https://hub.docker.com to create one.Username: liuqinghuiPassword:Login Succeeded# docker push 镜像到docker hub 的仓库➜ docker push liuqinghui/helloword:v1The push refers to repository [docker.io/liuqinghui/helloword]99393065d499: Pushed20a6f9d228c0: Mounted from library/node80c332ac5101: Mounted from library/node04dc8c446a38: Mounted from library/node1050aff7cfff: Mounted from library/node66d8e5ee400c: Mounted from library/node2f71b45e4e25: Mounted from library/nodev1: digest: sha256:b567d7fbcfe5d1987d2bd6fd8f8633f11ca32c666868cb6366a5d0ae3380a9fe size: 1794</code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化</title>
      <link href="/2019/04/15/SQL%E4%BC%98%E5%8C%96/"/>
      <url>/2019/04/15/SQL%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-优化步骤"><a href="#1-优化步骤" class="headerlink" title="1 优化步骤"></a>1 优化步骤</h2><h3 id="1-1-使用show-status-查看各种SQL的执行频率"><a href="#1-1-使用show-status-查看各种SQL的执行频率" class="headerlink" title="1.1 使用show status 查看各种SQL的执行频率"></a>1.1 使用show status 查看各种SQL的执行频率</h3><p><code>show [session|global] status 可以根据需要加上参数&quot;session&quot; 或者&quot;global&quot; 来显示 session 级(当前连接)的统计结果和 global 级(自数据库上次启动至今)的统计结果。如果不写，默认使 用参数是&quot;session&quot;。</code></p><h4 id="1-1-1-查看CRUD执行情况"><a href="#1-1-1-查看CRUD执行情况" class="headerlink" title="1.1.1 查看CRUD执行情况"></a>1.1.1 查看CRUD执行情况</h4><pre><code># 查看自数据库上次启动至今的统计结果mysql&gt; show global status like &#39;Com_%&#39;;+---------------------------+-------+| Variable_name             | Value |+---------------------------+-------+....| Com_insert                | 8877  || Com_select                | 438   || Com_update                | 4138  || Com_delete                | 126   |....+---------------------------+-------+142 rows in set (0.00 sec)</code></pre><font color="red"> Com_xxx 表示每个 xxx 语句执行的次数,通常比较关心的是以上几个统计参数</font><ul><li>Com_select:执行 select 操作的次数，一次查询只累加 1。</li><li>Com_insert:执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</li><li>Com_update:执行 UPDATE 操作的次数。</li><li>Com_update:执行 UPDATE 操作的次数。</li></ul><blockquote><p>上面这些参数对于所有存储引擎的表操作都会进行累计。下面这几个参数只是针对 InnoDB 存储引擎的，累加的算法也略有不同。</p></blockquote><blockquote><p>mysql&gt; show global status like ‘Innodb_rows_%’;</p></blockquote><ul><li>Innodb_rows_read:select 查询返回的行数。</li><li>Innodb_rows_inserted:执行 INSERT 操作插入的行数。</li><li>Innodb_rows_updated:执行 UPDATE 操作更新的行数。</li><li>Innodb_rows_deleted:执行 DELETE 操作删除的行数。</li></ul><blockquote><font color="orange"> 通过以上几个参数，可以很容易地了解当前数据库的应用是以插入更新为主还是以查询操作为主 </font></blockquote><h4 id="1-1-2-查看事务的执行情况"><a href="#1-1-2-查看事务的执行情况" class="headerlink" title="1.1.2 查看事务的执行情况"></a>1.1.2 查看事务的执行情况</h4><p><code>对于事务型的应用，通过 Com_commit 和 Com_rollback 可以了解事务提交和回滚的情况， 对于回滚操作非常频繁的数据库，可能意味着应用编写存在问题</code></p><ul><li>Com_commit: 事务提交的次数</li><li>Com_rollback: 事务回滚的次数</li></ul><h4 id="1-1-3-其他参数"><a href="#1-1-3-其他参数" class="headerlink" title="1.1.3 其他参数"></a>1.1.3 其他参数</h4><ul><li>Connections:试图连接 MySQL 服务器的次数</li><li>Uptime:服务器工作时间</li><li>Slow_queries:慢查询的次数</li></ul><h3 id="1-2-定位执行效率较低的-SQL-语句"><a href="#1-2-定位执行效率较低的-SQL-语句" class="headerlink" title="1.2 定位执行效率较低的 SQL 语句"></a>1.2 定位执行效率较低的 SQL 语句</h3><h4 id="1-2-1-慢日志"><a href="#1-2-1-慢日志" class="headerlink" title="1.2.1 慢日志"></a>1.2.1 慢日志</h4><ul><li>慢查询日志相关参数</li></ul><pre><code>slow_query_log：是否开启慢查询日志，1表示开启，0表示关闭。log_slow_queries  ：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.logslow_query_log_file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.loglong_query_time ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。默认10slog_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。log_output：日志存储方式。log_output=&#39;FILE&#39;表示将日志存入文件，默认值是&#39;FILE&#39;。log_output=&#39;TABLE&#39;表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=&#39;FILE,TABLE&#39;。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件。</code></pre><h3 id="1-3-explan分析SQL"><a href="#1-3-explan分析SQL" class="headerlink" title="1.3 explan分析SQL"></a>1.3 explan分析SQL</h3><p><a href="https://mrliuqh.github.io/2019/06/03/mysql-explan/">查看explan使用分析</a></p><h2 id="2-索引使用"><a href="#2-索引使用" class="headerlink" title="2 索引使用"></a>2 索引使用</h2><p><code>MySQL 中索引的存储类型目前只有两种(BTREE 和 HASH)，具体和表的存储引擎相关: MyISAM 和 InnoDB 存储引擎都只支持 BTREE 索引;MEMORY/HEAP 存储引擎可以支持 HASH 和 BTREE 索引</code></p><h3 id="2-1-索引类型"><a href="#2-1-索引类型" class="headerlink" title="2.1 索引类型"></a>2.1 索引类型</h3><h4 id="2-1-1-普通索引"><a href="#2-1-1-普通索引" class="headerlink" title="2.1.1 普通索引"></a>2.1.1 普通索引</h4><pre><code>-- 创建索引CREATE INDEX index_name ON table(column(length))-- 修改表结构的方式添加索引ALTER TABLE table_name ADD INDEX index_name ON (column(length))-- 删除索引DROP INDEX index_name ON table</code></pre><h4 id="2-1-2-唯一索引"><a href="#2-1-2-唯一索引" class="headerlink" title="2.1.2 唯一索引"></a>2.1.2 唯一索引</h4><pre><code>-- 创建索引REATE UNIQUE INDEX indexName ON table(column(length))-- 修改表结构的方式添加索引ALTER TABLE table_name ADD UNIQUE indexName ON (column(length))</code></pre><h4 id="2-1-3-全文索引（FULLTEXT）"><a href="#2-1-3-全文索引（FULLTEXT）" class="headerlink" title="2.1.3 全文索引（FULLTEXT）"></a>2.1.3 全文索引（FULLTEXT）</h4><blockquote><p>MySQL允许在char、varchar、text类型上建立全文索引,MySQL5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引</p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/35675553" target="_blank" rel="noopener">MySQL 之全文索引</a></p></blockquote><ul><li>MYISAM<pre><code>-- 创建表的适合添加全文索引CREATE TABLE `table` (`id` int(11) NOT NULL AUTO_INCREMENT ,`title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,`content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,`time` int(10) NULL DEFAULT NULL ,PRIMARY KEY (`id`),FULLTEXT (content));  -- 修改表结构添加全文索引ALTER TABLE table_name ADD FULLTEXT index_content(content)  -- 直接创建索引CREATE FULLTEXT INDEX index_content ON table_name(content)</code></pre></li><li>InnoDb</li></ul><p><a href="https://www.yangdx.com/2019/03/24.html" target="_blank" rel="noopener">MySQL中的全文索引（InnoDB存储引擎）</a></p><h4 id="2-1-4-联合索引-多列索引"><a href="#2-1-4-联合索引-多列索引" class="headerlink" title="2.1.4 联合索引(多列索引)"></a>2.1.4 联合索引(多列索引)</h4><pre><code>-- 联合索引创建create index indexName on table_name（column1，column2，..）</code></pre><p><code>为了说明联合索引的使用，设: key a_b_c (a,b,c)</code></p><h5 id="在and查询中"><a href="#在and查询中" class="headerlink" title="在and查询中"></a>在and查询中</h5><pre><code>-- 查询效率最高，索引全覆盖。select * from test where a=? and b=? and c=?-- 索引覆盖a和b。select * from test where a=? and b=?；-- 经过mysql的查询分析器的优化，索引覆盖a和b。select * from test where b=? and a=?；-- 索引覆盖aselect * from test where a=?；。-- 没有a列，不走索引，索引失效select * from test where b=? and c=?；。-- 没有a列，不走索引，索引失效。select * from test where c=?；</code></pre><blockquote><p>索引的最左匹配特性</p></blockquote><h5 id="在范围查询中"><a href="#在范围查询中" class="headerlink" title="在范围查询中"></a>在范围查询中</h5><pre><code>-- 索引覆盖a和b，因b列是范围查询，因此c列不能走索引。select * from test where a=? and b between ? and ? and c=?；-- a列走索引，因a列是范围查询，因此b列是无法使用索引。select * from test where a between ? and ? and b=?；-- a列走索引，因a列是范围查询，b列是范围查询也不能使用索引。select * from test where a between ? and ? and b between ? and ? and c=?；</code></pre><blockquote><p>索引查找遵循最左侧原则。但是遇到范围查询列之后的列索引失效。</p></blockquote><h5 id="在排序中"><a href="#在排序中" class="headerlink" title="在排序中"></a>在排序中</h5><pre><code>-- a、b、c三列全覆盖索引，查询效率最高。select * from test where a=? and b=? order by c；-- a、b列使用索引查找，因b列是范围查询，因此c列不能使用索引，会出现 file sort。select * from test where a=? and b between ? and ? order by c；</code></pre><h5 id="如何设置多列索引顺序"><a href="#如何设置多列索引顺序" class="headerlink" title="如何设置多列索引顺序"></a>如何设置多列索引顺序</h5><p><code>大部分采用经验法则来计算,但是针对特殊情况则不起作用，以下内容是由经验法则推演:</code></p><pre><code>mysql&gt; SELECT    COUNT( DISTINCT staff_id ) / COUNT( * ) AS staff_id_selectivity,    COUNT( DISTINCT customer_id ) / COUNT( * ) AS customer_id_selectivity,    COUNT( * ) FROM    payment;+-------------------------+----------------------+------------+| staff_id_selectivity | customer_id_selectivity | COUNT( * ) |+-------------------------+----------------------+------------+| 0.0001                  | 0.0373               |      16049 |+-------------------------+----------------------+------------+1 row in set (0.12 sec)</code></pre><blockquote><p>customer_id 选择性更高，所以索引顺序应该是:key indexName (customer_id,staff_id)</p></blockquote><h4 id="2-1-5-前缀索引"><a href="#2-1-5-前缀索引" class="headerlink" title="2.1.5 前缀索引"></a>2.1.5 前缀索引</h4><p>当要索引的列字符很多时,索引则会很大且变慢。而前缀索引可以只索引列开始的部分字符串,节约索引空间,从而提高索引效率。</p><h5 id="前缀索引长度"><a href="#前缀索引长度" class="headerlink" title="前缀索引长度"></a>前缀索引长度</h5><p>计算前缀索引长度中的一个办法就是计算完整列的选择性，并使前缀的选择性接近于完整的选择性(1),下面计算显示如何计算完整列的选择性</p><pre><code>-- desc 字段为 text mysql&gt; SELECT    COUNT( DISTINCT LEFT ( desc, 3 ) ) / count( * ) AS sel3,    COUNT( DISTINCT LEFT ( desc, 6 ) ) / count( * ) AS sel6,    COUNT( DISTINCT LEFT ( desc, 9 ) ) / count( * ) AS sel9,    COUNT( DISTINCT LEFT ( desc, 12 ) ) / count( * ) AS sel12,    COUNT( DISTINCT LEFT ( desc, 36 ) ) / count( * ) AS sel36 FROM    study;+--------+--------+--------+--------+--------+| sel3   | sel6   | sel9   | sel12  | sel36  |+--------+--------+--------+--------+--------+| 0.1585 | 0.3432 | 0.4091 | 0.4304 | 0.4401 |+--------+--------+--------+--------+--------+1 row in set (0.02 sec)-- 建立前缀索引alter table study add key (desc(12))</code></pre><p><code>由上述可以看出，当达到前缀长度12，在增加前缀长度，选择性提升的幅度已经很小了。所以可以设置key的长度为12</code></p><h5 id="前缀索引优点"><a href="#前缀索引优点" class="headerlink" title="前缀索引优点"></a>前缀索引优点</h5><ul><li>前缀索引是一种能使索引更小、更快的有效办法;</li></ul><h5 id="前缀索引缺点"><a href="#前缀索引缺点" class="headerlink" title="前缀索引缺点"></a>前缀索引缺点</h5><ul><li>无法使用前缀索引做order by 和 group by,</li><li>无法使用前缀索引覆盖扫描</li></ul><h3 id="2-2-使用到索引的场景"><a href="#2-2-使用到索引的场景" class="headerlink" title="2.2 使用到索引的场景"></a>2.2 使用到索引的场景</h3><ul><li><p>对于联合索引，只要查询的条件中用到了最左边的列，索引一般才会被使用（最左原则）。</p></li><li><p>对于使用 like 的查询，使用【n%】能用到索引，而【%n】不能用到索引。</p></li><li>对于大的文本进行搜索，使用全文索引而不用使用 like ‘%…%’</li><li>对于column_name是索引，使用column_name is null将使用索引。</li></ul><h3 id="2-3-存在索引但不使用索引"><a href="#2-3-存在索引但不使用索引" class="headerlink" title="2.3 存在索引但不使用索引"></a>2.3 存在索引但不使用索引</h3><ul><li><p>如果 MySQL 估计使用索引比全表扫描更慢，则不使用索引</p></li><li><p>如果使用 MEMORY/HEAP(存储引擎) 表并且 where 条件中不使用“=”进行索引列，那么 不会用到索引。heap 表只有在“=”的条件下才会使用索引</p></li><li><p>如果用 or 分割开的条件，如: A or B, 若A、B 中有一个没有索引，则不会使用到索引</p></li><li><p>如果是联合索引，在没有用到最左边列情况下，则不会使用索引。</p></li><li><p>如果使用 like ,是以%开始【%n】不能用到索引</p></li><li>如果列类型是字符串，那么查询时需要用把字符常量值用引号引起来，否则的话即便这个列上有索引,也不会使用。</li></ul><pre><code>-- 假如 number 字段有索引，并且是字符串字段-- 会使用到索引select * FROM study WHERE number= &#39;12&#39;-- 不会使用到索引select * FROM study WHERE number= 12</code></pre><ul><li>如果where条件中使用表达式则也不会用到索引</li></ul><pre><code>-- 不会使用到索引select * from test where id + 1 =7  -- 会使用到索引select * from test where id=6  </code></pre><h3 id="2-4-查看索引使用情况"><a href="#2-4-查看索引使用情况" class="headerlink" title="2.4 查看索引使用情况"></a>2.4 查看索引使用情况</h3><pre><code>mysql&gt; show global status like &#39;handler_read%&#39;;+-----------------------+------------+| Variable_name         | Value      |+-----------------------+------------+| Handler_read_first    | 2147391    || Handler_read_key      | 448430738  || Handler_read_last     | 14857      || Handler_read_next     | 1056940046 || Handler_read_prev     | 1753960    || Handler_read_rnd      | 46990892   || Handler_read_rnd_next | 239392047  |+-----------------------+------------+7 rows in set (0.03 sec)</code></pre><ul><li>Handler_read_key:代表了一个行被索引值读的 次数，很低的值表明增加索引得到的性能改善不高，因为索引并不经常使用</li><li>Handler_read_rnd_next:代表在数据文件中读下一行的请求数。如果正进行大量的表扫描，其值较高，则通常说明表索引不正确或写入的查询没有利用索引。（值越高就意味着查询运行低效，应建立索引补救）</li></ul><p><a href="https://jin-yang.github.io/post/mysql-handler.html" target="_blank" rel="noopener">更多内容查看:MySQL Handler 监控</a></p><h2 id="3-MySQL优化特定类型的查询"><a href="#3-MySQL优化特定类型的查询" class="headerlink" title="3 MySQL优化特定类型的查询"></a>3 MySQL优化特定类型的查询</h2><h3 id="3-1-优化关联查询"><a href="#3-1-优化关联查询" class="headerlink" title="3.1 优化关联查询"></a>3.1 优化关联查询</h3><ol><li><p>确保ON或者USING子句中的列上有索引。在创建索引的时候需要考虑到关联的顺序。当表A和表B用列c关联的时候，如果优化器的关联顺序是B、A，那么就不需要在B表的对应列上建索引。除非有其他理由，否则只需要在关联顺序的第二个表的对应列上创建索引，没有用的索引只会带来额外的负担。</p></li><li><p>确保任何的GROUP BY 和 ORDER BY 中的表达式只涉及一个表中的列，这样MySQL才有可能使用索引来优化这个过程。</p></li><li><p>当升级MySQL的时候需要注意：关联语法、运算符优先级等其他可能会发生变化的地方。因为以前是普通关联的地方可能会变成笛卡尔积，不同类型的关联可能会生成不同的结果等。</p></li></ol><h3 id="3-2-优化INSERT语句"><a href="#3-2-优化INSERT语句" class="headerlink" title="3.2 优化INSERT语句"></a>3.2 优化INSERT语句</h3><ul><li><p>如果同时从同一客户插入很多行，尽量使用多个值表的 INSERT 语句，这种方式将大大<br>缩减客户端与数据库之间的连接、关闭等消耗，使得效率比分开执行的单个 INSERT 语 句快(在一些情况中几倍)。<br>下面是一次插入多值的一个例子:</p><pre><code>insert into test values(1,2),(1,3),(1,4)...</code></pre></li><li><p>如果从不同客户插入很多行，能通过使用 INSERT DELAYED 语句得到更高的速度。 DELAYED 的含义是让 INSERT 语句马上执行，其实数据都被放在内存的队列中，并没有 真正写入磁盘，这比每条语句分别插入要快的多;LOW_PRIORITY 刚好相反，在所有其 他用户对表的读写完后才进行插入。</p></li><li><p>将索引文件和数据文件分在不同的磁盘上存放(利用建表中的选项)。</p></li><li>如果进行批量插入，可以增加 bulk_insert_buffer_size 变量值的方法来提高速度，但是，这只能对 MyISAM 表使用。</li><li>当从一个文本文件装载一个表时，使用 LOAD DATA INFILE。这通常比使用很多 INSERT 语句快 20 倍。</li></ul><h3 id="3-3-优化GROUP-BY-语句"><a href="#3-3-优化GROUP-BY-语句" class="headerlink" title="3.3 优化GROUP BY 语句"></a>3.3 优化GROUP BY 语句</h3><p>默认情况下，MySQL 对所有 GROUP BY col1，col2….的字段进行排序。这与在查询中指定 ORDER BY col1，col2…类似。因此，如果显式包括一个包含相同的列的 ORDER BY 子句，则 对 MySQL 的实际执行性能没有什么影响。</p><p>如果查询包括 GROUP BY 但用户想要避免排序结果的消耗，则可以指定 ORDER BY NULL 禁止排序，<br>如下面的例子:</p><pre><code>-- 未指定 ORDER BY NULL mysql&gt; EXPLAIN SELECT tfid,tfMedicalNum from ins_treatment_file GROUP BY tfName;+----+-------------+--------------------+------+---------------+------+---------+------+-------+---------------------------------+| id | select_type | table              | type | possible_keys | key  | key_len | ref  | rows  | Extra                           |+----+-------------+--------------------+------+---------------+------+---------+------+-------+---------------------------------+|  1 | SIMPLE      | ins_treatment_file | ALL  | NULL          | NULL | NULL    | NULL | 12133 | Using temporary; Using filesort |+----+-------------+--------------------+------+---------------+------+---------+------+-------+---------------------------------+1 row in set (0.01 sec)-- 指定 ORDER BY NULL  mysql&gt; EXPLAIN SELECT tfid,tfMedicalNum from ins_treatment_file GROUP BY tfName ORDER BY NULL;+----+-------------+--------------------+------+---------------+------+---------+------+-------+-----------------+| id | select_type | table              | type | possible_keys | key  | key_len | ref  | rows  | Extra           |+----+-------------+--------------------+------+---------------+------+---------+------+-------+-----------------+|  1 | SIMPLE      | ins_treatment_file | ALL  | NULL          | NULL | NULL    | NULL | 12133 | Using temporary |+----+-------------+--------------------+------+---------------+------+---------+------+-------+-----------------+1 row in set (0.02 sec)</code></pre><blockquote><p>从上面的例子可以看出第一个 SQL 语句需要进行“filesort”，而第二个 SQL 由于 ORDER BY NULL 不需要进行“filesort”，而 filesort 往往非常耗费时间</p></blockquote><h3 id="3-4-优化ORDER-BY-语句"><a href="#3-4-优化ORDER-BY-语句" class="headerlink" title="3.4 优化ORDER BY 语句"></a>3.4 优化ORDER BY 语句</h3><p>在某些情况中，MySQL 可以使用一个索引来满足 ORDER BY 子句，而不需要额外的排序。</p><ul><li>WHERE 条件和 ORDER BY 使用相同的索引</li><li>ORDER BY 的顺序和索引顺序相同(联合索引)，</li><li>ORDER BY 的字段都是升序或者都是降序。</li></ul><pre><code>-- 可以使用索引SqlSELECT * FROM t1 ORDER BY key_part1,key_part2,... ;SELECT * FROM t1 WHERE key_part1=1 ORDER BY key_part1 DESC, key_part2 DESC; SELECT * FROM t1 ORDER BY key_part1 DESC, key_part2 DESC;-- 以下几种情况下则不使用索引-- 原因:order by 的字段混合 ASC 和 DESCSELECT * FROM t1 ORDER BY key_part1 DESC, key_part2 ASC; -- 原因:用于查询行的关键字与 ORDER BY 中所使用的不相同SELECT * FROM t1 WHERE key2=constant ORDER BY key1;-- 原因: 对不同的关键字使用 ORDER BYSELECT * FROM t1 ORDER BY key1, key2; </code></pre><h3 id="3-5-优化LIMIT-分页"><a href="#3-5-优化LIMIT-分页" class="headerlink" title="3.5 优化LIMIT 分页"></a>3.5 优化LIMIT 分页</h3><p>在系统中需要进行分页操作的时候，我们通常会使用LIMIT 加上偏移量的方法实现，同时加上合适的ORDER BY 子句。如果有对应的索引，通常效率会不错，否则，MySQL需要做大量的文件排序操作。</p><p>但是有一个非常常见又头疼的问题就是，在偏移量非常大的时候，例如可能是 LIMIT 10000,20这样的查询，此时MySQL需要查询10020 条记录并只返回最后的20条，这样的代价非常高。</p><p>如果所有的页面被访问的频率都相同，那么这样的查询平均需要访问半个表的数据。要优化这种查询，要么是在页面中限制分页的数量，要么是优化大偏移量的性能。</p><p>优化此类分页查询的一个最简单的办法就是尽可能地使用索引覆盖扫描，而不是查询所有的列。然后根据需要做一次关联操作最后返回所需要的列。对于偏移量很大的时候，这样做的效率会提高很多。考虑下面这个查询：</p><pre><code>SELECT file_id, description FROM sakila.film ORDER BY title LIMTI 50, 5;</code></pre><p>如果这个表很大，最好可以将这个查询修改成下面这个样子：</p><pre><code>SELECT    flim.file_id,    flim.description FROM sakila.film    INNER JOIN (      SELECT film_id FROM sakila.film ORDER BY title LIMIT 50,5     ) AS flim USING(film_id)</code></pre><p>这里的“延迟关联”将大大提高查询效率，它让MySQL扫描尽可能少的页面，获取需要访问的记录后再根据关联列回原表查询所需要的所有列。这个技术也可以用于优化关联查询中的LIMIT子句。</p><p><code>还有另外一种优化的方法，就是使用应用程序记录上次数据的位置，在下次查询时就可以直接从该记录的位置开始扫描，这样就避免了使用OFFSET。使用这样的方法可以将其变成一个范围查询，无论翻页到多后面，其性能都会很好。</code></p><h3 id="3-6-优化-OR-条件"><a href="#3-6-优化-OR-条件" class="headerlink" title="3.6 优化 OR 条件"></a>3.6 优化 OR 条件</h3><p>对于含有 OR 的查询子句，如果要利用索引，则 OR 之间的每个条件列都必须用到索引; 如果没有索引，则应该考虑增加索引</p><blockquote><p>如: A or B, 若A、B 中有一个没有索引，则不会使用到索引</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置调优</title>
      <link href="/2019/03/28/nginx-optimization/"/>
      <url>/2019/03/28/nginx-optimization/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-nginx-conf-配置文件"><a href="#1-nginx-conf-配置文件" class="headerlink" title="1. nginx.conf 配置文件"></a>1. nginx.conf 配置文件</h2><pre><code>#运行的用户user www-data;pid /var/run/nginx.pid;#定义了nginx对外提供web服务时的worder进程数，CPU核的数量、存储数据的硬盘数量及负载模式worker_processes auto; #更改worker进程的最大打开文件数限制,比&#39;ulimit -a&#39;多。解决&quot;too many open files&quot;worker_rlimit_nofile 100000; events {    #worker进程同时打开的最大连接数    worker_connections 65536;     #当收到一个新连接通知后接受尽可能多的连接    multi_accept on;     #设置用于复用客户端线程的轮询方法,epoll需要linux2.6+    use epoll; }http {    access_log off; #设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)    error_log /var/log/nginx/error.log crit; #告诉nginx只能记录严重的错误  #HTTP和TCP优化    keepalive_timeout 10; #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接    keepalive_requests 1024;#限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接。    tcp_nopush on; #在一个数据包里发送所有头文件，而不一个接一个的发送    tcp_nodelay on; #nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。  #Buffers size优化    client_body_buffer_size  128k;#处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。128k通常是此设置的不错选择。    client_max_body_size  10m;#置最大body缓冲区大小。如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查    client_header_buffer_size    1k; #处理客户端头大小。 默认情况下，1k通常是一个合理的选择。    large_client_header_buffers  4 4k; #设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。    output_buffers  1 32k;#置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。零值禁止推迟数据传输。    postpone_output  1460;#指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值   #超时    client_header_timeout 10; #设置请求头超时时间，建议低    client_body_timeout 10; #请求体(各自)的超时时间    reset_timedout_connection on; #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间    send_timeout 10; #指定客户端的响应超时时间  #静态资源服务    open_file_cache max=100000 inactive=20s; #打开缓存的同时也指定了缓存最大数目，以及缓存的时间    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间    open_file_cache_min_uses 2; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件  #Gzip压缩内容    gzip on; #开启gzip压缩    gzip_disable &quot;msie6&quot;; #低版本兼容    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求    gzip_static on; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源    gzip_min_length 1000; #设置对数据启用压缩的最少字节数    gzip_comp_level 6; #压缩级别,1-10越高越消耗CPU，但是压缩越好    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式  #其他优化    limit_conn_zone $binary_remote_addr zone=addr:5m; #设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。    limit_conn addr 100; #给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。    server_tokens off; #关闭nginx版本号    sendfile on; #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)    default_type text/html; #设置文件默认MIME-type    include /etc/nginx/mime.types; #只是一个在当前文件中包含另一个文件内容的指令。    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;}</code></pre><h2 id="2-nginx-pid文件"><a href="#2-nginx-pid文件" class="headerlink" title="2.nginx.pid文件"></a>2.nginx.pid文件</h2><h3 id="2-1-什么是-var-run-nginx-pid文件"><a href="#2-1-什么是-var-run-nginx-pid文件" class="headerlink" title="2.1 什么是 var/run/nginx.pid文件?"></a>2.1 什么是 var/run/nginx.pid文件?</h3><a id="more"></a><p> var/run这个目录包含描述系统启动以来系统信息的数据。此文件夹下的文件必须在启动过程初期清除（删除或归零）。程序可以在/var/run下有自己的子文件夹。原先放在/etc下的进程标识（PID）文件必须放在/var/run里面。PID文件的命名惯例是<program-name>.pid。所以，nginx的PID文件名为/var/run/nginx.pid。</program-name></p><p><code>nginx.pid存放的是nginx的master进程的进程号。</code></p><h3 id="2-2-nginx启动报错找不到nginx-pid"><a href="#2-2-nginx启动报错找不到nginx-pid" class="headerlink" title="2.2 nginx启动报错找不到nginx.pid"></a>2.2 nginx启动报错找不到nginx.pid</h3><p><code>nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code></p><pre><code>[root@localhost nginx]# nginx -c /usr/local/nginx/conf/nginx.conf</code></pre><h2 id="3-Worker-Processess-说明"><a href="#3-Worker-Processess-说明" class="headerlink" title="3.Worker Processess 说明"></a>3.Worker Processess 说明</h2><p><code>通常来说设置一个cpu核心对应一个worker processer，最多不超过4个，提高worker process的值是为了提高计算能力，但一般在越到cpu瓶颈前，你会遇到别的瓶颈(如网络问题)只有当你要处理大量静态文件的磁盘I/O时，worker进程是单线程的，所以这个读取文件的阻塞IO会降低CPU的处理速度，这是可以增加worker进程数量，其它情况是不需要的。</code></p><pre><code>//一般设置为:auto# worker_processes auto;//如果你想手动设置，你可以使用以下命令行查找服务器的cpu线程数。# grep ^processor /proc/cpuinfo | wc -l</code></pre><h2 id="4-Worker进程连接数优化-worker-connections"><a href="#4-Worker进程连接数优化-worker-connections" class="headerlink" title="4.Worker进程连接数优化(worker_connections)"></a>4.Worker进程连接数优化(worker_connections)</h2><p><code>worker_connections选项设置每个worker进程一次可以处理的最大连接数。 默认情况下，worker连接限制为512，但系统可以处理比这值更多的连接。适当的值可以通过测试得出。</code></p><blockquote><p>系统的核心限制也可以通过使用ulimit找到</p></blockquote><pre><code># ulimit -n</code></pre><h2 id="5-HTTP和TCP优化"><a href="#5-HTTP和TCP优化" class="headerlink" title="5.HTTP和TCP优化"></a>5.HTTP和TCP优化</h2><h3 id="5-1-Keep-Alive-减少浏览器重新连接的次数"><a href="#5-1-Keep-Alive-减少浏览器重新连接的次数" class="headerlink" title="5.1 Keep Alive:减少浏览器重新连接的次数"></a>5.1 Keep Alive:减少浏览器重新连接的次数</h3><ul><li>keepalive_timeout和keepalive_requests 控制保持活动设置。</li><li>sendfile 优化Nginx提供文件系统的静态文件服务的性能，如logo。</li><li>tcp_nodelay 允许Nginx使TCP发送多个缓冲区作为单独的数据包。</li><li>tcp_nopush 通过激活TCP堆栈中的TCP_CORK选项来优化一次向下游发送的数据量。TCP_CORK阻塞数据，直到分组到达MSS，这等于MTU减去IP报头的40或60字节。</li></ul><h3 id="5-2-服务处于TIME-WAIT-状态的-TCP-连接数异常的原因"><a href="#5-2-服务处于TIME-WAIT-状态的-TCP-连接数异常的原因" class="headerlink" title="5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因"></a>5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因</h3><blockquote><p>keepalive_requests 参数限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接</p></blockquote><p><code>而我并没有配置 keepalive_requests，所以，就是使用的默认数 100，即一个长连接只能处理一百个请求，然后 Nginx 就就会主动关闭连接，使大量连接处于 TIME_WAIT 状态</code></p><h2 id="6-Buffers-size优化"><a href="#6-Buffers-size优化" class="headerlink" title="6. Buffers size优化"></a>6. Buffers size优化</h2><p><code>调整缓冲区大小可能是有利的。 如果缓冲区大小太低，那么Nginx将写入一个临时文件。 这将导致过多的磁盘I/O。</code></p><ul><li>client_body_buffer_size 处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。 128k通常是此设置的不错选择。</li><li>client_max_body_size 设置最大body缓冲区大小。 如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查。</li><li>client_header_buffer_size 处理客户端头大小。 默认情况下，1k通常是一个合理的选择。</li><li>large_client_header_buffers 设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。</li><li>output_buffers 设置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。 零值禁止推迟数据传输。</li></ul><h2 id="7-超时设置"><a href="#7-超时设置" class="headerlink" title="7. 超时设置"></a>7. 超时设置</h2><p><code>超时设置还可以大幅提高性能。</code></p><ul><li>client_body_timeout 指令设置服务器等待客户端完成发送body的最大时间。</li><li>client_header_timeout 指令设置服务器等待客户端完成发送header的最大时间。</li><li>sent_timeout 指定对客户端的响应超时。 此超时不适用于整个传输，而是仅应用于两个后续的客户端读取操作之间。 因此，如果客户端没有读取任何数据这段时间，那么Nginx关闭连接。</li></ul><h2 id="8-静态资源服务"><a href="#8-静态资源服务" class="headerlink" title="8.静态资源服务"></a>8.静态资源服务</h2><p><code>如果您的网站提供静态资源（如CSS/JavaScript/images），Nginx可以缓存这些文件很短的时间。</code></p><pre><code>#告诉Nginx缓存1000个文件30秒，不包括在20秒内未被访问的任何文件open_file_cache max=100000 inactive=20s; #在open_file_cache中指定检测正确信息的间隔时间open_file_cache_valid 30s; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数open_file_cache_min_uses 2; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件open_file_cache_errors on; </code></pre><blockquote><p>还可以缓存特定位置的资源,缓存文件很长时间是有好处的。如放在具体某个服务配置中..</p><pre><code>location ~* .(woff|eot|ttf|svg|mp4|webm|jpg|jpeg|png|gif|ico|css|js)$ {    expires 365d;}</code></pre></blockquote><h2 id="9-Gzip压缩内容"><a href="#9-Gzip压缩内容" class="headerlink" title="9.Gzip压缩内容"></a>9.Gzip压缩内容</h2><pre><code>#开启gzip压缩gzip on; #低版本兼容gzip_disable &quot;msie6&quot;; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求gzip_proxied any; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源gzip_static on; #设置对数据启用压缩的最少字节数gzip_min_length 1000; #压缩级别,1-10越高越消耗CPU，但是压缩越好gzip_comp_level 6; #设置需要压缩的数据格式gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; </code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向链表、循环链</title>
      <link href="/2019/03/27/Lisked-List-two/"/>
      <url>/2019/03/27/Lisked-List-two/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-什么是双向链表"><a href="#1-什么是双向链表" class="headerlink" title="1. 什么是双向链表?"></a>1. 什么是双向链表?</h3><blockquote><p>双向链表(双链表)又叫双面链表,双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。</p></blockquote><p><code>由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在数组里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。</code></p><p><img src="https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list_two.png" alt="双向链表图"></p><a id="more"></a><h3 id="2-什么是循环链表"><a href="#2-什么是循环链表" class="headerlink" title="2. 什么是循环链表?"></a>2. 什么是循环链表?</h3><blockquote><p>循环链表指的是首节点和末节点被连接在一起的链表，这种方式在单向和双向链表中皆可实现。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理。<br><img src="https://mrliuqh.github.io/directionsImg/dataStructure/cycle_list.png" alt="循环链表图"></p></blockquote><h3 id="3-单向链表与双向链表优缺点"><a href="#3-单向链表与双向链表优缺点" class="headerlink" title="3. 单向链表与双向链表优缺点"></a>3. 单向链表与双向链表优缺点</h3><h4 id="3-1-单向链表"><a href="#3-1-单向链表" class="headerlink" title="3.1 单向链表"></a>3.1 单向链表</h4><p><strong>优点：</strong></p><ul><li>单向链表增加删除节点简单。遍历时候不会死循环。（双向也不会死循环，循环链表忘了进行控制的话很容易进入死循环）</li></ul><p><strong>缺点：</strong></p><ul><li>只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。</li></ul><h4 id="3-2-双向链表"><a href="#3-2-双向链表" class="headerlink" title="3.2 双向链表"></a>3.2 双向链表</h4><p><strong>优点：</strong></p><ul><li>可以找到前驱和后继，可进可退。</li></ul><p><strong>缺点：</strong></p><ul><li>增加删除节点复杂（其实就复杂一点点）</li></ul><h3 id="4-代码（PHP）实现双向链表"><a href="#4-代码（PHP）实现双向链表" class="headerlink" title="4. 代码（PHP）实现双向链表"></a>4. 代码（PHP）实现双向链表</h3><pre><code class="php">&lt;?php/** * Class Node */class Node{    /**     *     * @var     */    private $Data;//数据集    /**     *     * @var     */    private $Prev;//上一个节点    /**     *     * @var     */    private $Next;//下一个节点    /**     * Node constructor.     * @param $next     * @param $data     * @param $prev     */    public function __construct($data, $next,$prev)    {        $this-&gt;setData($data);        $this-&gt;setNext($next);        $this-&gt;setPrev($prev);    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param $data     */    public function setData($data)    {        $this-&gt;Data = $data;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @return mixed     */    public function getData()    {        return $this-&gt;Data;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param $next     */    public function setNext($next)    {        $this-&gt;Next = $next;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @return mixed     */    public function getNext()    {        return $this-&gt;Next;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param $prev     */    public function setPrev($prev)    {        $this-&gt;Prev = $prev;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @return mixed     */    public function getPrev()    {        return $this-&gt;Prev;    }}/** * Class LinkList */class LinkList{    /**     *     * @var     */    private $header;    /**     *     * @var     */    private $len;//链表长度    /**     * LinkList constructor.     */    public function __construct()    {        //初始化根节点        $this-&gt;setHeader(new Node(null, null,null));        $this-&gt;len = 0;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param Node $node     */    public function setHeader(Node $node)    {        $this-&gt;header = $node;    }    /**     *  Functional description : 获取头部节点     *  Programmer : Mr.Liu     * @return Node     */    public function getHeader()    : Node    {        return $this-&gt;header;    }    /**     *  Functional description : 获取链表长度     *  Programmer : Mr.Liu     * @return mixed     */    public function getLen()    : int    {        return $this-&gt;len;    }    /**     *  Functional description : 末尾追加     *  Programmer : Mr.Liu     * @param $data     */    public function append($data)    {        $node = $this-&gt;getHeader();        //查找没有子节点的节点        while ($node-&gt;getNext() != null) {            $node = $node-&gt;getNext();        }        //找到后设置其下级节点        $node-&gt;setNext(new Node($data, null,$node));        //链表长度递增        $this-&gt;len++;    }    /**     *  Functional description : 头部添加     *  Programmer : Mr.Liu     * @param $data     */    public function addFirst($data){        $rootNode = $this-&gt;getHeader();        //查找没有子节点的节点(根节点)        while ($rootNode-&gt;getPrev() != null) {            $rootNode = $rootNode-&gt;getPrev();        }        //Root-A-B-C Root-D-A-B-C        $oldFirst = $rootNode-&gt;getNext();        $newFirst = new Node($data,$oldFirst,$rootNode);        $oldFirst-&gt;setPrev($newFirst);        $rootNode-&gt;setNext($newFirst);        $this-&gt;len++;    }    /**     *  Functional description : 根据指定位置添加     *  Programmer : Mr.Liu     * @param int $index     * @param $data     */    public function insertByIndex(int $index,$data){        $key = 1;        //尾部添加        if ($this-&gt;getLen() &lt; $index){            $this-&gt;append($data);            return;        }        //头部添加        if ($index == 1){            $this-&gt;addFirst($data);            return;        }        $node = $this-&gt;getHeader();        while ($key &lt; $index){            $node = $node-&gt;getNext();            $key++;        }        //中间添加 如：添加D到A和B之间 A-B-C  ---&gt; A-D-B-C        $node-&gt;setNext(new Node($data,$node-&gt;getNext(),$node));        $this-&gt;len++;    }    /**     *  Functional description : 删除第一个节点     *  Programmer : Mr.Liu     */    public function delFirst(){        $rootNode = $this-&gt;getHeader();        while ($rootNode-&gt;getPrev() !=null){            $rootNode = $rootNode-&gt;getPrev();        }        //删除：ROOT-A-B-C  --&gt;  ROOT-B-C        $firstNode = $rootNode-&gt;getNext();        $secondNode = $firstNode-&gt;getNext();        $rootNode-&gt;setNext($secondNode);        $secondNode-&gt;setPrev($rootNode);        $this-&gt;len--;    }    /**     *  Functional description : 删除最后一个节点     *  Programmer : Mr.Liu     */    public function delLast(){        $node = $this-&gt;getHeader();        while ($node-&gt;getNext() !=null){            $node = $node-&gt;getNext();        }        //删除：ROOT-A-B-C  --&gt;  ROOT-A-B        $newLastNode = $node-&gt;getPrev();        $newLastNode-&gt;setNext(null);        $this-&gt;len--;    }    /**     *  Functional description : 反转双向链表     *  Programmer : Mr.Liu     * @return void     */    public function reverse(){        if ($this-&gt;getHeader() != null){            return ;        }        //除去根节点后的节点        $currentNode = $this-&gt;getHeader()-&gt;getNext();        //后一个节点        $next=null;        $prev=null;//根节点,当前为null        //rootNode-&gt;0-&gt;1-&gt;2-&gt;3 --&gt;  3-&gt;2-&gt;1-&gt;0        //查找最后一个        while ($currentNode != null){            //用一个变量暂时存储后一节点，因为一旦前面反转，就断链了            $next = $currentNode-&gt;getNext();            //将前一节点作为当前节点的后一节点，是为反转            $currentNode-&gt;setNext($prev);            $currentNode-&gt;setPrev($next);            #指针后移            $prev = $currentNode;            $currentNode = $next;        }        return $prev;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向链表</title>
      <link href="/2019/03/25/Linked-List/"/>
      <url>/2019/03/25/Linked-List/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-什么是链表"><a href="#1-什么是链表" class="headerlink" title="1. 什么是链表?"></a>1. 什么是链表?</h3><blockquote><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表<a href="https://zh.wikipedia.org/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8" target="_blank" rel="noopener">顺序表</a>快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p></blockquote><h3 id="2-链表的组成部分"><a href="#2-链表的组成部分" class="headerlink" title="2. 链表的组成部分"></a>2. 链表的组成部分</h3><blockquote><p>链表通常由一连串节点组成，每个节点包含任意的实例数据（信息域 ）和一或两个用来指向上一个/或下一个节点的位置的链接（链域）</p></blockquote><a id="more"></a><h3 id="3-数组和链"><a href="#3-数组和链" class="headerlink" title="3. 数组和链"></a>3. 数组和链</h3><ul><li>链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理</li></ul><h3 id="4-数组与链表的优缺点"><a href="#4-数组与链表的优缺点" class="headerlink" title="4. 数组与链表的优缺点"></a>4. 数组与链表的优缺点</h3><ol><li>存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；</li><li>存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　</li><li>存储空间上，链表由于带有指针域，存储密度不如数组大；　</li><li>按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；　</li><li>按值查找时，若数组无序，数组和链表时间复杂度均为O(n)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；</li><li>插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；</li><li>空间分配方面：<blockquote><p>数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败；<br>　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效； </p></blockquote></li><li>经典数据结构涵盖了多种抽象数据类型（ADT），其中包括栈、队列、有序列表、排序表、哈希表及分散表、树、优先队列、集合和图等。对于每种情况，都可以选用数组或某一种链表数据结构来实现其抽象数据类型（ADT）。由于数组和链表几乎是建立所有ADT的基础，所以称数组与链表为基本数据结构</li></ol><h3 id="5-链表类型"><a href="#5-链表类型" class="headerlink" title="5. 链表类型"></a>5. 链表类型</h3><ul><li>单向链表</li><li><a href="">双向链表</a></li><li><a href="">循环链表</a></li></ul><h3 id="6-单向链表"><a href="#6-单向链表" class="headerlink" title="6. 单向链表"></a>6. 单向链表</h3><blockquote><p>链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。</p></blockquote><p><code>一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。</code></p><p><img src="https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list.png" alt="单向链表图"></p><h3 id="7-代码（PHP）实现单向链表"><a href="#7-代码（PHP）实现单向链表" class="headerlink" title="7. 代码（PHP）实现单向链表"></a>7. 代码（PHP）实现单向链表</h3><pre><code class="php">&lt;?php/** * Class Node */class Node{    /**     *     * @var     */    private $Data;//数据集    /**     *     * @var     */    private $Next;//下一个节点    /**     * Node constructor.     * @param $next     * @param $data     */    public function __construct($data, $next)    {        $this-&gt;setData($data);        $this-&gt;setNext($next);    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param $data     */    public function setData($data)    {        $this-&gt;Data = $data;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @return mixed     */    public function getData()    {        return $this-&gt;Data;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param $next     */    public function setNext($next)    {        $this-&gt;Next = $next;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @return mixed     */    public function getNext()    {        return $this-&gt;Next;    }}/** * Class LinkList */class LinkList{    /**     *     * @var     */    private $header;//链表头部信息    /**     *     * @var     */    private $len;//链表长度    /**     * LinkList constructor.     */    public function __construct()    {        $this-&gt;setHeader(new Node(null, null));        $this-&gt;len = 0;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param Node $node     */    public function setHeader(Node $node)    {        $this-&gt;header = $node;    }    /**     *  Functional description : 获取当前节点     *  Programmer : Mr.Liu     * @return Node     */    public function getHeader()    : Node    {        return $this-&gt;header;    }    /**     *  Functional description : 获取链表长度     *  Programmer : Mr.Liu     * @return mixed     */    public function getLen()    : int    {        return $this-&gt;len;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param $data     */    public function add(string $data)    {        $node = $this-&gt;getHeader();        //查找没有子节点的节点        while ($node-&gt;getNext() != null) {            $node = $node-&gt;getNext();        }        //找到后设置其下级节点        $node-&gt;setNext(new Node($data, null));        //链表长度递增        $this-&gt;len++;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * @param Node $currentNode     * @param Node $prevNode     *     * 示例：A-B-C ==&gt; A-C     * @return bool     */    private function delLink(Node $currentNode, Node $prevNode)    {        $prevNode-&gt;setNext($currentNode-&gt;getNext());        $this-&gt;len--;        return true;    }    /**     *  Functional description : 根据节点的数据进行删除     *  Programmer : Mr.Liu     * @param $data     */    public function delByData($data)    {        $node     = $this-&gt;getHeader();        $prevNode = $node;        //查找没有数据一致的节点        while ($node-&gt;getData() != $data) {            $prevNode = $node;            $node     = $node-&gt;getNext();        }        //删除(把要删的节点A下的子节点位置移到A节点，从而删除)        $this-&gt;delLink($node, $prevNode);    }    /**     *  Functional description : 删除第一个节点0~N     *  Programmer : Mr.Liu     * @param int $index     * @return bool     */    public function delByIndex(int $index)    {        $node = $prevNode = $this-&gt;getHeader();        $i    = 0;        if ($i &gt; $this-&gt;getLen() -1 ){            //节点超            return false;        }        while ($i != $index) {            if ($node-&gt;getNext() == null) {                return false;            }            $prevNode = $node;            $node     = $node-&gt;getNext();            $i++;        }        return $this-&gt;delLink($node, $prevNode);    }    /**     *  Functional description : 获取链表上所有数据     *  Programmer : Mr.Liu     * @return array     */    public function getLinkData()    {        $node = $this-&gt;getHeader();        $list = [];        //根节点处理        if ($node-&gt;getData() != null) {            $list[] = $node-&gt;getData();        }        //从下一个节点开始获取数据        $node = $node-&gt;getNext();        if ($node-&gt;getData() == null) {            return $list;        }        while ($node-&gt;getData() != null &amp;&amp; $node-&gt;getNext() != null) {            $list[] = $node-&gt;getData();            $node   = $node-&gt;getNext();        }        return $list;    }    /**     *  Functional description :     *  Programmer : Mr.Liu     * 添加D到1示例：A-B-C ==&gt; A-D-B-C     * @param int $index     * @param string $data     * @return bool     */    public function addByIndex(int $index,string $data){        $node  = $this-&gt;getHeader();        $i=0;        while ($i != $index){            if ($node-&gt;getNext() == null) {                return false;            }            $node = $node-&gt;getNext();            $i++;        }        //进行添加        $node-&gt;setNext(new Node($data,$node-&gt;getNext()));        $this-&gt;len++;        return true;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP并发请求</title>
      <link href="/2019/03/22/multiRequest/"/>
      <url>/2019/03/22/multiRequest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><front color="red">进程是资源分配的最小单位，线程是CPU调度的最小单位</front></blockquote><h2 id="1-多线程并发-通过cURL并发请求"><a href="#1-多线程并发-通过cURL并发请求" class="headerlink" title="1. 多线程并发:通过cURL并发请求"></a>1. 多线程并发:通过cURL并发请求</h2><h3 id="1-1-通过curl-multi实现"><a href="#1-1-通过curl-multi实现" class="headerlink" title="1.1 通过curl_multi实现"></a>1.1 通过curl_multi实现</h3><p><a href="https://secure.php.net/manual/zh/ref.curl.php" target="_blank" rel="noopener">PHP cURL所有函数列表</a></p><p><strong>并发中用的curl_multi_*相关函数</strong></p><ul><li><a href="https://php.net/manual/zh/function.curl-multi-add-handle.php" target="_blank" rel="noopener">curl_multi_add_handle</a>— 向curl批处理会话中添加单独的curl句柄</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-close.php" target="_blank" rel="noopener">curl_multi_close</a> — 关闭一组cURL句柄</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-exec.php" target="_blank" rel="noopener">curl_multi_exec</a> — 运行当前 cURL 句柄的子连接</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-getcontent.php" target="_blank" rel="noopener">curl_multi_getcontent</a> — 如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-info-read.php" target="_blank" rel="noopener">curl_multi_info_read</a> — 获取当前解析的cURL的相关传输信息</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-init.php" target="_blank" rel="noopener">curl_multi_init</a> — 返回一个新cURL批处理句柄</li><li><a href="curl_multi_remove_handle">curl_multi_remove_handle</a> — 移除curl批处理句柄资源中的某个句柄资源</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-select.php" target="_blank" rel="noopener">curl_multi_select</a> — 等待所有cURL批处理中的活动连接</li><li><a href="https://secure.php.net/manual/zh/function.curl-multi-setopt.php" target="_blank" rel="noopener">curl_multi_setopt</a> — 为 cURL 并行处理设置一个选项</li><li><a href="https://php.net/manual/zh/function.curl-multi-strerror.php" target="_blank" rel="noopener">curl_multi_strerror</a> — 返回字符串描述的错误代码<a id="more"></a></li></ul><h3 id="1-2-PHP-curl-multi-实现并发请求步骤"><a href="#1-2-PHP-curl-multi-实现并发请求步骤" class="headerlink" title="1.2 PHP curl_multi 实现并发请求步骤"></a>1.2 PHP curl_multi 实现并发请求步骤</h3><ol><li>调用 curl_multi_init，初始化一个批处理handle</li><li>循环调用 curl_multi_add_handle，往1中的批处理handle 添加curl_init来的子handle</li><li>持续调用 curl_multi_exec，直到所有子handle执行完毕。</li><li>根据需要循环调用 curl_multi_getcontent 获取结果</li><li>调用 curl_multi_remove_handle，并为每个字handle调用curl_close</li><li>调用 curl_multi_close</li></ol><h3 id="1-3-PHP-curl-multi-实现代码"><a href="#1-3-PHP-curl-multi-实现代码" class="headerlink" title="1.3 PHP curl_multi 实现代码"></a>1.3 PHP curl_multi 实现代码</h3><pre><code class="php">&lt;?php    /**     *  Functional description :      *  Programmer : Mr.Liu     * @param array $urls     *  $urls = [            &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,            &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,            &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,            &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,            &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,      ];     * @return array     */    function multiGetRequest(array $urls):array     {        //1、初始化一个批处理handle        $mh = curl_multi_init();        //2、往批处理handle 添加curl_init来的子handle        foreach ($urls as $i =&gt; $url) {            $connect[$i] = curl_init($url);            curl_setopt($connect[$i], CURLOPT_HEADER, 0);            curl_setopt($connect[$i], CURLOPT_CONNECTTIMEOUT, 60);            curl_setopt($connect[$i], CURLOPT_RETURNTRANSFER, true);            curl_multi_add_handle($mh, $connect[$i]);        }        //3、并发执行，直到全部结束。        do {            curl_multi_exec($mh, $active);        } while ($active);        //4、获取结果        $return=[];        foreach ($urls as $i =&gt; $url) {            $return[] = curl_multi_getcontent($connect[$i]);        }        //5、移除子handle，并close子handle        foreach ($urls as $i =&gt; $url) {            curl_multi_remove_handle($mh, $connect[$i]);            curl_close($connect[$i]);        }        //6、关闭批处理handle        curl_multi_close($mh);        return $return;    }</code></pre><h2 id="2-多进程并发：通过swoole-process实现"><a href="#2-多进程并发：通过swoole-process实现" class="headerlink" title="2. 多进程并发：通过swoole_process实现"></a>2. 多进程并发：通过swoole_process实现</h2><p><a href="https://wiki.swoole.com/wiki/page/214.html" target="_blank" rel="noopener">查看文档</a></p><h3 id="2-1-示例代码"><a href="#2-1-示例代码" class="headerlink" title="2.1 示例代码"></a>2.1 示例代码</h3><pre><code class="php">&lt;?php$start_time = microtime(true);$urls       = [    &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,    &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,    &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,    &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,    &#39;http://liuqinghui.dev.lywf.me/test/libin/ttt&#39;,];//遍历任务创建子进程foreach ($urls as $url) {    /**     * 创建子进程，并调用方法 my_process     */    $process = new swoole_process(&quot;my_process&quot;, true);    /**     * 1.执行fork系统调用，启动进程;     * 创建成功返回子进程的PID，创建失败返回false     */    $process-&gt;start();    /**     * 通过管道发数据到子进程。     * 管道是单向的：发出的数据必须由另一端读取。不能读取自己发出去的     */    $process-&gt;write($url);    /**     * 保存进程,循环结算后统一调取返回数数据：     */    $process_list[] = $process;}//读取结果foreach ($process_list as $process){    //从管道中读取数据。    echo $rec = $process-&gt;read();}/** * 子进程结束必须要执行wait进行回收，否则子进程会变成僵尸进程 * $ret 是个数组其数据结构：   array(3) {    &#39;pid&#39; =&gt;    int(461)    &#39;code&#39; =&gt;    int(0)    &#39;signal&#39; =&gt;    int(0) }*/while ($ret = swoole_process::wait()) {    $pid = $ret[&#39;pid&#39;];    echo PHP_EOL . &quot;Worker Exit, PID=&quot; . $pid . PHP_EOL;}//子进程创建成功后要执行的函数function my_process(swoole_process $worker){    sleep(1);//暂停1s    $url    = $worker-&gt;read();    //---- 执行具体业务程序开始-----    $ch = curl_init();    // 设置URL和相应的选项    curl_setopt($ch, CURLOPT_URL, $url);    curl_setopt($ch, CURLOPT_HEADER, 0);    // 抓取URL并把它传递给浏览器    $return =  curl_exec($ch);    // 关闭cURL资源，并且释放系统资源    curl_close($ch);    //---- 执行具体业务程序结束-----    $worker-&gt;write($return);//写入数据到管道}$end_time = microtime(true);echo sprintf(&quot;use time:%.3f s\n&quot;, $end_time - $start_time);</code></pre><h2 id="3-多进程和多线程的区别？如何选择"><a href="#3-多进程和多线程的区别？如何选择" class="headerlink" title="3. 多进程和多线程的区别？如何选择"></a>3. 多进程和多线程的区别？如何选择</h2><h3 id="3-1-不同的维度的对比"><a href="#3-1-不同的维度的对比" class="headerlink" title="3.1 不同的维度的对比"></a>3.1 不同的维度的对比</h3><table><thead><tr><th>对比维度</th><th>多进程</th><th>多线程</th><th>总结</th></tr></thead><tbody><tr><td>数据共享、同步</td><td>数据共享复杂，需要用IPC；数据是分开的，同步简单</td><td>因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂</td><td>各有优势</td></tr><tr><td>内存、CPU</td><td>占用内存多，切换复杂，CPU利用率低</td><td>占用内存少，切换简单，CPU利用率高</td><td>线程占优</td></tr><tr><td>创建销毁、切换</td><td>创建销毁、切换复杂，速度慢</td><td>创建销毁、切换简单，速度很快</td><td>线程占优</td></tr><tr><td>编程、调试</td><td>编程简单，调试简单</td><td>编程复杂，调试复杂</td><td>进程占优</td></tr><tr><td>可靠性</td><td>进程间不会互相影响</td><td>一个线程挂掉将导致整个进程挂掉</td><td>进程占优</td></tr><tr><td>分布式</td><td>适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单</td><td>适应于多核分布式</td><td>进程占优</td></tr></tbody></table><p><a href="https://blog.csdn.net/lishenglong666/article/details/8557215" target="_blank" rel="noopener">如何选择?</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-fpm配置详情及优化</title>
      <link href="/2019/03/10/phpFpm/"/>
      <url>/2019/03/10/phpFpm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的。</p></blockquote><h2 id="配置文件详情注释"><a href="#配置文件详情注释" class="headerlink" title="配置文件详情注释"></a>配置文件详情注释</h2><a id="more"></a><pre><code>pid = run/php-fpm.pid#pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启error_log = log/php-fpm.log#错误日志，默认在安装目录中的var/log/php-fpm.loglog_level = notice#错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.emergency_restart_threshold = 60emergency_restart_interval = 60s#表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。process_control_timeout = 0#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.daemonize = yes#后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。listen = 127.0.0.1:9000#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: &#39;ip:port&#39;, &#39;port&#39;, &#39;/path/to/unix/socket&#39;. 每个进程池都需要设置.listen.backlog = -1#backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。backlog含义参考：http://www.3gyou.cc/?p=41listen.allowed_clients = 127.0.0.1#允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接listen.owner = wwwlisten.group = wwwlisten.mode = 0666#unix socket设置选项，如果使用tcp方式访问，这里注释即可。user = wwwgroup = www#启动进程的帐户和组pm = dynamic #对于专用服务器，pm可以设置为static。#如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：pm.max_children #，子进程最大数pm.start_servers #，启动时的进程数pm.min_spare_servers #，保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程pm.max_spare_servers #，保证空闲进程数最大值，如果空闲进程大于此值，此进行清理pm.max_requests = 1000#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 &#39;0&#39; 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.pm.status_path = /status#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到ping.path = /ping#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。ping.response = pong#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.request_terminate_timeout = 0#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的&#39;max_execution_time&#39;因为某些特殊原因没有中止运行的脚本有用. 设置为 &#39;0&#39; 表示 &#39;Off&#39;.当经常出现502错误时可以尝试更改此选项。request_slowlog_timeout = 10s#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 &#39;0&#39; 表示 &#39;Off&#39;slowlog = log/$pool.log.slow#慢请求的记录日志,配合request_slowlog_timeout使用rlimit_files = 1024#设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。rlimit_core = 0#设置核心rlimit最大限制值. 可用值: &#39;unlimited&#39; 、0或者正整数. 默认值: 系统定义值.chroot =#启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.chdir =#设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）catch_workers_output = yes#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</code></pre><h2 id="主要参数介绍"><a href="#主要参数介绍" class="headerlink" title="主要参数介绍"></a>主要参数介绍</h2><ul><li><h3 id="pm-进程管理"><a href="#pm-进程管理" class="headerlink" title="pm (进程管理)"></a>pm (进程管理)</h3><code>管理进程方式: pm = static/dynamic</code></li></ul><ol><li>static(静态) ：表示在fpm运行时直接fork出pm.max_chindren个worker进程</li><li>dynamic(动态)：表示运行时fork出start_servers个进程，随着负载的情况，动态的调整，最多不超过max_children个进程</li></ol><blockquote><p>一般推荐用static，优点是不用动态的判断负载情况，提升性能，缺点是多占用些系统内存资源。</p></blockquote><h3 id="max-children-子进程最大数"><a href="#max-children-子进程最大数" class="headerlink" title="max_children(子进程最大数)"></a>max_children(子进程最大数)</h3><ol><li><p>这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。</p></li><li><p>设置’max_children’需要根据服务器的性能进行设定</p></li><li><p>一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右</p></li><li><p>假设“max_children”设置成100个，20M*100=2000M</p></li><li><p>在峰值的时候所有PHP-CGI所耗内存在2000M以内。</p></li><li><p>假设’max_children’设置的较小，比如5-10个，那么php-cgi就会“很累”，处理速度也很慢，等待的时间也较长。</p></li><li><p>如果长时间没有得到处理的请求就会出现504 Gateway Time-out这个错误，而正在处理的很累的那几个php-cgi如果遇到了问题就会出现502 Bad gateway这个错误。</p></li></ol><h3 id="start-servers-启动时的进程数"><a href="#start-servers-启动时的进程数" class="headerlink" title="start_servers(启动时的进程数)"></a>start_servers(启动时的进程数)</h3><ol><li>pm.start_servers的默认值为2。<blockquote><p>其在php-fpm中给的计算方式也为：{（cpu空闲时等待连接的php的最小子进程数） + （cpu空闲时等待连接的php的最大子进程数 - cpu空闲时等待连接的php的最小子进程数）/ 2} 用配置表示就是：min_spare_servers + (max_spare_servers - min_spare_servers) / 2；</p></blockquote></li><li>一般而言，设置成10-20之间的数据足够满足需求了</li></ol><h3 id="max-requests-最大请求数"><a href="#max-requests-最大请求数" class="headerlink" title="max_requests(最大请求数)"></a>max_requests(最大请求数)</h3><blockquote><p>最大处理请求数是指一个php-fpm的worker进程在处理多少个请求后就终止掉，master进程会重新spawn一个新的。这个配置的主要目的是避免php解释器或程序引用的第三方库造成的内存泄露。</p></blockquote><ul><li>出现502的原因？</li></ul><p><code>502，是后端PHP-FPM不可用造成的，间歇性的502一般认为是由于PHP-FPM进程重启造成的</code></p><ul><li>但是为什么要重启进程呢？</li></ul><p><code>如果不定期重启 PHP-CGI 进程，势必造成内存使用量不断增长（比如第三方库有问题等）。因此 PHP-FPM 作为 PHP-CGI 的管理器，提供了这么一项监控功能，对请求达到指定次数的 PHP-CGI 进程进行重启，保证内存使用量不增长</code></p><blockquote><front color="red">也正是因为这个机制，在高并发中，经常导致502错误，</front></blockquote><h3 id="request-terminate-timeout-最长执行时间"><a href="#request-terminate-timeout-最长执行时间" class="headerlink" title="request_terminate_timeout(最长执行时间)"></a>request_terminate_timeout(最长执行时间)</h3><p><code>设置单个请求的超时中止时间。该选项可能会对 php.ini 设置中的 &#39;max_execution_time&#39; 因为某些特殊原因没有中止运行的脚本有用。设置为 &#39;0&#39; 表示 &#39;Off&#39;。</code></p><blockquote><p>这两项都是用来配置一个PHP脚本的最大执行时间的。当超过这个时间时，PHP-FPM不只会终止脚本的执行，还会终止执行脚本的Worker进程,Nginx会发现与自己通信的连接断掉了，就会返回给客户端502错误</p></blockquote><h2 id="php-fpm-调优"><a href="#php-fpm-调优" class="headerlink" title="php-fpm 调优"></a>php-fpm 调优</h2><ul><li>尽量少安装PHP模块</li><li>的PHPFastCGI子进程数（max_children）调到适应大小</li><li>使用socket连接FastCGI，linux操作系统可以放在 /dev/shm中<blockquote><p>注：在php-fpm.cnf里设置<value name="”listen_address”">/tmp/nginx.socket</value>就可以通过socket连接FastCGI了，/dev/shm是内存文件系统，放在内存中肯定会快了.记得这时也要在nginx里的配置里进行修改，保持一致．</p></blockquote></li></ul><pre><code>location ~ \.php${   #将Nginx与FastCGI的通信方式由TCP改为Unix Socket。TCP在高并发访问下比Unix Socket稳定，但Unix Socket速度要比TCP快。   fastcgi_pass  unix:/tmp/php-cgi.sock;   #fastcgi_pass  127.0.0.1:9000;   fastcgi_index index.php;   include fcgi.conf;}</code></pre><ul><li>以root身份执行以下命令，调高linux内核打开文件数量</li></ul><pre><code> echo &#39;ulimit -HSn 65536&#39; &gt;&gt; /etc/profile echo &#39;ulimit -HSn 65536&#39; &gt;&gt; /etc/rc.local source /etc/profile </code></pre><ul><li>增加 PHP-FPM 打开文件描述符的限制:</li></ul><blockquote><p>把php-fpm.conf文件中的rlimit_files值1024改为4096或者更高，然后<front color="red">重启 PHP-FPM</front></p></blockquote><ul><li>使用php代码加速器，例如 eAccelerator, XCache.在linux平台上可以把<code>cache_dir</code>指向 /dev/shm</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php7更新记录</title>
      <link href="/2018/10/06/php7-update-log/"/>
      <url>/2018/10/06/php7-update-log/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-PHP5-6-x-移植PHP7-0-x"><a href="#一-PHP5-6-x-移植PHP7-0-x" class="headerlink" title="一.PHP5.6.x 移植PHP7.0.x"></a>一.PHP5.6.x 移植PHP7.0.x</h2><h3 id="1、PHP7-0-x-新特性"><a href="#1、PHP7-0-x-新特性" class="headerlink" title="1、PHP7.0.x 新特性"></a>1、PHP7.0.x 新特性</h3><ul><li><h4 id="1-1-太空船操作符（组合比较符）-lt-gt"><a href="#1-1-太空船操作符（组合比较符）-lt-gt" class="headerlink" title="1.1 太空船操作符（组合比较符） (&lt;=&gt;)"></a>1.1 太空船操作符（组合比较符） (&lt;=&gt;)</h4>太空船操作符用于比较两个表达式，当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。<font color="red">对象不能进行比较</font>。</li></ul><pre><code class="php">&lt;?php// 整数echo 1 &lt;=&gt; 1; // 0echo 1 &lt;=&gt; 2; // -1echo 2 &lt;=&gt; 1; // 1// 浮点数echo 1.5 &lt;=&gt; 1.5; // 0echo 1.5 &lt;=&gt; 2.5; // -1echo 2.5 &lt;=&gt; 1.5; // 1// 字符串echo &quot;a&quot; &lt;=&gt; &quot;a&quot;; // 0echo &quot;a&quot; &lt;=&gt; &quot;b&quot;; // -1echo &quot;b&quot; &lt;=&gt; &quot;a&quot;; // 1?&gt;</code></pre><a id="more"></a><ul><li><h4 id="1-2-null合并运算符"><a href="#1-2-null合并运算符" class="headerlink" title="1.2 null合并运算符"></a>1.2 null合并运算符</h4>由于日常使用中存在大量同时使用三元表达式和 isset()的情况， 我们添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。</li></ul><pre><code class="php">&lt;?php# php7以前$a = isset($_GET[&#39;a&#39;]) ? $_GET[&#39;a&#39;] : &#39;none&#39;;#PHP 7$a = isset($_GET[&#39;a&#39;]) ?? &#39;none&#39;;</code></pre><ul><li><h4 id="1-3-变量类型声明"><a href="#1-3-变量类型声明" class="headerlink" title="1.3 变量类型声明"></a>1.3 变量类型声明</h4>变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数int、string、float、bool</li></ul><p><strong>非严格模式</strong></p><pre><code class="php">&lt;?phpfunction sumOfInts(int ...$ints){    return array_sum($ints);}var_dump(sumOfInts(2, &#39;3&#39;, 4.1)); // int(9)</code></pre><p><strong>严格模式</strong></p><pre><code class="php">&lt;?php# 严格模式declare(strict_types=1);function add(int $x, int $y){    return $x + $y;}var_dump(add(&#39;2&#39;, 3)); // Fatal error: Argument 1 passed to add() must be of the type integer</code></pre><blockquote><p>要使用严格模式，<font color="red">一个declare声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。</font> 这个指令不仅影响参数的类型声明，也影响到函数的返回值声明</p></blockquote><ul><li><h4 id="1-4-返回值类型声明"><a href="#1-4-返回值类型声明" class="headerlink" title="1.4 返回值类型声明"></a>1.4 返回值类型声明</h4></li></ul><p>增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可</p><pre><code class="php">&lt;?phpfunction fun(int $a): array{  return $a;}fun(3);//Fatal error</code></pre><ul><li><h4 id="1-5-匿名类"><a href="#1-5-匿名类" class="headerlink" title="1.5 匿名类"></a>1.5 匿名类</h4>php7允许new class {} 创建一个匿名的对象。</li></ul><pre><code class="php">&lt;?php//php7以前class Logger{    public function log($msg)    {        echo $msg;    }}$util-&gt;setLogger(new Logger());// php7+$util-&gt;setLogger(new class {    public function log($msg)    {        echo $msg;    }});</code></pre><ul><li><h4 id="1-6-Unicode-codepoint-转译语法"><a href="#1-6-Unicode-codepoint-转译语法" class="headerlink" title="1.6 Unicode codepoint 转译语法"></a>1.6 Unicode codepoint 转译语法</h4>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的</li></ul><pre><code class="php">&lt;?phpecho &quot;\u{aa}&quot;;// ªecho &quot;\u{0000aa}&quot;;// ªecho &quot;\u{9999}&quot;;// 香</code></pre><ul><li><h4 id="1-7-Closure-call"><a href="#1-7-Closure-call" class="headerlink" title="1.7 Closure::call"></a>1.7 Closure::call</h4>闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。</li></ul><pre><code class="php">&lt;?phpclass A {private $x = 1;}// PHP 7 之前版本的代码$getXCB = function() {return $this-&gt;x;};$getX = $getXCB-&gt;bindTo(new A, &#39;A&#39;); // 中间层闭包echo $getX();// PHP 7+ 及更高版本的代码$getX = function() {return $this-&gt;x;};echo $getX-&gt;call(new A);</code></pre><ul><li><h4 id="1-8-带过滤的unserialize"><a href="#1-8-带过滤的unserialize" class="headerlink" title="1.8 带过滤的unserialize"></a>1.8 带过滤的unserialize</h4></li></ul><p>提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入</p><pre><code class="php">&lt;?php// 将所有的对象都转换为 __PHP_Incomplete_Class 对象$data = unserialize($foo, [&quot;allowed_classes&quot; =&gt; false]);// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象$data = unserialize($foo, [&quot;allowed_classes&quot; =&gt; [&quot;MyClass&quot;, &quot;MyClass2&quot;]);// 默认情况下所有的类都是可接受的，等同于省略第二个参数$data = unserialize($foo, [&quot;allowed_classes&quot; =&gt; true]);</code></pre><ul><li><h4 id="1-9-IntlChar类"><a href="#1-9-IntlChar类" class="headerlink" title="1.9 IntlChar类"></a>1.9 IntlChar类</h4>新增加的 <a href="http://php.net/manual/zh/class.intlchar.php" target="_blank" rel="noopener">IntlChar</a> 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。</li></ul><pre><code class="php">&lt;?phpprintf(&#39;%x&#39;, IntlChar::CODEPOINT_MAX);//10ffffecho IntlChar::charName(&#39;@&#39;);//COMMERCIAL ATvar_dump(IntlChar::ispunct(&#39;!&#39;));//bool(true)</code></pre><p><code>若要使用此类，请先安装Intl扩展</code></p><ul><li><h4 id="1-10-预期"><a href="#1-10-预期" class="headerlink" title="1.10 预期"></a>1.10 预期</h4>预期是向后兼用并增强之前的 <a href="http://php.net/manual/zh/function.assert.php" target="_blank" rel="noopener">assert()</a> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</li></ul><pre><code class="php">&lt;?phpini_set(&#39;assert.exception&#39;, 1);class CustomError extends AssertionError {}assert(false, new CustomError(&#39;Some error message&#39;));//输出：Fatal error: Uncaught CustomError: Some error message?&gt;</code></pre><ul><li><h4 id="1-11-命名空间按组导入"><a href="#1-11-命名空间按组导入" class="headerlink" title="1.11 命名空间按组导入"></a>1.11 命名空间按组导入</h4>从同一个命名空间下导入的类、函数、常量支持按组一次导入</li></ul><pre><code class="php">&lt;?php//php7以前use app\model\A;use app\model\B;//php7+use app\model{A,B}</code></pre><ul><li><h4 id="1-12-生成器支持返回表达式"><a href="#1-12-生成器支持返回表达式" class="headerlink" title="1.12 生成器支持返回表达式"></a>1.12 生成器支持返回表达式</h4>此特性基于 PHP 5.5 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。</li></ul><pre><code class="php">&lt;?php$gen = (function() {    yield 1;    yield 2;    return 3;})();foreach ($gen as $val) {    echo $val, PHP_EOL;}echo $gen-&gt;getReturn(), PHP_EOL;//输出/**  1  2  3*/</code></pre><ul><li><h4 id="1-13-生成器委派"><a href="#1-13-生成器委派" class="headerlink" title="1.13 生成器委派"></a>1.13 生成器委派</h4>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。</li></ul><pre><code class="php">&lt;?phpfunction gen(){    yield 1;    yield 2;    yield from gen2();}function gen2(){    yield 3;    yield 4;}foreach (gen() as $val){    echo $val, PHP_EOL;}//输出// 1// 2// 3// 4?&gt;</code></pre><ul><li><h4 id="1-14-整数除法函数intdiv"><a href="#1-14-整数除法函数intdiv" class="headerlink" title="1.14 整数除法函数intdiv"></a>1.14 整数除法函数intdiv</h4></li></ul><pre><code class="php">&lt;?phpvar_dump(intdiv(10,3)); //3</code></pre><ul><li><h4 id="1-15-会话选项设置"><a href="#1-15-会话选项设置" class="headerlink" title="1.15 会话选项设置"></a>1.15 会话选项设置</h4>session_start() 可以加入一个数组覆盖php.ini的配置</li></ul><pre><code class="php">&lt;?phpsession_start([    &#39;cache_limiter&#39; =&gt; &#39;private&#39;,    &#39;read_and_close&#39; =&gt; true,]);</code></pre><ul><li><h4 id="1-16-preg-replace-callback-array"><a href="#1-16-preg-replace-callback-array" class="headerlink" title="1.16 preg_replace_callback_array"></a>1.16 preg_replace_callback_array</h4>在 PHP7 之前，当使用 <a href="http://php.net/manual/zh/function.preg-replace-callback.php" target="_blank" rel="noopener">preg_replace_callback()</a> 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 <a href="http://php.net/manual/zh/function.preg-replace-callback-array.php" target="_blank" rel="noopener">preg_replace_callback_array()</a> 函数， 可以使得代码更加简洁。</li></ul><pre><code class="php">&lt;?php//string preg_replace_callback_array(array $regexesAndCallbacks, string $input);$tokenStream = []; // [tokenName, lexeme] pairs$input = &lt;&lt;&lt;&#39;end&#39;$a = 3; // variable initialisationend;// Pre PHP 7 codepreg_replace_callback(    [        &#39;~\$[a-z_][a-z\d_]*~i&#39;,        &#39;~=~&#39;,        &#39;~[\d]+~&#39;,        &#39;~;~&#39;,        &#39;~//.*~&#39;    ],    function ($match) use (&amp;$tokenStream) {        if (strpos($match[0], &#39;$&#39;) === 0) {            $tokenStream[] = [&#39;T_VARIABLE&#39;, $match[0]];        } elseif (strpos($match[0], &#39;=&#39;) === 0) {            $tokenStream[] = [&#39;T_ASSIGN&#39;, $match[0]];        } elseif (ctype_digit($match[0])) {            $tokenStream[] = [&#39;T_NUM&#39;, $match[0]];        } elseif (strpos($match[0], &#39;;&#39;) === 0) {            $tokenStream[] = [&#39;T_TERMINATE_STMT&#39;, $match[0]];        } elseif (strpos($match[0], &#39;//&#39;) === 0) {            $tokenStream[] = [&#39;T_COMMENT&#39;, $match[0]];        }    },    $input);// PHP 7+ codepreg_replace_callback_array(    [        &#39;~\$[a-z_][a-z\d_]*~i&#39; =&gt; function ($match) use (&amp;$tokenStream) {            $tokenStream[] = [&#39;T_VARIABLE&#39;, $match[0]];        },        &#39;~=~&#39; =&gt; function ($match) use (&amp;$tokenStream) {            $tokenStream[] = [&#39;T_ASSIGN&#39;, $match[0]];        },        &#39;~[\d]+~&#39; =&gt; function ($match) use (&amp;$tokenStream) {            $tokenStream[] = [&#39;T_NUM&#39;, $match[0]];        },        &#39;~;~&#39; =&gt; function ($match) use (&amp;$tokenStream) {            $tokenStream[] = [&#39;T_TERMINATE_STMT&#39;, $match[0]];        },        &#39;~//.*~&#39; =&gt; function ($match) use (&amp;$tokenStream) {            $tokenStream[] = [&#39;T_COMMENT&#39;, $match[0]];        }    ],    $input);</code></pre><ul><li><h4 id="1-17-随机数、随机字符函数"><a href="#1-17-随机数、随机字符函数" class="headerlink" title="1.17 随机数、随机字符函数"></a>1.17 随机数、随机字符函数</h4>新加入两个跨平台的函数： <a href="">random_bytes(http://php.net/manual/zh/function.random-bytes.php)</a> 和 <a href="http://php.net/manual/zh/function.random-int.php" target="_blank" rel="noopener">random_int()</a> 用来产生高安全级别的随机字符串和随机整数。</li></ul><pre><code class="php">&lt;?php$bytes = random_bytes(5);var_dump(bin2hex($bytes));//string(10) &quot;385e33f741&quot;var_dump(random_int(100, 999));//int(248)var_dump(random_int(-1000, 0));//int(-898)</code></pre><ul><li><h4 id="1-18-define-支持定义数组"><a href="#1-18-define-支持定义数组" class="headerlink" title="1.18 define 支持定义数组"></a>1.18 define 支持定义数组</h4><pre><code class="php">&lt;?phpdefine(&#39;ALLOWED_IMAGE_EXTENSIONS&#39;, [&#39;jpg&#39;, &#39;jpeg&#39;, &#39;gif&#39;, &#39;png&#39;]);</code></pre><a href="http://php.net/manual/zh/migration70.new-features.php" target="_blank" rel="noopener">查看所有新特性详情</a></li></ul><h3 id="2、PHP7-0-x-新变化"><a href="#2、PHP7-0-x-新变化" class="headerlink" title="2、PHP7.0.x 新变化"></a>2、PHP7.0.x 新变化</h3><ul><li><h4 id="2-1-错误和异常处理相关的变更"><a href="#2-1-错误和异常处理相关的变更" class="headerlink" title="2.1 错误和异常处理相关的变更"></a>2.1 错误和异常处理相关的变更</h4>在PHP7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。 这些异常继承自 Error 类，此类实现了 Throwable 接口 （所有异常都实现了这个基础接口）。</li></ul><p><code>这也意味着，当发生错误的时候，以前代码中的一些错误处理的代码将无法被触发。 因为在 PHP7 版本中，已经使用抛出异常的错误处理机制了。（如果代码中没有捕获 Error 异常，那么会引发致命错误）</code></p><p><strong>set_exception_handler() 不再保证收到的一定是 Exception 对象</strong></p><p>_抛出Error对象时，如果set_exception_handler()里的异常处理代码声明了类型 Exception ，将会导致fatal error。<br>想要异常处理器同时支持PHP5和PHP7，应该删掉异常处理器里的类型声明。如果代码仅仅是升级到PHP7，则可以把类型 Exception替换成Throwable_</p><pre><code class="php">&lt;?php// PHP 5 时代的代码将会出现问题function handler(Exception $e) { ... }set_exception_handler(&#39;handler&#39;);// 兼容 PHP 5 和 7function handler($e) { ... }// 仅支持 PHP 7function handler(Throwable $e) { ... }?&gt;</code></pre><ul><li><h4 id="2-2-list-会按照原来的顺序进行赋值。不再是逆序了"><a href="#2-2-list-会按照原来的顺序进行赋值。不再是逆序了" class="headerlink" title="2.2 list() 会按照原来的顺序进行赋值。不再是逆序了"></a>2.2 list() 会按照原来的顺序进行赋值。不再是逆序了</h4></li></ul><pre><code class="php">list($a,$b,$c) = [1,2,3];//PHP5var_dump($a);//3var_dump($b);//2var_dump($c);//1//PHP7+var_dump($a);//1var_dump($b);//2var_dump($c);//3</code></pre><p><strong>空的list()赋值支持已经被移除</strong><br>list() 结构现在不再能是空的。如下的例子不再被允许：</p><pre><code class="php">&lt;?phplist() = $a;list(,,) = $a;list($x, list(), $y) = $a;</code></pre><ul><li><h4 id="2-3-foreach不再改变内部数组指针"><a href="#2-3-foreach不再改变内部数组指针" class="headerlink" title="2.3 foreach不再改变内部数组指针"></a>2.3 foreach不再改变内部数组指针</h4>在PHP7之前，当数组通过 foreach 迭代时，数组指针会移动。现在开始，不再如此，见下面代码</li></ul><pre><code class="php">&lt;?php$array = [0, 1, 2];foreach ($array as &amp;$val) {    var_dump(current($array));}//PHP5 输出int(1);int(2);bool(false);//PHP7+ 输出int(0);int(0);int(0);</code></pre><ul><li><h4 id="2-4-十六进制字符串不再被认为是数字"><a href="#2-4-十六进制字符串不再被认为是数字" class="headerlink" title="2.4 十六进制字符串不再被认为是数字"></a>2.4 十六进制字符串不再被认为是数字</h4><blockquote><p>含十六进制字符串不再被认为是数字</p></blockquote></li></ul><pre><code class="php">&lt;?phpvar_dump(is_numeric(&quot;0x123&quot;));//PHP5 输出bool(true);//PHP7+ 输出bool(false);</code></pre><p><a href="http://php.net/manual/zh/migration70.incompatible.php" target="_blank" rel="noopener">查看所有变化详情</a></p><h3 id="3、PHP7-0-x-废弃的特性"><a href="#3、PHP7-0-x-废弃的特性" class="headerlink" title="3、PHP7.0.x 废弃的特性"></a>3、PHP7.0.x 废弃的特性</h3><ul><li><h4 id="3-1-PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。"><a href="#3-1-PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。" class="headerlink" title="3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。"></a>3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。</h4></li></ul><p>PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 E_DEPRECATED 警告。 如果还定义了 __construct() 方法则不受影响。</p><pre><code class="php">&lt;?phpclass foo {    function foo() {        echo &#39;I am the constructor&#39;;    }}</code></pre><p>以上例程会输出：<br><code>Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3</code></p><ul><li><h4 id="3-2-静态调用非静态的方法"><a href="#3-2-静态调用非静态的方法" class="headerlink" title="3.2 静态调用非静态的方法"></a>3.2 静态调用非静态的方法</h4>废弃了 静态（Static） 调用未声明成 static 的方法，未来可能会彻底移除该功能。</li></ul><pre><code class="php">&lt;?phpclass foo {    function bar() {        echo &#39;I am not static!&#39;;    }}foo::bar();</code></pre><p>以上例程会输出：<br><code>Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static!</code></p><p><a href="http://php.net/manual/zh/migration70.deprecated.php" target="_blank" rel="noopener">查看更多PHP7.0.x 弃用的功能</a></p><h3 id="4、PHP7-0-x-移除的扩展和-SAPI"><a href="#4、PHP7-0-x-移除的扩展和-SAPI" class="headerlink" title="4、PHP7.0.x 移除的扩展和 SAPI"></a>4、PHP7.0.x 移除的扩展和 SAPI</h3><ul><li><h4 id="4-1-移除的扩展"><a href="#4-1-移除的扩展" class="headerlink" title="4.1 移除的扩展"></a>4.1 移除的扩展</h4><ul><li>ereg</li><li>mssql</li><li>mysql</li><li>sybase_ct</li></ul></li><li><h4 id="4-2-移除的-SAPI"><a href="#4-2-移除的-SAPI" class="headerlink" title="4.2 移除的 SAPI"></a>4.2 移除的 SAPI</h4><ul><li>aolserver</li><li>apache</li><li>apache_hooks</li><li>apache2filter</li><li>caudium</li><li>continuity</li><li>isapi</li><li>milter</li><li>nsapi</li><li>phttpd</li><li>pi3web</li><li>roxen</li><li>thttpd</li><li>tux</li><li>webjames</li></ul></li></ul><h2 id="二-PHP7-0-x-移植PHP7-1-x"><a href="#二-PHP7-0-x-移植PHP7-1-x" class="headerlink" title="二.PHP7.0.x 移植PHP7.1.x"></a>二.PHP7.0.x 移植PHP7.1.x</h2><h3 id="1、PHP7-1-x-新特性"><a href="#1、PHP7-1-x-新特性" class="headerlink" title="1、PHP7.1.x 新特性"></a>1、PHP7.1.x 新特性</h3><ul><li><h4 id="1-1-可为空-Nullables-类型"><a href="#1-1-可为空-Nullables-类型" class="headerlink" title="1.1 可为空(Nullables)类型"></a>1.1 可为空(Nullables)类型</h4>参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。 当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是null 。</li></ul><pre><code class="php">&lt;?phpfunction test(?string $name){    var_dump($name);}test(&#39;elePHPant&#39;);test(null);test();</code></pre><p>输出结果</p><pre><code>string(10) &quot;elePHPant&quot;NULLUncaught Error: Too few arguments to function test(), 0 passed in...</code></pre><ul><li><h4 id="1-2-Void-函数"><a href="#1-2-Void-函数" class="headerlink" title="1.2 Void 函数"></a>1.2 Void 函数</h4>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，NULL 不是一个合法的返回值</li></ul><pre><code class="php">&lt;?phpfunction swap(&amp;$left, &amp;$right) : void{    if ($left === $right) {        return;    }    $tmp = $left;    $left = $right;    $right = $tmp;}$a = 1;$b = 2;var_dump(swap($a, $b), $a, $b);</code></pre><p>输出结果</p><pre><code>nullint(2)int(1)</code></pre><p>试图去获取一个 void 方法的返回值会得到 NULL ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。</p><ul><li><h4 id="1-3-类常量可见性"><a href="#1-3-类常量可见性" class="headerlink" title="1.3 类常量可见性"></a>1.3 类常量可见性</h4>现在起支持设置类常量的可见性(public、protected、private)。</li></ul><pre><code class="php">&lt;?phpclass ConstDemo{    const PUBLIC_CONST_A = 1;    public const PUBLIC_CONST_B = 2;    protected const PROTECTED_CONST = 3;    private const PRIVATE_CONST = 4;}</code></pre><ul><li><h4 id="1-4-短数组语法（-）"><a href="#1-4-短数组语法（-）" class="headerlink" title="1.4 短数组语法（[]）"></a>1.4 短数组语法（[]）</h4>短数组语法（[]）现在作为list()语法的一个备选项，可以用于将数组的值赋给一些变量（包括在foreach中）。</li></ul><pre><code class="php">&lt;?php$data = [    [1, &#39;Tom&#39;],    [2, &#39;Fred&#39;],];// list() stylelist($id1, $name1) = $data[0];// [] style[$id1, $name1] = $data[0];// list() styleforeach ($data as list($id, $name)) {    // logic here with $id and $name}// [] styleforeach ($data as [$id, $name]) {    // logic here with $id and $name}</code></pre><ul><li><h4 id="1-5-iterable伪类"><a href="#1-5-iterable伪类" class="headerlink" title="1.5 iterable伪类"></a>1.5 iterable伪类</h4>现在引入了一个新的被称为iterable的伪类 (与<a href="http://php.net/manual/zh/language.types.callable.php" target="_blank" rel="noopener">callable</a>类似)。 这可以被用在参数或者返回值类型中，它代表接受数组或者实现了Traversable接口的对象。 至于子类，当用作参数时，子类可以收紧父类的iterable类型到array 或一个实现了Traversable的对象。对于返回值，子类可以拓宽父类的 array或对象返回值类型到iterable。</li></ul><pre><code class="php">&lt;?phpfunction iterator(iterable $iter){    foreach ($iter as $val) {        //    }}</code></pre><ul><li><h4 id="1-6-多异常捕获处理"><a href="#1-6-多异常捕获处理" class="headerlink" title="1.6 多异常捕获处理"></a>1.6 多异常捕获处理</h4>一个catch语句块现在可以通过管道字符(|)来实现多个异常的捕获。 这对于需要同时处理来自不同类的不同异常时很有用。</li></ul><pre><code class="php">&lt;?phptry {    // some code} catch (FirstException | SecondException $e) {    // handle first and second exceptions}</code></pre><ul><li><h4 id="1-7-list支持键名"><a href="#1-7-list支持键名" class="headerlink" title="1.7 list支持键名"></a>1.7 list支持键名</h4>现在list()和它的新的[]语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）</li></ul><pre><code class="php">&lt;?php$data = [    [&quot;id&quot; =&gt; 1, &quot;name&quot; =&gt; &#39;Tom&#39;],    [&quot;id&quot; =&gt; 2, &quot;name&quot; =&gt; &#39;Fred&#39;],];// list() stylelist(&quot;id&quot; =&gt; $id1, &quot;name&quot; =&gt; $name1) = $data[0];// [] style[&quot;id&quot; =&gt; $id1, &quot;name&quot; =&gt; $name1] = $data[0];// list() styleforeach ($data as list(&quot;id&quot; =&gt; $id, &quot;name&quot; =&gt; $name)) {    // logic here with $id and $name}// [] styleforeach ($data as [&quot;id&quot; =&gt; $id, &quot;name&quot; =&gt; $name]) {    // logic here with $id and $name}</code></pre><ul><li><h4 id="1-8-支持为负的字符串偏移量"><a href="#1-8-支持为负的字符串偏移量" class="headerlink" title="1.8 支持为负的字符串偏移量"></a>1.8 支持为负的字符串偏移量</h4>现在所有支持偏移量的<a href="http://php.net/manual/zh/book.strings.php" target="_blank" rel="noopener">字符串操作函数</a> 都支持接受负数作为偏移量，包括通过[]或{}操作字符串下标。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。</li></ul><pre><code class="php">&lt;?phpvar_dump(&quot;abcdef&quot;[-2]);//string (1) &quot;e&quot;var_dump(strpos(&quot;aabbcc&quot;, &quot;b&quot;, -3));//int(3)$string = &#39;bar&#39;;echo &quot;The last character of &#39;$string&#39; is &#39;$string[-1]&#39;.\n&quot;;//输出: The last character of &#39;bar&#39; is &#39;r&#39;.</code></pre><ul><li><h4 id="1-9-将callables转为闭包"><a href="#1-9-将callables转为闭包" class="headerlink" title="1.9 将callables转为闭包"></a>1.9 将callables转为闭包</h4><a href="http://php.net/manual/zh/class.closure.php" target="_blank" rel="noopener">Closure</a>新增了一个静态方法fromCallable()，用于将callable快速地 转为一个Closure 对象。</li></ul><pre><code class="php">&lt;?phpclass Test{    public function exposeFunction()    {        return Closure::fromCallable([$this, &#39;privateFunction&#39;]);    }    private function privateFunction($param)    {        var_dump($param);    }}$privFunc = (new Test)-&gt;exposeFunction();$privFunc(&#39;some value&#39;);//输出:string(10) &quot;some value&quot;</code></pre><ul><li><h4 id="1-10-http2服务推送"><a href="#1-10-http2服务推送" class="headerlink" title="1.10 http2服务推送"></a>1.10 http2服务推送</h4><blockquote><p>对服务器推送的支持现在已经被加入到CURL扩展中（ 需要版本 7.46 或更高）。这个可以通过<a href="http://php.net/manual/zh/function.curl-multi-setopt.php" target="_blank" rel="noopener">curl_multi_setopt()</a>函数与新的常量 <strong>CURLMOPT_PUSHFUNCTION</strong> 来进行调节。常量 <strong>CURL_PUST_OK</strong> 和 <strong>CURL_PUSH_DENY</strong> 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。</p></blockquote></li></ul><h3 id="2、PHP7-1-x-新变化"><a href="#2、PHP7-1-x-新变化" class="headerlink" title="2、PHP7.1.x 新变化"></a>2、PHP7.1.x 新变化</h3><ul><li><h4 id="2-1-传递参数过少时将抛出错误"><a href="#2-1-传递参数过少时将抛出错误" class="headerlink" title="2.1 传递参数过少时将抛出错误"></a>2.1 传递参数过少时将抛出错误</h4><blockquote><p>过去我们传递参数过少会产生warning。php7.1开始会抛出error</p></blockquote></li></ul><h3 id="3、PHP-7-1-x-中废弃的特性"><a href="#3、PHP-7-1-x-中废弃的特性" class="headerlink" title="3、PHP 7.1.x 中废弃的特性"></a>3、PHP 7.1.x 中废弃的特性</h3><ul><li><h4 id="3-1-移除了ext-mcrypt拓展"><a href="#3-1-移除了ext-mcrypt拓展" class="headerlink" title="3.1 移除了ext/mcrypt拓展"></a>3.1 移除了ext/mcrypt拓展</h4><blockquote><p>mcrypt 扩展已经过时了大约10年，并且用起来很复杂。因此它被废弃并且被 OpenSSL 所取代。 从PHP7.2起它将被从核心代码中移除并且移到PECL中。</p></blockquote></li></ul><h2 id="三-PHP7-1-x-移植PHP7-2-x"><a href="#三-PHP7-1-x-移植PHP7-2-x" class="headerlink" title="三.PHP7.1.x 移植PHP7.2.x"></a>三.PHP7.1.x 移植PHP7.2.x</h2><h3 id="1、PHP7-2-x-新特性"><a href="#1、PHP7-2-x-新特性" class="headerlink" title="1、PHP7.2.x 新特性"></a>1、PHP7.2.x 新特性</h3><ul><li><h4 id="1-1-增加新的类型object"><a href="#1-1-增加新的类型object" class="headerlink" title="1.1 增加新的类型object"></a>1.1 增加新的类型object</h4><code>这种新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。</code></li></ul><pre><code class="php">&lt;?phpfunction test(object $obj) : object{    return new SplQueue();}test(new StdClass());</code></pre><ul><li><h4 id="1-2-通过名称加载扩展"><a href="#1-2-通过名称加载扩展" class="headerlink" title="1.2 通过名称加载扩展"></a>1.2 通过名称加载扩展</h4><p><font size="2">扩展文件不再需要通过文件加载 (Unix下以.so为文件扩展名，在Windows下以 .dll 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用 <a href="http://php.net/manual/zh/function.dl.php" target="_blank" rel="noopener">dl()</a> 函数进行启用。</font></p><pre><code>; ini fileextension=php-astzend_extension=opcache</code></pre></li><li><h4 id="1-3-允许重写抽象方法"><a href="#1-3-允许重写抽象方法" class="headerlink" title="1.3 允许重写抽象方法"></a>1.3 允许重写抽象方法</h4><p><code>当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法</code></p></li></ul><pre><code class="php">&lt;?phpabstract class A{    abstract function test(string $s);}abstract class B extends A{    // overridden - still maintaining contravariance for parameters and covariance for return    abstract function test($s) : int;}</code></pre><ul><li><h4 id="1-4-使用Argon2算法生成密码散列"><a href="#1-4-使用Argon2算法生成密码散列" class="headerlink" title="1.4 使用Argon2算法生成密码散列"></a>1.4 使用Argon2算法生成密码散列</h4><font size="2">Argon2 已经被加入到密码散列（password hashing） API (<a href="http://php.net/manual/zh/book.password.php" target="_blank" rel="noopener">这些函数以 password_ 开头</a>) 以下是暴露出来的常量:`</font></li><li>PASSWORD_ARGON2I</li><li>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</li><li>PASSWORD_ARGON2_DEFAULT_TIME_COST</li><li>PASSWORD_ARGON2_DEFAULT_THREADS</li><li><h4 id="1-5-新增-ext-PDO（PDO扩展）-字符串扩展类型-¶"><a href="#1-5-新增-ext-PDO（PDO扩展）-字符串扩展类型-¶" class="headerlink" title="1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶"></a>1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶</h4><p><code>当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：</code></p></li><li><p>PDO::PARAM_STR_NATL</p></li><li>PDO::PARAM_STR_CHAR</li><li>PDO::ATTR_DEFAULT_STR_PARAM</li></ul><p>这些常量通过PDO::PARAM_STR利用位运算OR进行计算：</p><pre><code class="php">&lt;?php$db-&gt;quote(&#39;über&#39;, PDO::PARAM_STR | PDO::PARAM_STR_NATL);</code></pre><ul><li><h4 id="1-5-允许分组命名空间的尾部逗号"><a href="#1-5-允许分组命名空间的尾部逗号" class="headerlink" title="1.5 允许分组命名空间的尾部逗号"></a>1.5 允许分组命名空间的尾部逗号</h4><font size="2">命名空间可以在PHP7.2中使用尾随逗号进行分组引入。</font></li></ul><pre><code class="php">&lt;?phpuse Foo\Bar\{    Foo,    Bar,    Baz,};</code></pre><blockquote><front color="red">在php7.0中 最后一个(Baz,)不能有逗号否则报错</front></blockquote><h3 id="2、PHP7-2-x-新变化"><a href="#2、PHP7-2-x-新变化" class="headerlink" title="2、PHP7.2.x 新变化"></a>2、PHP7.2.x 新变化</h3><ul><li><h4 id="2-1-number-format-返回值"><a href="#2-1-number-format-返回值" class="headerlink" title="2.1 number_format 返回值"></a>2.1 number_format 返回值</h4></li></ul><pre><code class="php">&lt;?phpvar_dump(number_format(-0.01)); // now outputs string(1) &quot;0&quot; instead of string(2) &quot;-0&quot;</code></pre><ul><li><h4 id="2-2-get-class-不再允许null。"><a href="#2-2-get-class-不再允许null。" class="headerlink" title="2.2 get_class()不再允许null。"></a>2.2 get_class()不再允许null。</h4></li></ul><pre><code class="php">&lt;?phpvar_dump(get_class(null)); // warning</code></pre><ul><li><h4 id="2-3-count-作用在不是-Countable-Types-将发生warning"><a href="#2-3-count-作用在不是-Countable-Types-将发生warning" class="headerlink" title="2.3 count 作用在不是 Countable Types 将发生warning"></a>2.3 count 作用在不是 Countable Types 将发生warning</h4></li></ul><pre><code class="php">&lt;?php//PHP7.2var_dump(    count(null), // NULL is not countable    count(1), // integers are not countable    count(&#39;abc&#39;), // strings are not countable    count(new stdclass), // objects not implementing the Countable interface are not countable    count([1,2]) // arrays are countable);</code></pre><p>以上例程会输出:</p><pre><code>Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %dWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %dWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %dWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %dint(0)int(1)int(1)int(1)int(2)</code></pre><ul><li><h4 id="2-4-不带引号的字符串"><a href="#2-4-不带引号的字符串" class="headerlink" title="2.4 不带引号的字符串"></a>2.4 不带引号的字符串</h4><code>在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。</code></li></ul><pre><code class="php">&lt;?phpvar_dump(HELLO);// PHP7.2前输出：HELLO/* * PHP7.2输出Warning: Use of undefined constant HELLO - assumed &#39;HELLO&#39; (this will throw an Error in a future version of PHP) in /usr/src/php/dfe807d9bfa587a80b60fbdda823e7be.php on line 2string(5) &quot;HELLO&quot;*/</code></pre><ul><li><h4 id="2-5-is-object、gettype修正"><a href="#2-5-is-object、gettype修正" class="headerlink" title="2.5  is_object、gettype修正"></a>2.5  is_object、gettype修正</h4></li></ul><p>is_object 作用在<strong>__PHP_Incomplete_Class</strong> 将返回：true<br><code>Previously, using is_object() on the __PHP_Incomplete_Class class would return FALSE. Now, TRUE will be returned.</code></p><p>gettype作用在闭包在将正确返回resource<br><code>Previously, using gettype() on a closed resource would return a string of &quot;unknown type&quot;. Now, a string of &quot;resource (closed)&quot; will be returned.</code></p><h3 id="3、PHP7-2-x-废弃的特性"><a href="#3、PHP7-2-x-废弃的特性" class="headerlink" title="3、PHP7.2.x 废弃的特性"></a>3、PHP7.2.x 废弃的特性</h3><ul><li><h4 id="3-1-autoload-被废弃"><a href="#3-1-autoload-被废弃" class="headerlink" title="3.1 __autoload 被废弃"></a>3.1 __autoload 被废弃</h4></li><li><h4 id="3-2-each被废弃"><a href="#3-2-each被废弃" class="headerlink" title="3.2 each被废弃"></a>3.2 each被废弃</h4><p><code>使用此函数遍历时，比普通的 foreach 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了</code></p></li><li><h4 id="3-3-gmp-random-函数被废弃"><a href="#3-3-gmp-random-函数被废弃" class="headerlink" title="3.3 gmp_random()函数被废弃"></a>3.3 gmp_random()函数被废弃</h4><p>此函数基于未知的、取决于平台的 limb 尺寸产生随机数。因此，该函数已被废弃。 使用更好的方式产生随机数： GMP 扩展中的<a href="http://php.net/manual/zh/function.gmp-random-bits.php" target="_blank" rel="noopener">gmp_random_bits()</a>  和 <a href="http://php.net/manual/zh/function.gmp-random-range.php" target="_blank" rel="noopener">gmp_random_range()</a>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Row size too large (&gt; 8126) for mysql</title>
      <link href="/2018/09/11/Row-size-too-large-8126-for-mysql/"/>
      <url>/2018/09/11/Row-size-too-large-8126-for-mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题：SQLSTATE-42000-Syntax-error-or-access-violation-1118-Row-size-too-large-gt-8126-Changing-some-columns-to-TEXT-or-BLOB-or-using-ROW-FORMAT-DYNAMIC-or-ROW-FORMAT-COMPRESSED-may-help-In-current-row-format-BLOB-prefix-of-768-bytes-is-stored-inline"><a href="#问题：SQLSTATE-42000-Syntax-error-or-access-violation-1118-Row-size-too-large-gt-8126-Changing-some-columns-to-TEXT-or-BLOB-or-using-ROW-FORMAT-DYNAMIC-or-ROW-FORMAT-COMPRESSED-may-help-In-current-row-format-BLOB-prefix-of-768-bytes-is-stored-inline" class="headerlink" title="问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline."></a>问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.</h3><h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>根据报错信息，mysql提示是行的数据过大，应该将一些字段类型声明为TEXT或者BLOB，再或者将ROW_FORMAT(行格式)设置为DYNAMIC或者COMPRESSED。根据这个信息，我们查看一下mysql数据库的一些变量参数信息：</p><pre><code># 查看所有表的状态show table status;+--------+--------+---------+------------+------+----------------+-------------+| Name   | Engine | Version | Row_format | Rows | Avg_row_length | Data_length |+--------+--------+---------+------------+------+----------------+-------------+| t_test | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |+--------+--------+---------+------------+------+----------------+-------------+# 查看当前数据库innodb引擎的文件格式show variables like &#39;%innodb_file_format%&#39;;+--------------------------+-----------+| Variable_name            | Value     |+--------------------------+-----------+| innodb_file_format       | Barracuda || innodb_file_format_check | ON        || innodb_file_format_max   | Barracuda |+--------------------------+-----------+</code></pre><a id="more"></a><blockquote><p>mysql的innodb引擎存储blob/text类型字段的行为，取决于三个因素：字段大小、整行(row)大小、innodb行格式。</p></blockquote><p><strong>innodb引擎支持的文件格式包括Antelope(羚羊)、Barracuda(梭子鱼):</strong></p><ul><li>Antelope提供Redundant（冗长）、Compact（紧凑）文件格式</li><li>Barracuda除此之外提供Dynamic(动态)和 Compressed(压缩)</li></ul><p>Antelope格式的innodb引擎会尽可能地将整行数据存储在一个innodb page上，并且一个InnoDB page存储多行数据(至少是2行)，一个innodb page大约是16k，所以行大小限制为(16k - page header- page trailer) / 2。如果行中有可变长度字段(blob/text/varchar)，并且整行大小超过行大小限制，InnoDB会将字段其余数据页外存储(off-page)。这种情况下(Redundant或Compact)，每个可变长度字段(blob/text/varchar)的前768字节存储在innodb page内的行中，其余部分存储在页外。</p><blockquote><p>导致innodb的1118错误的原因：1、多个可变长度字段；2、每个字段的值超过768(不是定义的字段大小，而是字段值的大小)；3、innodb引擎不是在定义表的时候判断，而是每次插入操作的时候判断。</p></blockquote><p>Barracuda格式的innodb引擎，当ROW_FORMAT设置为DYNAMIC只使用一个20字节的指针作为可变长度类型，并且优先选择较小的字段存储在innodb page上。并且可以给blob增加前缀索引(prefix index)，将前缀索引建立在page外的blob上而不是page内。ROW_FORMAT设置为COMPRESSED时，innodb引擎的对可变长度字段的存储策略类似，并且总是压缩不在page内的数据，即使没有设置KEY_BLOCK_SIZE，也没有启用正常数据和索引的压缩。</p><p>innodb在存储blob时，page内部和外部的blob其实时不共享的。每个blob在页外都有16k分配，即使blob只有1个字节大小。如果每行有多个blob，可能会导致数据库效率比较低。所以最好是一行只定义一个blob来组合数据，并且压缩改数据，text类型同理</p><p><code>解决方案</code></p><h3 id="解决方案1-–-Dynamic"><a href="#解决方案1-–-Dynamic" class="headerlink" title="解决方案1 – Dynamic"></a>解决方案1 – Dynamic</h3><p>将innodb引擎的文件格式设置为Barracuda，并且将行格式设置为DYNAMIC。</p><pre><code>SET GLOBAL innodb_file_format=Barracuda;ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=DYNAMIC;</code></pre><h3 id="解决方案2-–-Compressed"><a href="#解决方案2-–-Compressed" class="headerlink" title="解决方案2 – Compressed"></a>解决方案2 – Compressed</h3><p>将innodb引擎的文件格式设置为Barracuda，将行格式设置为COMPRESSED，并且设置缓冲池索引块大小。一般压缩效果明显，压缩率在30%-40%左右，但是会影响存储效率。</p><pre><code>SET GLOBAL innodb_file_format=Barracuda;ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8，</code></pre><h3 id="解决方案3-–-单表一文件"><a href="#解决方案3-–-单表一文件" class="headerlink" title="解决方案3 – 单表一文件"></a>解决方案3 – 单表一文件</h3><p>每张表一个文件，不建议使用。对于单行多可变长度字段的表，效果可以，但是对于其他表浪费存储空间。</p><pre><code>innodb_file_format=Barracudainnodb_file_per_table=1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fatal: Pathspec &#39;xxx&#39; is in submodule for php yaf vendor</title>
      <link href="/2018/08/13/Pathspec-xxx-is-in-submodule/"/>
      <url>/2018/08/13/Pathspec-xxx-is-in-submodule/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git-add。"><a href="#使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git-add。" class="headerlink" title="使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。"></a>使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。</h3><p>使用git status查看，没有任何提交，后手动删除重新copy了文件，再次使用git status：</p><pre><code>modified: vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php (modified content)</code></pre><p>git add后只增加了文件夹，但是没有文件。<br>手动Add: </p><pre><code>git vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php报出错误信息： fatal: Pathspec &#39;xxx&#39; is in submodule</code></pre><a id="more"></a><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>发现vendor/phpgangsta/googleauthenticator/PHPGangsta/下 有.git文件 </li><li>所以使用下面命令：</li></ul><pre><code>git rm -rf --cached vendor/phpgangsta/googleauthenticator/PHPGangstagit add vendor/phpgangsta/*</code></pre><p>然后正常提交。</p>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令整理</title>
      <link href="/2018/08/13/docker-command/"/>
      <url>/2018/08/13/docker-command/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-基本信息查看"><a href="#1-基本信息查看" class="headerlink" title="1.基本信息查看"></a>1.基本信息查看</h2><pre><code># 查看docker的版本号，包括客户端、服务端、依赖的Go等$ docker version# 查看系统(docker)层面信息，包括管理的images, containers数等$ docker info </code></pre><h2 id="2-镜像使用"><a href="#2-镜像使用" class="headerlink" title="2.镜像使用"></a>2.镜像使用</h2><h3 id="2-1-搜索镜像"><a href="#2-1-搜索镜像" class="headerlink" title="2.1 搜索镜像"></a>2.1 搜索镜像</h3><pre><code># 在docker index中搜索image$ docker search &lt;image&gt; </code></pre><h3 id="2-2-下载镜像"><a href="#2-2-下载镜像" class="headerlink" title="2.2 下载镜像"></a>2.2 下载镜像</h3><pre><code># 从docker registry server 中下拉image$ docker pull &lt;image&gt;  </code></pre><h3 id="2-3-查看镜像"><a href="#2-3-查看镜像" class="headerlink" title="2.3 查看镜像"></a>2.3 查看镜像</h3><pre><code>$ docker images： # 列出images$ docker images -a # 列出所有的images（包含历史）$ docker rmi  &lt;image ID&gt;： # 删除一个或多个image</code></pre><h3 id="2-4-使用镜像创建容器"><a href="#2-4-使用镜像创建容器" class="headerlink" title="2.4 使用镜像创建容器"></a>2.4 使用镜像创建容器</h3><pre><code>$ docker run -i -t sauloal/ubuntu14.04# 创建一个容器，让其中运行 bash 应用，退出后容器关闭$ docker run -i -t sauloal/ubuntu14.04 /bin/bash#创建一个名称centos_aways的容器，自动重启，--restart参数：always始终重启；on-failure退出状态非0时重启；默认为，no不重启$ docker run -itd --name centos_aways --restart=always centos </code></pre><h3 id="2-5-删除为none的镜像"><a href="#2-5-删除为none的镜像" class="headerlink" title="2.5 删除为none的镜像"></a>2.5 删除为none的镜像</h3><p>Dockerfile 代码更新频繁，自然docker build构建同名镜像也频繁的很，产生了众多名为none的无用镜像。<br>分别执行以下三行可清除:</p><pre><code>$ docker ps -a | grep &quot;Exited&quot; | awk &#39;{print $1 }&#39;|xargs docker stop$ docker ps -a | grep &quot;Exited&quot; | awk &#39;{print $1 }&#39;|xargs docker rm$ docker images|grep none|awk &#39;{print $3 }&#39;|xargs docker rmi</code></pre><h2 id="3-容器使用"><a href="#3-容器使用" class="headerlink" title="3.容器使用"></a>3.容器使用</h2><h3 id="3-1-查看容器"><a href="#3-1-查看容器" class="headerlink" title="3.1 查看容器"></a>3.1 查看容器</h3><pre><code>$ docker ps ：列出当前所有正在运行的container$ docker ps -l ：列出最近一次启动的container$ docker ps -a ：列出所有的container（包含历史，即运行过的container）$ docker ps -q ：列出最近一次运行的container ID</code></pre><h3 id="3-2-启动容器"><a href="#3-2-启动容器" class="headerlink" title="3.2 启动容器"></a>3.2 启动容器</h3><pre><code>#：开启/停止/重启container$ docker start/stop/restart &lt;container&gt; #：再次运行某个container （包括历史container）$ docker start [container_id]</code></pre><h3 id="3-3-进入容器"><a href="#3-3-进入容器" class="headerlink" title="3.3 进入容器"></a>3.3 进入容器</h3><pre><code>$ docker exec -it [container_id] /bin/bash#：映射 HOST 端口到容器，方便外部访问容器内服务，host_port 可以省略，省略表示把 container_port 映射到一个动态端口。$ docker run -i -t -p &lt;host_port:contain_port&gt;</code></pre><h3 id="3-4-删除容器"><a href="#3-4-删除容器" class="headerlink" title="3.4 删除容器"></a>3.4 删除容器</h3><pre><code>#：删除一个或多个container$ docker rm &lt;container...&gt; #：删除所有的container$ docker rm `docker ps -a -q`#：同上, 删除所有的container$ docker ps -a -q | xargs docker rm# 停止所有容器，删除所有容器$ docker kill $(docker ps -q) $ docker rm $(docker ps -a -q)</code></pre><h3 id="3-5-查看容器IP"><a href="#3-5-查看容器IP" class="headerlink" title="3.5 查看容器IP"></a>3.5 查看容器IP</h3><ul><li>进入容器内部后<pre><code>cat /etc/hosts</code></pre></li><li>使用命令<pre><code>docker inspect &lt;container id&gt; # 或 docker inspect -f &#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; container_name_or_id</code></pre></li><li>获取所有容器名称及其IP</li></ul><blockquote>$ docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)</blockquote><pre><code>workdock_nginx_1 - 192.168.0.8172.31.0.3workdock_php-fpm_1 - 192.168.0.7workdock_workspace_1 - 192.168.0.6172.31.0.2workdock_redis_1 - 192.168.0.5workdock_mysql_1 - 192.168.0.2workdock_mongo_1 - 192.168.0.4workdock_docker-in-docker_1 - 192.168.0.3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBook brew yaf error: unknown type name &#39;HASHKIT_API&#39;</title>
      <link href="/2018/07/31/brew-yaf-error/"/>
      <url>/2018/07/31/brew-yaf-error/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name ‘HASHKIT_API’</p><a id="more"></a><pre><code class="$xslt">\h:\W \u$ brew install php70-yaf==&gt; Installing php70-yaf from homebrew/php==&gt; Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gzAlready downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz==&gt; /usr/local/opt/php70/bin/phpize==&gt; ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config==&gt; makeLast 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:/usr/local/include/string.h:56:1: error: unknown type name &#39;HASHKIT_API&#39;HASHKIT_API^/usr/local/include/string.h:57:1: error: expected identifier or &#39;(&#39;const char *hashkit_string_c_str(const hashkit_string_st* self);^6 errors generated.make: *** [yaf_bootstrap.lo] Error 1make: *** Waiting for unfinished jobs....6 errors generated.make: *** [yaf.lo] Error 16 errors generated.make: *** [yaf_application.lo] Error 16 errors generated.make: *** [yaf_dispatcher.lo] Error 1</code></pre><p>====&gt; 解决方法：<br>找到/usr/local/include/string.h 注释调和’HASHKIT_API有关的代码；</p><pre><code class="$xslt">/*=============================20180314 解决yaf 装不上的问题，注释#HASHKIT_APIvoid hashkit_string_free(hashkit_string_st *ptr);#HASHKIT_APIsize_t hashkit_string_length(const hashkit_string_st *self);#HASHKIT_APIconst char *hashkit_string_c_str(const hashkit_string_st* self);#================================================================*/</code></pre><p>补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错；</p><pre><code class="$xslt">&gt;&gt;&gt; nginx 报错：     2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: &quot;GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;, host: &quot;www.cloudins.com&quot;&gt;&gt;&gt;php-fpm报错:[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593[16-Mar-2018 12:21:27] NOTICE: ready to handle connections[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started[16-Mar-2018 14:10:02] NOTICE: Finishing ...[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye!</code></pre><p>后来发现不只是安装yaf会保这个错，安装一些其他的服务也会报这个错，</p><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><pre><code>把/usr/local/include 临时改为 :/usr/local/include_bak</code></pre><p>结论：</p><pre><code>这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；</code></pre>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程、线程、协程</title>
      <link href="/2018/07/13/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/"/>
      <url>/2018/07/13/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-进程和线程介绍"><a href="#1-进程和线程介绍" class="headerlink" title="1. 进程和线程介绍"></a>1. 进程和线程介绍</h1><h2 id="1-1-进程和线程的介绍"><a href="#1-1-进程和线程的介绍" class="headerlink" title="1.1 进程和线程的介绍"></a>1.1 进程和线程的介绍</h2><h3 id="1-1-1-进程"><a href="#1-1-1-进程" class="headerlink" title="1.1.1 进程"></a>1.1.1 进程</h3><p>进程是程序在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位，每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全</p><h3 id="1-1-2-线程"><a href="#1-1-2-线程" class="headerlink" title="1.1.2 线程"></a>1.1.2 线程</h3><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p><h3 id="1-1-3-协程"><a href="#1-1-3-协程" class="headerlink" title="1.1.3 协程"></a>1.1.3 协程</h3><p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p><h3 id="1-1-4-进程和线程的关系"><a href="#1-1-4-进程和线程的关系" class="headerlink" title="1.1.4 进程和线程的关系"></a>1.1.4 进程和线程的关系</h3><ul><li>一个进程可以创建和销毁多个线程，同一个进程中的多个线程可以并发执行</li><li>一个程序至少有一个进程，一个进程至少有一个线程</li></ul><h2 id="1-2-区别"><a href="#1-2-区别" class="headerlink" title="1.2 区别"></a>1.2 区别</h2><h3 id="1-2-1-进程与线程比较"><a href="#1-2-1-进程与线程比较" class="headerlink" title="1.2.1 进程与线程比较"></a>1.2.1 进程与线程比较</h3><ul><li><b>地址空间</b>: 线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间</li><li><b>资源拥有</b>: 进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</li><li><b>基本单位</b>: 线程是CPU调度的基本单位,进程是系统进行资源分配和调度的基本单位</li><li><b>并发执行</b>: 二者均可并发执行</li><li><b>层级关系</b>: 一个进程可以创建和销毁多个线程，同一个进程中的多个线程可以并发执行</li><li><b>执行过程</b>: 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。<code>但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</code></li></ul><p><strong> 为了加深理解，做个简单的比喻：进程=火车，线程=车厢 </strong></p><ol><li>线程在进程下行进（单纯的车厢无法运行）</li><li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li><li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li><li>同一进程下不同线程间数据容易共享（A车厢换到B车厢很容易）</li><li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢与前一节产生断裂，将影响后面的所有车厢）</li><li>进程可以拓展到多机，进程最适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li><li>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－”互斥锁”</li><li>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－”信号量”</li></ol><h3 id="1-2-2-协程与线程进行比较"><a href="#1-2-2-协程与线程进行比较" class="headerlink" title="1.2.2 协程与线程进行比较"></a>1.2.2 协程与线程进行比较</h3><ul><li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li><li>线程进程都是同步机制，而协程则是异步</li><li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li></ul><h3 id="1-2-3-其他介绍资料"><a href="#1-2-3-其他介绍资料" class="headerlink" title="1.2.3 其他介绍资料"></a>1.2.3 其他介绍资料</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释(阮一峰)</a></li><li><a href="https://www.itcodemonkey.com/article/4620.html" target="_blank" rel="noopener">漫画：什么是协程？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 行业术语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看容器日志</title>
      <link href="/2018/07/12/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"/>
      <url>/2018/07/12/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-如何找出docker容器日志文件？"><a href="#1-如何找出docker容器日志文件？" class="headerlink" title="1.如何找出docker容器日志文件？"></a>1.如何找出docker容器日志文件？</h3><blockquote><p>在linux上，容器日志一般存放在/var/lib/docker/containers/container_id/下面， 以json.log结尾的文件</p></blockquote><pre><code># 查看各个容器的日志文件大小ls -lh $(find /var/lib/docker/containers/ -name *-json.log)</code></pre><h3 id="2-如何清理日志"><a href="#2-如何清理日志" class="headerlink" title="2.如何清理日志"></a>2.如何清理日志</h3><p>如果docker容器正在运行，那么使用rm -rf 方式删除日志后，通过df -h会发现磁盘空间并没有释放。</p><ol><li>原因：<blockquote><p>在Linux或者Unix系统中，通过rm或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用</p></blockquote></li></ol><pre><code># 正确操作cat /dev/null &gt; *-json.log# 或者rm删除后,重启docker</code></pre><p>清理脚本：</p><pre><code>#!/bin/shecho &quot;==================== start clean docker containers logs ==========================&quot;logs=$(find /var/lib/docker/containers/ -name *-json.log)for log in $logs        do                echo &quot;clean logs : $log&quot;                cat /dev/null &gt; $log        doneecho &quot;==================== end clean docker containers logs   ==========================&quot;</code></pre><h3 id="3-设置Docker容器日志大小"><a href="#3-设置Docker容器日志大小" class="headerlink" title="3.设置Docker容器日志大小"></a>3.设置Docker容器日志大小</h3><p>通过配置容器docker-compose的max-size选项来实现</p><h4 id="3-1-针对单容器设置"><a href="#3-1-针对单容器设置" class="headerlink" title="3.1 针对单容器设置"></a>3.1 针对单容器设置</h4><p>如nginx:</p><pre><code>nginx:   image: nginx:1.12.1   restart: always   logging:     driver: &quot;json-file&quot;     options:       max-size: &quot;5g&quot;       ....</code></pre><p><code>重启nginx容器之后，其日志文件的大小就被限制在5GB，再也不用担心了。</code></p><h4 id="3-2-全局设置"><a href="#3-2-全局设置" class="headerlink" title="3.2 全局设置"></a>3.2 全局设置</h4><p>新建/etc/docker/daemon.json，若有就不用新建了。添加log-dirver和log-opts参数如下:</p><pre><code>{  &quot;registry-mirrors&quot;: [&quot;https://ud17re9w.mirror.aliyuncs.com&quot;],  &quot;log-driver&quot;:&quot;json-file&quot;,  &quot;log-opts&quot;: {&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;}}</code></pre><ul><li>max-size=500m，意味着一个容器日志大小上限是500M，</li><li>max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。</li></ul><h4 id="3-3-重启docker守护进程"><a href="#3-3-重启docker守护进程" class="headerlink" title="3.3 重启docker守护进程"></a>3.3 重启docker守护进程</h4><pre><code># systemctl daemon-reload# systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explan使用分析</title>
      <link href="/2018/06/03/mysql-explan/"/>
      <url>/2018/06/03/mysql-explan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Sql-示例"><a href="#Sql-示例" class="headerlink" title="Sql 示例"></a>Sql 示例</h3><pre><code>mysql&gt; explain select * from user;+----+-------------+-------+------+---------------+------+---------+------+------+-------+| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra |+----+-------------+-------+------+---------------+------+---------+------+------+-------+|  1 | SIMPLE      | user  | ALL  | NULL          | NULL | NULL    | NULL |    4 |       |+----+-------------+-------+------+---------------+------+---------+------+------+-------+1 row in set (0.00 sec)</code></pre><h3 id="Sql-分析"><a href="#Sql-分析" class="headerlink" title="Sql 分析"></a>Sql 分析</h3><ul><li><h4 id="id-查询的标识符"><a href="#id-查询的标识符" class="headerlink" title="id 查询的标识符"></a>id 查询的标识符</h4><blockquote><p>SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符,id如果相同，可以认为是一个分组，从上往下顺序执行,id值越大，表示优先级越高，越先执行。</p></blockquote></li><li><h4 id="select-type-SELECT-查询的类型"><a href="#select-type-SELECT-查询的类型" class="headerlink" title="select_type: SELECT 查询的类型."></a>select_type: SELECT 查询的类型.</h4><p><img src="https://mrliuqh.github.io/directionsImg/mysql/explan-selectType.png" alt=""></p></li><li><h4 id="table-查询的是哪个表"><a href="#table-查询的是哪个表" class="headerlink" title="table: 查询的是哪个表"></a>table: 查询的是哪个表</h4><a id="more"></a></li><li><h4 id="partitions-匹配的分区"><a href="#partitions-匹配的分区" class="headerlink" title="partitions: 匹配的分区"></a>partitions: 匹配的分区</h4></li><li><h4 id="type-显示访问类型，是较为重要的一个指标。"><a href="#type-显示访问类型，是较为重要的一个指标。" class="headerlink" title="type: 显示访问类型，是较为重要的一个指标。"></a>type: 显示访问类型，是较为重要的一个指标。</h4><p><img src="https://mrliuqh.github.io/directionsImg/mysql/explan-type.png" alt=""></p></li></ul><blockquote><p>从最好到最差依次是：system &gt;const &gt;eq_ref &gt;ref &gt;range &gt;index &gt;ALL</p></blockquote><font color="red">一般来说，得保证查询至少达到range级别，最好能达到ref </font><ul><li><h4 id="possible-keys-可能使用的索引"><a href="#possible-keys-可能使用的索引" class="headerlink" title="possible_keys: 可能使用的索引"></a>possible_keys: 可能使用的索引</h4><p><code>显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</code></p></li><li><h4 id="key-实际使用的索引"><a href="#key-实际使用的索引" class="headerlink" title="key: 实际使用的索引"></a>key: 实际使用的索引</h4><p><code>实际使用的索引。如果为NULL，则没有使用索引。查询中若使用了覆盖索引，则该索引仅出现在key列表中</code></p></li><li><h4 id="key-len-表示索引中使用的字节数"><a href="#key-len-表示索引中使用的字节数" class="headerlink" title="key_len:表示索引中使用的字节数"></a>key_len:表示索引中使用的字节数</h4><p><code>表示索引中使用的字节数，可通过该列计算查询中使用的索引长度。在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</code></p></li><li><h4 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h4><p><code>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列表或常量被用于查找索引列上的值</code></p></li><li><h4 id="rows-显示此查询一共扫描了多少行-这个是一个估计值"><a href="#rows-显示此查询一共扫描了多少行-这个是一个估计值" class="headerlink" title="rows: 显示此查询一共扫描了多少行. 这个是一个估计值."></a>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</h4></li><li><h4 id="filtered-表示此查询条件所过滤的数据的百分比"><a href="#filtered-表示此查询条件所过滤的数据的百分比" class="headerlink" title="filtered: 表示此查询条件所过滤的数据的百分比"></a>filtered: 表示此查询条件所过滤的数据的百分比</h4></li><li><h4 id="extra-额外的信息"><a href="#extra-额外的信息" class="headerlink" title="extra: 额外的信息"></a>extra: 额外的信息</h4><p><img src="https://mrliuqh.github.io/directionsImg/mysql/explan-extra.png" alt=""></p></li><li><h3 id="Explain的作用"><a href="#Explain的作用" class="headerlink" title="Explain的作用"></a>Explain的作用</h3></li><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-通道</title>
      <link href="/2018/05/08/Go-8.%E9%80%9A%E9%81%93/"/>
      <url>/2018/05/08/Go-8.%E9%80%9A%E9%81%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-为什么需要-channel？"><a href="#1-为什么需要-channel？" class="headerlink" title="1.为什么需要 channel？"></a>1.为什么需要 channel？</h1><p> 单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义。虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题。为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。Go语言提倡使用通信的方法代替共享内存，这里通信的方法就是使用通道。</p><h2 id="1-1-goroutine与channel的通信图"><a href="#1-1-goroutine与channel的通信图" class="headerlink" title="1.1 goroutine与channel的通信图"></a>1.1 goroutine与channel的通信图</h2><p><img src="https://mrliuqh.github.io/directionsImg/go/goroutine%E4%B8%8Echannel%E7%9A%84%E9%80%9A%E4%BF%A1.png" alt=""></p><h1 id="2-通道的特性"><a href="#2-通道的特性" class="headerlink" title="2. 通道的特性"></a>2. 通道的特性</h1><ul><li>道是一种特殊的类型</li><li><p>任何时候，同时只能有一个goroutine访问通道进行发送和获取数据</p></li><li><p>channle本质就是一个数据结构-队列<br><img src="https://mrliuqh.github.io/directionsImg/go/gochannel.png" alt=""></p><ul><li>goroutine间通过通道就可以通信</li><li>通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序</li><li>channel 是线程安全，多个协程操作同一个channel时，不会发生资源竞争问题（竞态）</li></ul></li></ul><h1 id="3-创建通道"><a href="#3-创建通道" class="headerlink" title="3. 创建通道"></a>3. 创建通道</h1><h2 id="3-1-创建无缓冲通道"><a href="#3-1-创建无缓冲通道" class="headerlink" title="3.1 创建无缓冲通道"></a>3.1 创建无缓冲通道</h2><p><code>通道是引用类型，需要使用make进行创建</code></p><pre><code>通道实例 := make(chan数据类型)</code></pre><ul><li>数据类型：通道内传输的元素类型。</li><li>通道实例：通过make创建的通道句柄。</li></ul><p><b>使用格式</b></p><pre><code>// 创建一个整型类型的通道intch := make(chan int)  // 创建一个空接口类型的通道，可以存放任意格式interfacech := make(chan interface{}) // 创建Mystruct指针类型的通道，可以存放＊Equiptype Mystruct struct{   /* 一些字段 */     ...}structch := make(chan ＊Mystruct)         </code></pre><h2 id="3-2-创建有缓冲通道"><a href="#3-2-创建有缓冲通道" class="headerlink" title="3.2 创建有缓冲通道"></a>3.2 创建有缓冲通道</h2><p>在无缓冲通道的基础上，为通道增加一个有限大小的存储空间形成带缓冲通道。带缓冲通道在发送时无需等待接收方接收即可完成发送过程，并且不会发生阻塞，只有当存储空间满时才会发生阻塞。同理，如果缓冲通道中有数据，接收时将不会发生阻塞，直到通道中没有数据可读时，通道将会再度阻塞。</p><p><b>声明格式</b></p><pre><code>通道实例 := make(chan通道类型, 缓冲大小)</code></pre><ul><li>通道类型：和无缓冲通道用法一致，影响通道发送和接收的数据类型。</li><li>缓冲大小：决定通道最多可以保存的元素数量。</li><li>通道实例：被创建出的通道实例。</li></ul><p><b>使用示例</b></p><pre><code>func main() {    //创建可以存放 3 map 类型通道    intCh := make(chan int, 3)    //数据发送到通道中    intCh &lt;- 34    intCh &lt;- 20    intCh &lt;- 10    /*    注意: 当我们给通道写入数据时，不能超过其容量,          否则报错:fatal error: all goroutines are asleep - deadlock!    */    //intCh &lt;- 1 }</code></pre><p><code>当我们给通道写入数据时，不能超过其容量,否则报错:fatal error: all goroutines are asleep - deadlock!</code></p><h2 id="3-3-带缓冲通道阻塞条件"><a href="#3-3-带缓冲通道阻塞条件" class="headerlink" title="3.3 带缓冲通道阻塞条件"></a>3.3 带缓冲通道阻塞条件</h2><p>带缓冲通道在很多特性上和无缓冲通道是类似的。无缓冲通道可以看作是长度永远为0的带缓冲通道。因此根据这个特性，带缓冲通道在下面列举的情况下依然会发生阻塞。</p><ul><li>带缓冲通道被填满时，尝试再次发送数据时发生阻塞。</li><li>带缓冲通道为空时，尝试接收数据时发生阻塞。</li></ul><h2 id="3-4-为什么对通道要限制长度？"><a href="#3-4-为什么对通道要限制长度？" class="headerlink" title="3.4 为什么对通道要限制长度？"></a>3.4 为什么对通道要限制长度？</h2><p>我们知道通道（channel）是在两个goroutine间通信的桥梁。使用goroutine的代码必然有一方提供数据，一方消费数据。<code>当提供数据一方的数据供给速度大于消费方的数据处理速度时，如果通道不限制长度，那么内存将不断膨胀直到应用崩溃。</code>因此，限制通道的长度有利于约束数据提供方的供给速度，供给数据量必须在消费方处理量+通道长度的范围内，才能正常地处理数据。</p><h2 id="3-5-单向通道声明"><a href="#3-5-单向通道声明" class="headerlink" title="3.5 单向通道声明"></a>3.5 单向通道声明</h2><p><code>只能发送的通道类型为: chan &lt;- x，只能接收的通道类型为: x &lt;- chan</code></p><pre><code>ch := make(chan int)// 声明一个只能发送的通道类型，并赋值为chvar ch Send Only chan&lt;- int = ch//声明一个只能接收的通道类型，并赋值为chvar ch Recv Only &lt;-chan int = ch</code></pre><h1 id="4-发送数据"><a href="#4-发送数据" class="headerlink" title="4.发送数据"></a>4.发送数据</h1><p><code>通道创建后，就可以使用特殊的操作符“&lt;-”，向通道进行发送或者从通道接收数据。</code></p><h2 id="4-1-使用方法"><a href="#4-1-使用方法" class="headerlink" title="4.1 使用方法"></a>4.1 使用方法</h2><pre><code>func main() {    //创建可以存放 3 map 类型通道    intCh := make(chan int, 3)    //数据发送到通道中    intCh &lt;- 34    intCh &lt;- 20    intCh &lt;- 10    /*    注意: 当我们给管写入数据时，不能超过其容量,          否则报错:fatal error: all goroutines are asleep - deadlock!    */    //intCh &lt;- 1 }</code></pre><h1 id="5-接收数据"><a href="#5-接收数据" class="headerlink" title="5. 接收数据"></a>5. 接收数据</h1><h2 id="5-1-阻塞接收数据"><a href="#5-1-阻塞接收数据" class="headerlink" title="5.1 阻塞接收数据"></a>5.1 阻塞接收数据</h2><p><code>阻塞模式接收数据时，将接收变量作为“&lt;-”操作符的左值，格式如下:</code></p><pre><code>data := &lt;-ch</code></pre><blockquote><p>执行该语句时将会阻塞，直到接收到数据并赋值给data变量</p></blockquote><h2 id="5-2-非阻塞接收数据"><a href="#5-2-非阻塞接收数据" class="headerlink" title="5.2 非阻塞接收数据"></a>5.2 非阻塞接收数据</h2><p><code>使用非阻塞方式从通道接收数据时，语句不会发生阻塞，格式如下：</code></p><pre><code>data, ok := &lt;-ch</code></pre><ul><li>data：表示接收到的数据。未接收到数据时，data为通道类型的零值。</li><li>ok：表示是否接收到数据。<blockquote><p>非阻塞的通道接收方法可能造成高的CPU占用，因此使用非常少。如果需要实现接收超时检测，可以配合select和计时器channel进行。</p></blockquote></li></ul><h2 id="5-3-接收任意数据，忽略接收的数据"><a href="#5-3-接收任意数据，忽略接收的数据" class="headerlink" title="5.3 接收任意数据，忽略接收的数据"></a>5.3 接收任意数据，忽略接收的数据</h2><p><code>阻塞接收数据后，忽略从通道返回的数据，格式如下：</code></p><pre><code>&lt;-ch</code></pre><blockquote><p>执行该语句时将会发生阻塞，直到接收到数据，但接收到的数据会被忽略。<font color="ffb800">这个方式实际上只是通过通道在goroutine间阻塞收发实现并发同步。</font></p></blockquote><ul><li><p>使用示例</p><pre><code>func main() {  intCh := make(chan int)  start := time.Now()  testNum := 10  go func() {      fmt.Println(&quot;start goroutine....&quot;)      for i := 0; i &lt; 3; i++ {          testNum += i          time.Sleep(time.Second)      }      //数据写入通道      intCh &lt;- testNum      fmt.Println(&quot;end goroutine....&quot;)  }()  //等待匿名函数执行完成  fmt.Println(&quot;wait goroutine...&quot;)  //执行该语句时将会发生阻塞，直到接收到数据，但接收到的数据会被忽略  &lt;-intCh  diff := time.Now().Sub(start)  fmt.Printf(&quot;testNum: %d\n&quot;, testNum)  fmt.Println(&quot;耗时: &quot;, diff)}</code></pre></li></ul><h1 id="6-channel-使用的注意事项"><a href="#6-channel-使用的注意事项" class="headerlink" title="6. channel 使用的注意事项"></a>6. channel 使用的注意事项</h1><ul><li><p>channle的容量放满后，就不能再放入了</p></li><li><p>channel中只能存放指定的数据类型</p></li><li>空接口类型的通道能接收任意参数</li></ul><pre><code>interfaceCh := make(chan interface{}, 4)//发送字符串interfaceCh &lt;- &quot;hello&quot;//发送整型interfaceCh &lt;- 100//发送切片interfaceCh &lt;- []int{1, 2, 3, 4}/*range函数遍历每个从通道接收到的数据，因为queue再发送完3个数据之后就关闭了通道，所以这里我们range函数在接收到3个数据之后就结束了。如果上面的queue通道不关闭，那么range函数就不会结束，从而在接收第4个数据的时候就阻塞了。 */close(interfaceCh)for data := range interfaceCh {    fmt.Println(data)}</code></pre><ul><li><p>发送将持续阻塞直到数据被接收</p></li><li><p>通过range函数遍历通道接收数据时，要再发送完数据到通道后，用Close()函数显示的关闭通道，否则range函数就不会结束</p></li><li>通道一次只能接收一个数据元素</li></ul><h1 id="7-使用select多路复用"><a href="#7-使用select多路复用" class="headerlink" title="7. 使用select多路复用"></a>7. 使用select多路复用</h1><p><code>在使用通道时，想同时接收多个通道的数据是一件困难的事情。通道在接收数据时，如果没有数据可以接收将会发生阻塞。</code></p><p>虽然可以使用如下模式进行遍历，但运行性能会非常差。</p><pre><code>//运行性能会非常差for{    // 尝试接收ch1通道    data, ok := &lt;-ch1    // 尝试接收ch2通道    data, ok := &lt;-ch2    // 接收后续通道    …}</code></pre><p><code>Go语言中提供了select关键字，可以同时响应多个通道的操作。select的每个case都会对应一个通道的收发过程。当收发完成时，就会触发case中响应的语句。多个操作在每次select中挑选一个进行响应。</code></p><h2 id="7-1-声明格式"><a href="#7-1-声明格式" class="headerlink" title="7.1 声明格式"></a>7.1 声明格式</h2><p>格式如下：</p><pre><code>select{  case 操作1:      //响应操作1  case 操作2:      //响应操作2       …  default:    //没有操作情况}</code></pre><ul><li><p>case &lt;- ch: 代表接收任意数据</p></li><li><p>case d:= &lt;-ch: 接收变量</p></li><li><p>case ch &lt;- 120: 发送数据到通道</p></li></ul><h2 id="7-2-使用示例"><a href="#7-2-使用示例" class="headerlink" title="7.2 使用示例"></a>7.2 使用示例</h2><pre><code>//生成通道int chintCh := make(chan int, 10)for i := 1; i &lt; 10; i++ {    intCh &lt;- i}//生成通道string chstrCh := make(chan string, 10)for i := 1; i &lt; 10; i++ {    strCh &lt;- &quot;String:&quot; + fmt.Sprintf(&quot;%d&quot;, i)}/*传统的方法在遍历管道时，如果不关闭会阻塞,从而导致deadlock，在实际开发中，可能我们不好确定什么关闭该管道, 可以使用 select 方式可以解决*///使用selectfor {    select {    case v := &lt;-intCh:        fmt.Println(&quot;intCH: &quot;, v)    case v := &lt;-strCh:        fmt.Println(&quot;strCh: &quot;, v)    default:        fmt.Println(&quot;Noting!&quot;)        return    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-并发使用</title>
      <link href="/2018/05/07/Go-7.%E5%B9%B6%E5%8F%91%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/07/Go-7.%E5%B9%B6%E5%8F%91%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-并发和并行"><a href="#1-并发和并行" class="headerlink" title="1. 并发和并行"></a>1. 并发和并行</h1><h2 id="1-1-并发"><a href="#1-1-并发" class="headerlink" title="1.1 并发"></a>1.1 并发</h2><p>多线程程序在单核上运行，就是并发</p><h3 id="1-1-1-并发的特点"><a href="#1-1-1-并发的特点" class="headerlink" title="1.1.1 并发的特点"></a>1.1.1 并发的特点</h3><ul><li>多个任务作用在一个cpu</li><li>从微观角度看，在一个时间点上，只有一个任务在执行</li></ul><h2 id="1-2-并行"><a href="#1-2-并行" class="headerlink" title="1.2 并行"></a>1.2 并行</h2><p>多线程程序在多核上运行，就是并行</p><h3 id="1-2-1-并行的特点"><a href="#1-2-1-并行的特点" class="headerlink" title="1.2.1 并行的特点"></a>1.2.1 并行的特点</h3><ul><li>多个任务作用在多个cpu</li><li>从微观角度看，在一个时间点上，有多个任务在执行</li></ul><h1 id="2-Go-协程和-Go-主线程"><a href="#2-Go-协程和-Go-主线程" class="headerlink" title="2. Go 协程和 Go 主线程"></a>2. Go 协程和 Go 主线程</h1><h2 id="2-1-关系介绍"><a href="#2-1-关系介绍" class="headerlink" title="2.1 关系介绍"></a>2.1 关系介绍</h2><ul><li>主线程是一个物理线程，直接作用在 cpu 上的。是重量级的，非常耗费 cpu 资源。</li><li>协程从主线程开启的，是轻量级的线程，是逻辑态。对资源消耗相对小。</li><li>Go的协程机制是重要的特点，可以轻松的开启上万个协程。其它编程语言的并发机制是一<br>般基于线程的，开启过多的线程，资源耗费大，这里就突显 Go在并发上的优势了</li></ul><h2 id="2-2-Go主进程和Go协程（goroutine）关系示意图"><a href="#2-2-Go主进程和Go协程（goroutine）关系示意图" class="headerlink" title="2.2 Go主进程和Go协程（goroutine）关系示意图"></a>2.2 Go主进程和Go协程（goroutine）关系示意图</h2><p><img src="https://mrliuqh.github.io/directionsImg/go/go%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B.png" alt=""></p><h2 id="2-3-Go协程的特点"><a href="#2-3-Go协程的特点" class="headerlink" title="2.3 Go协程的特点"></a>2.3 Go协程的特点</h2><ul><li>有独立的栈空间</li><li>共享程序堆空间</li><li>调度由用户控制</li><li>协程是轻量级的线程</li></ul><h1 id="3-Go协程（Goroutine）的使用"><a href="#3-Go协程（Goroutine）的使用" class="headerlink" title="3. Go协程（Goroutine）的使用"></a>3. Go协程（Goroutine）的使用</h1><p>Go程序中使用go关键字为一个函数创建一个goroutine。一个函数可以被创建多个goroutine，一个goroutine必定对应一个函数。</p><h2 id="3-1-使用方式"><a href="#3-1-使用方式" class="headerlink" title="3.1 使用方式"></a>3.1 使用方式</h2><h3 id="3-1-1-普通函数创建goroutine"><a href="#3-1-1-普通函数创建goroutine" class="headerlink" title="3.1.1 普通函数创建goroutine"></a>3.1.1 普通函数创建goroutine</h3><p><b>使用格式</b></p><pre><code>go 函数名 ( 参数列表 )</code></pre><ul><li>函数名：要调用的函数名。</li><li>参数列表：调用函数需要传入的参数。<blockquote><p><font color="red">使用go关键字创建goroutine时，被调用函数的返回值会被忽略。</font>如果需要在goroutine中返回数据，则需要通过通道（channel）把数据从goroutine中作为返回值传出。</p></blockquote></li></ul><p><b>使用示例</b></p><pre><code>package mainimport (    &quot;fmt&quot;    &quot;time&quot;    &quot;strconv&quot;)func test() {    var i =1    for {        fmt.Println(&quot;&quot;+strconv.Itoa(i))        time.Sleep(time.Second)        i++    }}func main() {    // 为一个普通函数创建goroutine    go test()    //接收用户输入,知道按Enter键时    var input string    //将用户输入内容写入input变量中，并返回，整个程序终止    fmt.Scanln(&amp;input)}</code></pre><p>输出：</p><pre><code>123456...exit</code></pre><blockquote><font color="red">所有goroutine在mian()函数结束时会一同结束</font></blockquote><h3 id="3-1-2-匿名函数创建goroutine"><a href="#3-1-2-匿名函数创建goroutine" class="headerlink" title="3.1.2 匿名函数创建goroutine"></a>3.1.2 匿名函数创建goroutine</h3><p><code>go关键字后也可以为匿名函数或闭包启动goroutine</code></p><p><b>使用格式</b><br><code>使用匿名函数或闭包创建goroutine时，除了将函数定义部分写在go的后面之外，还需要加上匿名函数的调用参数</code></p><pre><code>go func( 参数列表 ){         函数体}( 调用参数列表 )</code></pre><ul><li>参数列表：函数体内的参数变量列表。</li><li>函数体：匿名函数的代码。</li><li>调用参数列表：启动goroutine时，需要向匿名函数传递的调用参数</li></ul><p><b>使用示例</b></p><pre><code>package mainimport (    &quot;fmt&quot;    &quot;time&quot;)func main() {    go func() {        var i int        for {            fmt.Println(&quot;计时器:&quot;, i)            time.Sleep(time.Second)            i++        }    }()    var input string    fmt.Scanln(&amp;input)}</code></pre><h2 id="3-2-并发运行性能调整"><a href="#3-2-并发运行性能调整" class="headerlink" title="3.2 并发运行性能调整"></a>3.2 并发运行性能调整</h2><h3 id="3-2-1-设置运行的-cpu-数"><a href="#3-2-1-设置运行的-cpu-数" class="headerlink" title="3.2.1 设置运行的 cpu 数"></a>3.2.1 设置运行的 cpu 数</h3><p><code>为了充分了利用多 cpu 的优势，在 Golang 程序中，可以通过runtime.GOMAXPROCS() 函数 设置运行的 cpu 数目</code></p><p><b>使用格式:</b></p><pre><code>runtime.GOMAXPROCS( 逻辑CPU)//逻辑CPU可以通过 runtime.NumCpu()函数获取</code></pre><p>这里的逻辑CPU数量可以有如下几种数值:</p><ul><li>逻辑CPU &lt; 1：不修改任何数值</li><li>逻辑CPU = 1：单核心执行</li><li>逻辑CPU &gt; 1：多核并发执行</li></ul><p><b>注意事项:</b></p><ul><li>Go 1.5版本之前，默认使用的是单核心执行。从Go 1.5版本开始，默认执行上面语句以便让代码并发执行，最大效率地利用CPU。</li><li>GOMAXPROCS同时也是一个环境变量，在应用程序启动前设置环境变量也可以起到相同的作用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 使用中遇到的问题</title>
      <link href="/2018/05/03/question-for-docker/"/>
      <url>/2018/05/03/question-for-docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="问题1-gt-E-Unable-to-fetch-some-archives-maybe-run-apt-get-update-or-try-with-–fix-missing"><a href="#问题1-gt-E-Unable-to-fetch-some-archives-maybe-run-apt-get-update-or-try-with-–fix-missing" class="headerlink" title="问题1&gt;E: Unable to fetch some archives, maybe run apt-get update or try with –fix-missing?"></a>问题1&gt;E: Unable to fetch some archives, maybe run apt-get update or try with –fix-missing?</h5><p>具体报错：</p><pre><code>E: Fetched 1837 kB in 21s (84.9 kB/s)Failed to fetch http://security.debian.org/pool/updates/main/p/php5/php5-common_5.6.33+dfsg-0+deb8u1_amd64.deb  404  Not FoundE: Failed to fetch http://security.debian.org/pool/updates/main/p/php5/php5-cli_5.6.33+dfsg-0+deb8u1_amd64.deb  404  Not FoundE: Failed to fetch http://security.debian.org/pool/updates/main/p/php5/php-pear_5.6.33+dfsg-0+deb8u1_all.deb  404  Not FoundE: Failed to fetch http://security.debian.org/pool/updates/main/p/php5/php5-readline_5.6.33+dfsg-0+deb8u1_amd64.deb  404  Not FoundE: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?ERROR: Service &#39;php-fpm&#39; failed to build: The command &#39;/bin/sh -c if [ ${INSTALL_SOAP} = true ]; then     rm /etc/apt/preferences.d/no-debian-php      &amp;&amp; apt-get -y install libxml2-dev php-soap      &amp;&amp; docker-php-ext-install soap ;fi&#39; returned a non-zero code: 100</code></pre><a id="more"></a><blockquote><p>在相应的扩展中添加「 apt-get update 」如下：</p></blockquote><p><span style="color:green">解决方案:</span></p><pre><code>ARG INSTALL_SOAP=falseRUN if [ ${INSTALL_SOAP} = true ]; then \    rm /etc/apt/preferences.d/no-debian-php  \    &amp;&amp; apt-get update -y \    &amp;&amp; apt-get -y install libxml2-dev php-soap  \    &amp;&amp; docker-php-ext-install soap \;fi</code></pre><!--##### 问题2> E: Some index files failed to download. They have been ignored, or old ones used instead--><h5 id="问题2-gt-ERROR-Service-‘redis’-failed-to-build-OCI-runtime-create-failed-container-linux-go-344-starting-container-process-caused-“process-linux-go-293-copying-bootstrap-data-to-pipe-caused-”write-init-p-broken-pipe-””-unknown"><a href="#问题2-gt-ERROR-Service-‘redis’-failed-to-build-OCI-runtime-create-failed-container-linux-go-344-starting-container-process-caused-“process-linux-go-293-copying-bootstrap-data-to-pipe-caused-”write-init-p-broken-pipe-””-unknown" class="headerlink" title="问题2&gt;ERROR: Service ‘redis’ failed to build: OCI runtime create failed: container_linux.go:344: starting container process caused “process_linux.go:293: copying bootstrap data to pipe caused \”write init-p: broken pipe\””: unknown"></a>问题2&gt;ERROR: Service ‘redis’ failed to build: OCI runtime create failed: container_linux.go:344: starting container process caused “process_linux.go:293: copying bootstrap data to pipe caused \”write init-p: broken pipe\””: unknown</h5><p><span style="color:green">解决方案:</span></p><ul><li>通过容器降级<pre><code>sudo yum downgrade -y containerd.io-1.2.2-3.el7</code></pre></li></ul><h5 id="问题3-gt-Unable-to-find-expected-entry-‘main-binary-amd64-Packages’"><a href="#问题3-gt-Unable-to-find-expected-entry-‘main-binary-amd64-Packages’" class="headerlink" title="问题3&gt; Unable to find expected entry ‘main/binary-amd64/Packages’"></a>问题3&gt; Unable to find expected entry ‘main/binary-amd64/Packages’</h5><p><strong>Unable to locate package</strong><br>apt 需要换成国内源</p><pre><code>Step 94/98 : RUN apt-get update &amp;&amp; apt-get install -y software-properties-common &amp;&amp; add-apt-repository -y ppa:alex-p/tesseract-ocr ---&gt; Running in 252ccd15262aGet:1 http://security.debian.org jessie/updates InRelease [44.9 kB]Ign http://deb.debian.org jessie InReleaseGet:2 http://deb.debian.org jessie-updates InRelease [7340 B]Get:3 http://deb.debian.org jessie Release.gpg [2420 B]Get:4 http://deb.debian.org jessie Release [148 kB]Get:5 http://security.debian.org jessie/updates/main amd64 Packages [832 kB]Get:6 http://deb.debian.org jessie/main amd64 Packages [9098 kB]Get:7 http://security.debian.org jessie/updates/main amd64 Packages [832 kB]Fetched 10.1 MB in 10min 9s (16.6 kB/s)W: Failed to fetch http://deb.debian.org/debian/dists/jessie-updates/InRelease  Unable to find expected entry &#39;main/binary-amd64/Packages&#39; in Release file (Wrong sources.list entry or malformed file)E: Some index files failed to download. They have been ignored, or old ones used instead.ERROR: Service &#39;php-fpm&#39; failed to build: The command &#39;/bin/sh -c apt-get update &amp;&amp; apt-get install -y software-properties-common &amp;&amp; add-apt-repository -y ppa:alex-p/tesseract-ocr&#39; returned a non-zero code: 100</code></pre><p><span style="color:green">解决方案:</span><br>在对应的命令行前加上：</p><pre><code>RUN printf &quot; #deb包\n deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\n ##测试版源\n deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse\n # 源码\n deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\n ##测试版源\n deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse\n&quot; &gt; /etc/apt/sources.list</code></pre><h5 id="问题4-gt-docker-Error-response-from-daemon-Cannot-link-toto-laradock-mysql-1-as-it-does-not-belong-to-the-default-network"><a href="#问题4-gt-docker-Error-response-from-daemon-Cannot-link-toto-laradock-mysql-1-as-it-does-not-belong-to-the-default-network" class="headerlink" title="问题4&gt; docker: Error response from daemon: Cannot link toto /laradock_mysql_1, as it does not belong to the default network"></a>问题4&gt; docker: Error response from daemon: Cannot link toto /laradock_mysql_1, as it does not belong to the default network</h5><ul><li>查看网络<pre><code>NETWORK ID          NAME                               DRIVER              SCOPEc8dfb8a44422        bridge                             bridge              local0fe587efe71f        chaincode-docker-devmode_default   bridge              local3d3c9e4de651        e2e_default                        bridge              localdce17f3c06ca        ethereum-docker_default            bridge              local0eca3f311ce7        host                               host                local57912953f3e5        laradock_backend                   bridge              local35be8b9a0f70        laradock_default                   bridge              locald3e733ccb976        laradock_frontend                  bridge              locald67e463037d2        none                               null                local</code></pre><span style="color:red">原因分析:</span><br>造成问题的原因是 Docker-Compose命名约定造成。<blockquote><p>使用docker-compose时，您的网络名称是根据docker-compose“项目名称”决定的，该项目名称基于其所在目录的名称。您可以使用-project-name标志覆盖项目名称或 COMPOSE_PROJECT_NAME环境变量。 我的docker-compose.yml文件位于一个名为dock的目录中，这就是为什么docker-compose在创建正在运行的容器实例时选择了dock_default！</p></blockquote></li></ul><p><span style="color:green">解决方案:</span>：run 命令后增加–net参数，根据docker-compose 网络</p><h5 id="问题5-gt-Centos7-Failed-to-get-D-Bus-connection-Operation-not-permitted"><a href="#问题5-gt-Centos7-Failed-to-get-D-Bus-connection-Operation-not-permitted" class="headerlink" title="问题5 &gt; Centos7 Failed to get D-Bus connection: Operation not permitted"></a>问题5 &gt; Centos7 Failed to get D-Bus connection: Operation not permitted</h5><p><span style="color:red">原因分析:</span></p><blockquote><p>大约在0.6版，privileged被引入docker。<br>使用该参数，container内的root拥有真正的root权限。<br>否则，container内的root只是外部的一个普通用户权限</p></blockquote><p><span style="color:green">解决方案:</span></p><pre><code> # docker run -d --name centos7 --privileged=true centos:7 /usr/sbin/init</code></pre>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-接口</title>
      <link href="/2018/04/14/Go-6.%E6%8E%A5%E5%8F%A3/"/>
      <url>/2018/04/14/Go-6.%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Go 语言不是一种 “传统” 的面向对象编程语言：它里面没有类和继承的概念。但是 Go 语言里有非常灵活的<code>接口</code>概念，通过它可以实现很多面向对象的特性</p></blockquote><h1 id="1-什么是interface-接口"><a href="#1-什么是interface-接口" class="headerlink" title="1. 什么是interface(接口)"></a>1. 什么是interface(接口)</h1><p><code>简单地说，interface是一组method的组合，但是这些method不包含（实现）代码,我们通过interface来定义对象的一组行为。</code></p><blockquote><p>接口里不能包含变量</p></blockquote><h1 id="2-接口声明"><a href="#2-接口声明" class="headerlink" title="2. 接口声明"></a>2. 接口声明</h1><pre><code>type Namer interface {    Method1(参数列表1) 返回值列表1    Method2(参数列表2) 返回值列表    ...}</code></pre><p>示例</p><pre><code>// 变量名未忽略type writer interface{    Write(p []byte) (n int, err error)}// 变量名被忽略type writer interface{     Write([]byte) (int, error)}</code></pre><h1 id="3-接口规范"><a href="#3-接口规范" class="headerlink" title="3. 接口规范"></a>3. 接口规范</h1><ul><li><p>接口类型名：方法的接口名,<font color="red">由方法名加 [e]r 后缀组成</font>，例如 Printer、Reader、Writer、Logger、Converter 等等。还有一些不常用的方式（当后缀 er 不合适时），比如 Recoverable，此时接口名以 able 结尾，或者以 I 开头。</p></li><li><p>方法名：当方法名首字母是大写时，且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</p></li><li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以被忽略，</li><li>Go 语言中的接口都很简短，通常它们会包含 0 个、最多 3 个方法</li><li>接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序设计的多态和高内聚低偶合的思想</li></ul><h1 id="4-接口嵌套-接口继承"><a href="#4-接口嵌套-接口继承" class="headerlink" title="4. 接口嵌套(接口继承)"></a>4. 接口嵌套(接口继承)</h1><blockquote><p>在Go语言中，不仅结构体与结构体之间可以嵌套，接口与接口间也可以通过嵌套创造出新的接口。<br>接口与接口嵌套组合而成了新接口，只要接口的所有方法被实现，则这个接口中的所有嵌套接口的方法均可以被调用</p></blockquote><p><code>比如接口 File 包含了 ReadWrite 和 Lock 的所有方法，它还额外有一个 Close() 方法</code></p><pre><code>type ReadWrite interface {    Read(b Buffer) bool    Write(b Buffer) bool}type Lock interface {    Lock()    Unlock()}type File interface {    ReadWrite    Lock    Close()}</code></pre><blockquote><p><font color="red">一个接口(比如 A 接口)可以继承多个别的接口(比如 B,C 接口)，这时如果要实现 A 接口，也必须将 B,C 接口的方法也全部实现</font></p></blockquote><h1 id="5-接口实现"><a href="#5-接口实现" class="headerlink" title="5. 接口实现"></a>5. 接口实现</h1><p>如果一个类型实现了一个接口里的所有方法，那么这个类型就实现了这个接口</p><p>如下面示例，类型fileHandle 实现了DataWrite接口:</p><pre><code>type DataWrite interface {    Write(data interface{}) error}type fileHandle struct {      ....}func (f fileHandle)Write(data interface{}) error  {    fmt.Println(&quot;文件写入中....&quot;)    return nil}</code></pre><h1 id="6-类型与接口的关系"><a href="#6-类型与接口的关系" class="headerlink" title="6.类型与接口的关系"></a>6.类型与接口的关系</h1><p>类型和接口之间有一对多和多对一的关系。</p><h2 id="6-1-一对多"><a href="#6-1-一对多" class="headerlink" title="6.1 一对多"></a>6.1 一对多</h2><p>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。</p><pre><code>// 定义Writer接口type Writer interface{    Write([]byte) int}// 定义Reader接口type Reader interface{    Read()}// 定义一个File类型type File struct {}// File类型 实现Writer接口func (f File)Write(p []byte) int {    return 0}// File类型 定义Reader接口func (f File)Read() {}</code></pre><h2 id="6-2-多对一"><a href="#6-2-多对一" class="headerlink" title="6.2 多对一"></a>6.2 多对一</h2><p>一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。也就是说，使用者并不关心某个接口的方法是通过一个类型完全实现的，还是通过多个结构嵌入到一个结构体中拼凑起来共同实现的。</p><ul><li>示例分析</li></ul><p>Service接口定义了两个方法：一个是开启服务的方法:Start()，一个是输出日志的方法:Log()。使用GameService结构体来实现Service，GameService结构只能实现Start()方法，Service接口中的Log()方法被日志器（Logger）实现了，将Logger嵌入到GameService中，则达成了GameService结构体实现Service接口，从而能最大程度地避免代码冗余，简化代码结构。</p><p>详细实现过程如下：</p><pre><code>01  // 一个服务需要满足能够开启和写日志的功能02   type Service interface {03       Start()          // 开启服务04       Log(string)     // 日志输出05   }0607  // 日志器08   type Logger struct {09   }1011  // 实现Service的Log()方法12   func (g ＊Logger) Log(l string) {1314   }1516  // 游戏服务17   type GameService struct {18       Logger                                    // 嵌入日志器19   }2021  // 实现Service的Start()方法22   func (g ＊GameService) Start() {23   }</code></pre><p>代码说明如下：</p><ul><li>第2行，定义服务接口，一个服务需要实现Start()方法和日志方法。</li><li>第8行，定义能输出日志的日志器结构。</li><li>第12行，为Logger添加Log()方法，同时实现Service的Log()方法。</li><li>第17行，定义GameService结构</li><li>第18行，在Game Service中嵌入Logger日志器，以实现日志功能。</li><li>第22行，Game Service的Start()方法实现了Service的Start()方法。</li></ul><p>此时，实例化GameService，并将实例赋给Service，代码如下：</p><pre><code>var s Service = new(Game Service)s.Start()s.Log(&quot;hello&quot;)</code></pre><p>s就可以使用Start()方法和Log()方法，其中，Start()由GameService实现，Log()方法由Logger实现。</p><h1 id="7-接口和类型间转换"><a href="#7-接口和类型间转换" class="headerlink" title="7. 接口和类型间转换"></a>7. 接口和类型间转换</h1><p>Go语言中使用接口断言（type assertions）将接口转换成另外一个接口，也可以将接口转换为另外的类型。接口的转换在开发中非常常见，使用也非常频繁。</p><h2 id="7-1-类型断言的格式"><a href="#7-1-类型断言的格式" class="headerlink" title="7.1 类型断言的格式"></a>7.1 类型断言的格式</h2><p>如果发生接口未实现时，将会把ok置为false，t置为T类型的0值。正常实现时，ok为true。<br>这里ok可以被认为是：<code>i接口是否实现T类型的结果</code>。</p><p>类型断言的基本格式如下：</p><pre><code>t,ok := i.(T)</code></pre><ul><li>i 代表接口变量。</li><li>T 代表转换的目标类型。</li><li>t 代表转换后的变量。</li></ul><h2 id="7-2-将接口转为其他接口"><a href="#7-2-将接口转为其他接口" class="headerlink" title="7.2 将接口转为其他接口"></a>7.2 将接口转为其他接口</h2><p><code>实现某个接口的类型同时实现了另外一个接口，此时可以在两个接口间转换。</code></p><ul><li>代码示例</li></ul><p>鸟和猪具有不同的特性，鸟可以飞，猪不能飞，但两种动物都可以行走。如果使用结构体实现鸟和猪，让它们具备自己特性的Fly()和Walk()方法就让鸟和猪各自实现了飞行动物接口（Flyer）和行走动物接口（Walker）。<br>将鸟和猪的实例创建后，被保存到interface{}类型的map中。interface{}类型表示空接口，意思就是这种接口可以保存为任意类型。对保存有鸟或猪的实例的interface{}变量进行断言操作，如果断言对象是断言指定的类型，则返回转换为断言对象类型的接口；如果不是指定的断言类型时，断言的第二个参数将返回false。</p><p>实现代码如下：</p><pre><code>01   package main0203   import &quot;fmt&quot;0405  // 定义飞行动物接口06   type Flyer interface {07        Fly()08   }0910  // 定义行走动物接口11   type Walker interface {12        Walk()13   }1415  // 定义鸟类16   type bird struct {17   }1819  // 实现飞行动物接口20   func (b ＊bird) Fly() {21        fmt.Println(&quot;bird: fly&quot;)22   }2324  // 为鸟添加Walk()方法，实现行走动物接口25   func (b ＊bird) Walk() {26        fmt.Println(&quot;bird: walk&quot;)27   }2829  // 定义猪30   type pig struct {31   }3233  // 为猪添加Walk()方法，实现行走动物接口34   func (p ＊pig) Walk() {35        fmt.Println(&quot;pig: walk&quot;)36   }3738   func main() {3940       // 创建动物的名字到实例的映射41        animals := map[string]interface{}{42              &quot;bird&quot;: new(bird),43              &quot;pig&quot;:  new(pig),44        }4546       // 遍历映射47         for name, obj := range animals {4849           // 判断对象是否为飞行动物50              f, isFlyer := obj.(Flyer)51           // 判断对象是否为行走动物52              w, isWalker := obj.(Walker)5354             fmt.Printf(&quot;name: %s is Flyer: %v is Walker: %v\n&quot;, name, is Flyer, is Walker)5556           // 如果是飞行动物则调用飞行动物接口57              if isFlyer {58                    f.Fly()59             }6061            // 如果是行走动物则调用行走动物接口62              if isWalker {63                    w.Walk()64             }65        }66   }</code></pre><p>代码说明如下：</p><ul><li>第6行定义了飞行动物的接口。</li><li>第11行定义了行走动物的接口。</li><li>第16和30行分别定义了鸟和猪两个对象，并分别实现了飞行动物和行走动物接口。</li><li>第41行是一个map，映射对象名字和对象实例，实例是鸟和猪。</li><li>第47行开始遍历map，obj为interface{}接口类型。</li><li>第50行中，使用类型断言获得f，类型为Flyer及isFlyer的断言成功的判定。</li><li>第52行中，使用类型断言获得w，类型为Walker及isWalker的断言成功的判定。</li><li>第57和62行，根据飞行动物和行走动物两者</li></ul><p>代码输出如下：</p><pre><code>name: pig is Flyer: false is Walker: truepig: walkname: bird is Flyer: true is Walker: truebird: flybird: walk</code></pre><h1 id="8-空接口-—-能保存所有值的类型"><a href="#8-空接口-—-能保存所有值的类型" class="headerlink" title="8.空接口 — 能保存所有值的类型"></a>8.空接口 — 能保存所有值的类型</h1><p>空接口是接口类型的特殊形式，<code>空接口没有任何方法</code>，因此任何类型都无须实现空接口。从实现的角度看，任何值都满足这个接口的需求。因此空接口类型可以保存任何值，也可以从空接口中取出原值。</p><h2 id="8-1-将值保存到空接口"><a href="#8-1-将值保存到空接口" class="headerlink" title="8.1 将值保存到空接口"></a>8.1 将值保存到空接口</h2><pre><code>01   var any interface{}0203   any = 104   fmt.Println(any)0506   any = &quot;hello&quot;07   fmt.Println(any)0809   any = false10   fmt.Println(any)</code></pre><p>代码输出如下：</p><pre><code>1hellofalse</code></pre><ul><li>第1行，声明any为interface{}类型的变量。</li><li>第3行，为any赋值一个整型1。</li><li>第4行，打印any的值，提供给fmt.Println的类型依然是interface{}。</li><li>第6行，为any赋值一个字符串hello。此时any内部保存了一个字符串。但类型依然是interface{}。</li><li>第9行，赋值布尔值。</li></ul><h2 id="8-2-从空接口获取值"><a href="#8-2-从空接口获取值" class="headerlink" title="8.2 从空接口获取值"></a>8.2 从空接口获取值</h2><p>保存到空接口的值，如果直接取出指定类型的值时，会发生编译错误</p><p>代码如下：</p><pre><code>01  // 声明a变量，类型int，初始值为102   var a int = 10304  // 声明i变量，类型为interface{}，初始值为a，此时i的值变为105   var i interface{} = a0607  // 声明b变量，尝试赋值i08  var b int = i</code></pre><p>第8行代码编译报错：</p><pre><code>cannot use i (type interface {}) as type int in assignment: need type assertion</code></pre><blockquote><p>编译器告诉我们，不能将i变量视为int类型赋值给b。在代码第5行中，将a的值赋值给i时，虽然i在赋值完成后的内部值为int，但i还是一个interface{}类型的变量。</p></blockquote><p>为了让第8行的操作能够完成，<code>编译器提示我们得使用type assertion，意思就是类型断言</code>。</p><p>使用类型断言修改第8行代码如下：</p><pre><code>var b int = i.(int)</code></pre><p>修改后，代码可以编译通过，并且b可以获得i变量保存的a变量的值：1。</p><h2 id="8-3-空接口的值比较"><a href="#8-3-空接口的值比较" class="headerlink" title="8.3 空接口的值比较"></a>8.3 空接口的值比较</h2><p>空接口在保存不同的值后，可以和其他变量值一样使用“==”进行比较操作。空接口的比较有以下几种特性。</p><h3 id="8-3-1-类型不同的空接口间的比较结果不相同"><a href="#8-3-1-类型不同的空接口间的比较结果不相同" class="headerlink" title="8.3.1 类型不同的空接口间的比较结果不相同"></a>8.3.1 类型不同的空接口间的比较结果不相同</h3><p>保存有类型不同的值的空接口进行比较时，Go语言会优先比较值的类型。因此类型不同，比较结果也是不相同的，代码如下：</p><pre><code>01  // a保存整型02   var a interface{} = 1000304  // b保存字符串05   var b interface{} = &quot;hi&quot;0607  // 两个空接口不相等08   fmt.Println(a == b) // 输出: false</code></pre><h3 id="8-3-2-不能比较空接口中的动态值"><a href="#8-3-2-不能比较空接口中的动态值" class="headerlink" title="8.3.2 不能比较空接口中的动态值"></a>8.3.2 不能比较空接口中的动态值</h3><p>当接口中保存有动态类型的值时，运行时将触发错误，</p><p>代码如下：</p><pre><code>01  // c保存包含10的整型切片02   var c interface{} = []int{10}0304  // d保存包含20的整型切片05   var d interface{} = []int{20}0607  // 这里会发生崩溃08   fmt.Println(c == d)</code></pre><p>代码运行到第8行时发生崩溃：</p><pre><code>panic: runtime error: comparing uncomparable type []int</code></pre><p>这是一个运行时错误，提示[]int是不可比较的类型。<br>zhuoge</p><ul><li>下面列出了几种类型及比较情况</li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>map</td><td>宕机错误，不可比较</td></tr><tr><td>切片（[]T）</td><td>宕机错误，不可比较</td></tr><tr><td>通道（channel）</td><td>可比较，必须由一个make生成，也就是说同一个通道才会true，否则false</td></tr><tr><td>数组([容量]T)</td><td>可比较，编译期知道两个数组是否一致</td></tr><tr><td>结构体</td><td>可比较，可以逐个比较结构体的值</td></tr></tbody></table><h1 id="9-接口使用中的注意事项"><a href="#9-接口使用中的注意事项" class="headerlink" title="9.接口使用中的注意事项"></a>9.接口使用中的注意事项</h1><ul><li>接口本身不能创建实例,但是可以指向一个实现了该接口的自定义类型的变量(实例)</li></ul><pre><code>package mainimport &quot;fmt&quot;type PeopleI interface {    GetName() string}type Girl struct {    Name string}func (g Girl) GetName() string {    return g.Name}func main() {    var p PeopleI    var g Girl    g.Name = &quot;小花&quot;    p = g //指向一个实现了该接口的自定义类型的变量    fmt.Println(p.GetName())}</code></pre><ul><li>接口中所有的方法都没有方法体,即都是没有实现的方法。</li><li>在 Go中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现 了该接口。</li><li>一个自定义类型只有实现了某个接口，才能将该自定义类型的实例(变量)赋给接口类型</li><li>只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型</li><li>一个自定义类型可以实现多个接口</li><li>Go接口中不能有任何变量</li><li>interface类型默认是一个指针(引用类型)，如果没有对interface初始化就使用，那么会输出nil</li><li>空接口 interface{} 没有任何方法，所以所有类型都实现了空接口, 即我们可以把任何一个变量 赋给空接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-方法</title>
      <link href="/2018/04/11/Go-5.%E6%96%B9%E6%B3%95/"/>
      <url>/2018/04/11/Go-5.%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Golang 中的方法是作用在指定的数据类型上的(即:和指定的数据类型绑定)，因此自定义类型，都可以有方法，<code>而不仅仅是 struct</code></p></blockquote><h1 id="1-方法的声明"><a href="#1-方法的声明" class="headerlink" title="1.方法的声明"></a>1.方法的声明</h1><p>Go语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收器（Receiver）。<br>如果将特定类型理解为结构体或“类”时，接收器的概念就类似于其他语言中的this或者self。<br>在Go语言中，接收器的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。</p><h2 id="1-1-声明格式"><a href="#1-1-声明格式" class="headerlink" title="1.1 声明格式"></a>1.1 声明格式</h2><pre><code>func (接收器变量 接收器类型) 方法名(参数列表) (返回参数) {     函数体}</code></pre><ul><li>接收器变量：接收器中的参数变量名在命名时，官方建议使用接收器类型名的第一个小写字母，而不是self、this之类的命名。例如，Socket类型的接收器变量应该命名为s，Connector类型的接收器变量应该命名为c等。</li><li>接收器类型：接收器类型和参数类似，可以是指针类型和非指针类型。</li><li>方法名、参数列表、返回参数：格式与函数定义一致。</li></ul><h2 id="1-2-声明示例"><a href="#1-2-声明示例" class="headerlink" title="1.2 声明示例"></a>1.2 声明示例</h2><pre><code>type people struct {    Name, Like , Sex   string    Height, Weight float32}func (p people) walk() {    fmt.Println(p.Name + &quot; 在行走...&quot;)}func RunStruct()  {    var xiaomi people    xiaomi.Name = &quot;小明&quot;    xiaomi.Name = &quot;小明&quot;    p := people{&quot;小明&quot;,&quot;跑步&quot;, &quot;男&quot;, 170.0, 62.6}    p.walk()}func main() {    RunStruct()    //out: 小明 在行走...}</code></pre><h1 id="2-接收器分类"><a href="#2-接收器分类" class="headerlink" title="2.接收器分类"></a>2.接收器分类</h1><h2 id="2-1-指针类型的接收器"><a href="#2-1-指针类型的接收器" class="headerlink" title="2.1 指针类型的接收器"></a>2.1 指针类型的接收器</h2><p>理解指针类型的接收器<br>指针类型的接收器由一个结构体的指针组成，由于指针的特性，调用方法时，修改接收器指针的任意成员变量，在方法结束后，修改都是有效的。</p><p>在下面的例子，使用结构体定义一个属性（Property），为属性添加SetValue()方法以封装设置属性的过程，通过属性的Value()方法可以重新获得属性的数值。使用属性时，通过SetValue()方法的调用，可以达成修改属性值的效果。</p><pre><code>01   package main0203   import &quot;fmt&quot;0405  // 定义属性结构06   type Property struct {07       value int  // 属性值08   }0910  // 设置属性值11   func (p ＊Property) SetValue(v int) {1213       // 修改p的成员变量14        p.value = v15   }1617  // 取属性值18   func (p ＊Property) GetValue() int {19        return p.value20   }2122   func main() {2324       // 实例化属性25        p := new(Property)2627       // 设置值28        p.SetValue(100)2930       // 打印值31        fmt.Println(p.GetValue())32       // out: 10033   }</code></pre><p>代码说明如下：</p><ul><li>第6行，定义一个属性结构，拥有一个整型的成员变量。</li><li>第11行，定义属性值的方法。</li><li>第14行，设置属性值方法的接收器类型为指针。因此可以修改成员值，即便退出方法，也有效。</li><li>第18行，定义获取值的方法。</li><li>第25行，实例化属性结构。</li><li>第28行，设置值。此时成员变量变为100。</li><li>第31行，获取成员变量。</li></ul><h2 id="2-2-非指针类型的接收器"><a href="#2-2-非指针类型的接收器" class="headerlink" title="2.2 非指针类型的接收器"></a>2.2 非指针类型的接收器</h2><p>当方法作用于非指针接收器时，Go语言会在代码运行时将接收器的值复制一份。在非指针接收器的方法中可以获取接收器的成员值，但修改后无效。<br>点（Point）使用结构体描述时，为点添加Add()方法，这个方法不能修改Point的成员X、Y变量，而是在计算后返回新的Point对象。Point属于小内存对象，在函数返回值的复制过程中可以极大地提高代码运行效率，详细过程请参考下面的代码。</p><pre><code>01   package main0203   import (04        &quot;fmt&quot;05   )0607  // 定义点结构08   type Point struct {09        X int10        Y int11   }1213  // 非指针接收器的加方法14   func (p Point) Add(other Point) Point {1516       // 成员值与参数相加后返回新的结构17        return Point{p.X + other.X, p.Y + other.Y}18   }1920   func main() {2122       // 初始化点23        p1 := Point{1, 1}24        p2 := Point{2, 2}2526       // 与另外一个点相加27        result := p1.Add(p2)2829       // 输出结果30        fmt.Println(result)31       // out: {3 3}32   }</code></pre><p>代码说明如下：</p><ul><li>第8行，定义一个点结构，拥有X和Y两个整型分量。</li><li>第14行，为Point结构定义一个Add()方法。</li><li>第23和24行，初始化两个点p1和p2。</li><li>第27行，将p1和p2相加后返回结果。</li><li>第30行，打印结果。</li></ul><p><code>由于例子中使用了非指针接收器，Add()方法变得类似于只读的方法，Add()方法内部不会对成员进行任何修改。</code></p><h2 id="2-3-指针和非指针接收器的使用"><a href="#2-3-指针和非指针接收器的使用" class="headerlink" title="2.3 指针和非指针接收器的使用"></a>2.3 指针和非指针接收器的使用</h2><ul><li>小对象由于值复制时的速度较快，适合使用非指针接收器。</li><li>大对象因为复制性能较低，适合使用指针接收器，在接收器和参数间传递时不进行复制，只是传递指针。</li></ul><h1 id="3-嵌入结构体扩展类型"><a href="#3-嵌入结构体扩展类型" class="headerlink" title="3. 嵌入结构体扩展类型"></a>3. 嵌入结构体扩展类型</h1><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种形式的字段被称为类型内嵌或匿名字段</p><p>类型内嵌的写法如下：</p><pre><code>01   type Data struct {02        int03        float3204        bool05   }0607   ins := &amp;Data{08        int:      10,09        float32: 3.14,10        bool:     true,11   }</code></pre><p>代码说明如下：</p><ul><li>第2～4行定义结构体中的匿名字段，类型分别是整型、浮点、布尔。</li><li>第8～10行将实例化的Data中的字段赋初值。</li></ul><p>类型内嵌其实仍然拥有自己的字段名，只是字段名就是其类型本身而已，<code>结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个</code>。结构体实例化后，如果匿名的字段类型为结构体，那么可以直接访问匿名结构体里的所有成员，这种方式被称为结构体内嵌。</p><h2 id="3-1-结构内嵌特性"><a href="#3-1-结构内嵌特性" class="headerlink" title="3.1 结构内嵌特性"></a>3.1 结构内嵌特性</h2><p>Go语言的结构体内嵌有如下特性。</p><h3 id="3-1-1-内嵌的结构体可以直接访问其成员变量"><a href="#3-1-1-内嵌的结构体可以直接访问其成员变量" class="headerlink" title="3.1.1 内嵌的结构体可以直接访问其成员变量"></a>3.1.1 内嵌的结构体可以直接访问其成员变量</h3><p>嵌入结构体的成员，可以通过外部结构体的实例直接访问。如果结构体有多层嵌入结构体，结构体实例访问任意一级的嵌入结构体成员时都只用给出字段名，而无须像传统结构体字段一样，通过一层层的结构体字段访问到最终的字段。例如，ins.a.b.c的访问可以简化为ins.c。</p><h3 id="3-1-2-内嵌结构体的字段名是它的类型名"><a href="#3-1-2-内嵌结构体的字段名是它的类型名" class="headerlink" title="3.1.2 内嵌结构体的字段名是它的类型名"></a>3.1.2 内嵌结构体的字段名是它的类型名</h3><p>内嵌结构体字段仍然可以使用详细的字段进行一层层访问，内嵌结构体的字段名就是它的类型名，<br>代码如下：</p><pre><code>...type people struct {    Name, Sex      string    Height, Weight float32}type boy struct {    people    Like  string}func RunStruct() {    var b1 boy    b1.Height = 175    //详细的字段进行一层层访问    fmt.Println(b1.people.Height)}</code></pre><p>一个结构体只能嵌入一个同类型的成员，无须担心结构体重名和错误赋值的情况，编译器在发现可能的赋值歧义时会报错。</p><h2 id="3-2-使用组合描述对象特性"><a href="#3-2-使用组合描述对象特性" class="headerlink" title="3.2 使用组合描述对象特性"></a>3.2 使用组合描述对象特性</h2><p>Go语言的结构体内嵌特性就是一种组合特性，使用组合特性可以快速构建对象的不同特性。<br>下面的代码使用Go语言的结构体内嵌实现对象特性组合，请参考代码6-10。<br>代码6-10 人和鸟的特性（具体文件：…/chapter06/humanbird/humanbird.go）</p><pre><code>01   package main0203   import &quot;fmt&quot;0405  // 可飞行的06   type Flying struct{}0708   func (f ＊Flying) Fly() {09        fmt.Println(&quot;can fly&quot;)10   }1112  // 可行走的13   type Walkable struct{}1415   func (f ＊Walkable) Walk() {16        fmt.Println(&quot;can calk&quot;)17   }1819  // 人类20   type Human struct {21       Walkable                        // 人类能行走22   }2324  // 鸟类25   type Bird struct {26       Walkable                        // 鸟类能行走27       Flying                          // 鸟类能飞行28   }2930   func main() {3132       // 实例化鸟类33        b := new(Bird)34        fmt.Println(&quot;Bird: &quot;)35        b.Fly()36        b.Walk()3738       // 实例化人类39        h := new(Human)40        fmt.Println(&quot;Human: &quot;)41        h.Walk()4243   }//运行结果Bird:can flycan calkHuman:can calk</code></pre><p>代码说明如下：</p><ul><li>第6行，声明可飞行结构（Flying）。</li><li>第8行，为可飞行结构添加飞行方法Fly()。</li><li>第13行，声明可行走结构（Walkable）。</li><li>第15行，为可行走结构添加行走方法Walk()。</li><li>第20行，声明人类结构。这个结构嵌入可行走结构（Walkable），让人类具备“可行走”特性</li><li>第25行，声明鸟类结构。这个结构嵌入可行走结构（Walkable）和可飞行结构（Flying），让鸟类具备既可行走又可飞行的特性。</li><li>第33行，实例化鸟类结构。</li><li>第35和36行，调用鸟类可以使用的功能，如飞行和行走。</li><li>第39行，实例化人类结构。</li><li>第41行，调用人类能使用的功能，如行走。</li></ul><h1 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h1><ul><li>对于一个具体类型T，部分方法的接收者是T，而且其他方法的接收者是*T。同时我们对类型<code>T的变量</code>直接调用接收者是*T的方法是合法的，编译器隐私的帮你完成了取址的操作。但是不能直接通过类型调用</li></ul><pre><code>type DataWrite interface {    Write(data interface{}) error}type fileHandle struct {}func (f *fileHandle)Write(data interface{}) error  {    fmt.Println(&quot;文件写入中....&quot;)    return nil}func RunInterface()  {    // 通过变量可以直接调用接收者是*T    var f fileHandle    var _ = f.Write(&quot;...&quot;)    // 不能直接调用接收者是*T    // var _ = fileHandle{}.Write(&quot;..&quot;)    /*    此处代码会报错：    ...: cannot call pointer method on fileHandle literal    ...: cannot take the address of fileHandle literal    */}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-结构体使用</title>
      <link href="/2018/04/09/Go-4.%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/09/Go-4.%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>结构体（struct）是Go支持面向对象编程特性的基础</p></blockquote><h1 id="1-声明结构体"><a href="#1-声明结构体" class="headerlink" title="1.声明结构体"></a>1.声明结构体</h1><p><code>结构体的定义只是一种内存布局的描述，只有当结构体实例化时，才会真正地分配内存。因此必须在定义结构体并实例化后才能使用结构体的字段。实例化就是根据结构体定义的格式创建一份与格式一致的内存区域，结构体实例与实例间的内存是完全独立的。</code></p><h2 id="1-1-基本语法"><a href="#1-1-基本语法" class="headerlink" title="1.1 基本语法"></a>1.1 基本语法</h2><pre><code>type 结构体名称 struct {   field type   field type }</code></pre><blockquote><p><font color="red">字段直接没有逗号（,）</font></p></blockquote><ul><li>field: 从概念或叫法上称: 结构体字段、属性 </li><li>type：一般是基本数据类型、数组,也可是引用类型</li></ul><ul><li>同类型变量可以写在一行<pre><code>type Human struct { name string age,sex,height int}</code></pre></li></ul><h1 id="2-结构体实例化"><a href="#2-结构体实例化" class="headerlink" title="2.结构体实例化"></a>2.结构体实例化</h1><h2 id="2-1-基本实例化形式（使用关键字-var）"><a href="#2-1-基本实例化形式（使用关键字-var）" class="headerlink" title="2.1 基本实例化形式（使用关键字: var）"></a>2.1 基本实例化形式（使用关键字: var）</h2><pre><code>type Girl struct {    Name  string }func UseStruct() {    //使用关键字var    var g Girl    g.Name = &quot;小芳&quot;    fmt.Println(g) // 输出: {小芳 0 0 0}}</code></pre><blockquote><p>上述变量 g 为结构体的实例</p></blockquote><h2 id="2-2-创建指针类型的结构体（使用关键字-new）"><a href="#2-2-创建指针类型的结构体（使用关键字-new）" class="headerlink" title="2.2 创建指针类型的结构体（使用关键字: new）"></a>2.2 创建指针类型的结构体（使用关键字: new）</h2><pre><code>type Girl struct {    Name  string }func UseStruct() {  // 使用new    g1 := new(Girl)    g1.Name = &quot;小芳&quot;    fmt.Println(g1) // 输出: &amp;{小芳 0 0 0}}</code></pre><blockquote><p>Girl类型被实例化后保存到g1变量中，g1的类型为*Girl，属于指针</p></blockquote><blockquote><font color="red">经过new实例化的结构体实例在成员赋值上与基本实例化的写法一</font></blockquote><h2 id="2-3-取结构的地址实例化（使用-amp-）"><a href="#2-3-取结构的地址实例化（使用-amp-）" class="headerlink" title="2.3 取结构的地址实例化（使用: &amp;）"></a>2.3 取结构的地址实例化（使用: &amp;）</h2><p><strong>在Go语言中，对结构体进行“&amp;”取地址操作时，视为对该类型进行一次new的实例化操作</strong></p><pre><code>type Girl struct {    Name  string }func UseStruct() {  // 使用&amp;    g2 := &amp;Girl{}    g2.Name = &quot;小芳&quot;    fmt.Println(g2) // 输出: &amp;{小芳 0 0 0}}</code></pre><h1 id="3-初始化结构体字段用例"><a href="#3-初始化结构体字段用例" class="headerlink" title="3. 初始化结构体字段用例"></a>3. 初始化结构体字段用例</h1><h2 id="3-1-递归填充"><a href="#3-1-递归填充" class="headerlink" title="3.1 递归填充"></a>3.1 递归填充</h2><pre><code>type Family struct {    name  string    child *Family}func UseStruct() {    p := Family{        name: &quot;爷爷&quot;,        child: &amp;Family{            name: &quot;爸爸&quot;,            child: &amp;Family{                name: &quot;我&quot;,            },        },    }    fmt.Println(p.name) // 爷爷    fmt.Println(p.child.name) //爸爸     fmt.Println(p.child.child.name) // 我}</code></pre><h2 id="3-2-多值初始化"><a href="#3-2-多值初始化" class="headerlink" title="3.2 多值初始化"></a>3.2 多值初始化</h2><pre><code>type Girl struct {    Name   string     Age    int    Height int    Weight float32}func CreateStruct() {    // 顺序填充    g1 := Girl{&quot;小花&quot;, 18, 170, 55.4}    fmt.Println(g1) // {小花 18 170 55.4}    // 指定字段填充    g := Girl{Name:&quot;小雨&quot;, Age:19}    fmt.Println(g) // {小雨 19 0 0}} </code></pre><h2 id="3-3-匿名结构体初始化"><a href="#3-3-匿名结构体初始化" class="headerlink" title="3.3 匿名结构体初始化"></a>3.3 匿名结构体初始化</h2><p><code>结构体可以包含一个或多个 匿名（或内嵌）字段，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型就是字段的名字。匿名字段本身可以是一个结构体类型，即 结构体可以包含内嵌结构体</code></p><pre><code>package mainimport &quot;fmt&quot;type Human struct {    Name     string    Age, Sex int}type Girl struct {    Human //匿名字段    Like string}func main() {    p := Girl{Human{Name: &quot;小芳&quot;, Age: 18}, &quot;唱歌&quot;}    fmt.Println(p)}</code></pre><h1 id="4-带标签的结构体"><a href="#4-带标签的结构体" class="headerlink" title="4. 带标签的结构体"></a>4. 带标签的结构体</h1><p><code>struct 的每个字段上，可以写上一个 tag, 该 tag可以通过反射机制获取，常见的使用场景就是序 列化和反序列化。</code></p><h2 id="4-1-使用示例"><a href="#4-1-使用示例" class="headerlink" title="4.1 使用示例"></a>4.1 使用示例</h2><pre><code>package mainimport (    &quot;reflect&quot;    &quot;fmt&quot;)type SchoolTag struct {    Name    string `school name`    Address string `school address`    Tel     string `school tel`}func main() {    schTag := SchoolTag{&quot;名牌大学&quot;, &quot;天朝1号&quot;, &quot;010-1234560&quot;}    count := reflect.ValueOf(schTag).NumField()    for i := 0; i &lt; count; i++ {        fmt.Printf(&quot;%v\n&quot;,reflect.TypeOf(schTag).Field(i).Tag)    }}</code></pre><h1 id="5-结构体比较"><a href="#5-结构体比较" class="headerlink" title="5. 结构体比较"></a>5. 结构体比较</h1><p><code>如果结构体的所有成员变量都可以比较，那么这个结构体就是可比较的。两个结构体的比较用 == 或者 != 其中== 按照顺序比较两个结构体变量的成员</code></p><pre><code>package mainimport &quot;fmt&quot;type Point struct {    X, Y int}func main() {    p1 := Point{1,2}    p2 := Point{1,3}    //表达式1    fmt.Println(p1.X == p2.X &amp;&amp; p1.Y == p2.Y) //false    //表达式2    fmt.Println(p1 == p2) //false}</code></pre><blockquote><p>表达式1和表达式2 是等价的</p></blockquote><p><strong>可比较的结构体都可以作为map的键类型</strong></p><p>示例（统计某个链接的点击次数):</p><pre><code>package mainimport &quot;fmt&quot;type UrlCount struct {    Controller, Action string}func main() {    m := make(map[UrlCount]int)    for i := 0; i &lt; 5; i++ {        m[UrlCount{&quot;home&quot;, &quot;index&quot;}]++    }    fmt.Println(m) // map[{home index}:5]}</code></pre><h1 id="6-结构体特性"><a href="#6-结构体特性" class="headerlink" title="6. 结构体特性"></a>6. 结构体特性</h1><ul><li><p>在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)</p></li><li><p>结构体是值类型，默认为值拷贝</p></li><li>字段名必须唯一</li><li>结构体的所有字段在内存中是连续的</li><li>结构体是用户单独定义的类型，和其它类型进行转换时需要有完全相同的字段(名字、个数和类型)</li></ul><pre><code>package mainimport &quot;fmt&quot;type A struct {    X, Y int}type B struct {    X, Y int}func main() {    var a A    var b B    a = A(b) // 类型转换时，需要有完全相同的字段(名字、个数和类型)    fmt.Printf(&quot;%T \n&quot;,a)    fmt.Printf(&quot;%T \n&quot;,b)}</code></pre><ul><li>结构体进行 type 重新定义(相当于取别名)，Go 认为是新的数据类型，但是相互间可以强转</li></ul><pre><code>package maintype Human struct {    Name string    Age  int}type Boy Humanfunc main() {    var h Human    var b Boy    //这么写错误,原因:Go认为Boy是新的数据类型    // h == b    //可以相互间强转    b = Boy(h)    h = Human(b)}</code></pre><h1 id="7-结构体和结构体变量-实例-的区别和联系"><a href="#7-结构体和结构体变量-实例-的区别和联系" class="headerlink" title="7.结构体和结构体变量(实例)的区别和联系"></a>7.结构体和结构体变量(实例)的区别和联系</h1><ul><li>结构体是自定义的数据类型，代表一类事物.</li><li>结构体变量(实例)是具体的，实际的，代表一个具体变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-函数使用</title>
      <link href="/2018/04/08/Go-3.%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/08/Go-3.%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>函数使用</p><blockquote><p>函数是Go语言里面的核心设计，它通过关键字func来声明，它的格式如下。</p></blockquote><h3 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1. 函数声明"></a>1. 函数声明</h3><pre><code>func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) {   //这里是处理逻辑代码   //返回多个值    return value1, value2 }</code></pre><ul><li>关键字func用来声明一个函数funcName。</li></ul><a id="more"></a><ul><li><p>函数可以有一个或者多个参数，每个参数后面带有类型，通过“,”分隔函数可以返回多个值。</p></li><li><p>返回值声明了两个变量output1和output2，如果你不想声明也可以，就保留两个类型声明。</p></li><li><p>如果只有一个返回值且不声明返回值变量，那么你可以省略“包括返回值”的括号</p></li><li><p>如果没有返回值，就直接省略最后的返回信息。</p></li><li><p>如果有返回值，那么必须在函数的外层添加return语句。</p></li></ul><h3 id="2-接收变参的函数"><a href="#2-接收变参的函数" class="headerlink" title="2. 接收变参的函数"></a>2. 接收变参的函数</h3><pre><code>func funcName(input ...type) (output1 type1, output2 type2) {   //这里是处理逻辑代码   //返回多个值    return output1 type1, output2 type2 }</code></pre><blockquote><p>注意，这些参数的类型全部是type。在函数体中，变量input是一个type的slice。</p></blockquote><ul><li>使用示例</li></ul><pre><code>package mainimport &quot;fmt&quot;func main() {   result := joinStr(&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;)   fmt.Println(result) // hello}func joinStr(input ...string) (strRes string) {   for _, v := range input {      strRes += v   }   return}</code></pre><h3 id="3-参数传递"><a href="#3-参数传递" class="headerlink" title="3.  参数传递"></a>3.  参数传递</h3><blockquote><p>Go 默认使用按值传递参数,也就是传递参数的副本。函数接收参数副本之后，在使用变量的过程中可能对副本的值进行更改，但不会影响到原来的变量。如果想要影响到原来的变量，则需要传指针。<font color="red">需要注意的是:切片（slice）、字典（map）、接口（interface）、通道（channel）这样的引用类型都是默认使用引用传递（即使没有显示的指出指针）</font></p></blockquote><h4 id="3-1-按值传递使用示例"><a href="#3-1-按值传递使用示例" class="headerlink" title="3.1  按值传递使用示例"></a>3.1  按值传递使用示例</h4><pre><code>package mainimport &quot;fmt&quot;func main() {   str := &quot;good morning&quot;   updateStr(str)   fmt.Println(str) // good morning}func updateStr(str string) string {   str = &quot;good evening&quot;   return str}</code></pre><h4 id="3-2-按引用使用示例"><a href="#3-2-按引用使用示例" class="headerlink" title="3.2  按引用使用示例"></a>3.2  按引用使用示例</h4><pre><code>package mainimport &quot;fmt&quot;func main() {   str := &quot;good morning&quot;   updateStr(&amp;str)   fmt.Println(str)  // good evening}func updateStr(str *string) string {   *str = &quot;good evening&quot;   return *str}</code></pre><h3 id="4-延迟语句（defer）的使用"><a href="#4-延迟语句（defer）的使用" class="headerlink" title="4.延迟语句（defer）的使用"></a>4.延迟语句（defer）的使用</h3><blockquote><p>Go语言中有种不错的设计，即延迟（defer）语句，你可以在函数中添加多个defer语句。当函数执行到最后时，这些 defer 语句会按照逆序执行，最后该函数返回。特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题。</p></blockquote><h4 id="4-1-使用示例"><a href="#4-1-使用示例" class="headerlink" title="4.1 使用示例"></a>4.1 使用示例</h4><pre><code>package mainimport (    &quot;fmt&quot;    &quot;os&quot;    &quot;io/ioutil&quot;)func main() {    filePath := &quot;/Users/liuqh/Desktop/test.json&quot;    str := openFile(filePath)    fmt.Println(str)     //输出以下内容    //defer 被调用了    //文件里的内容}func openFile(filePath string) string {    //打开文件    file, err := os.Open(filePath)    if err != nil {        fmt.Println(&quot;open file err&quot;)    }    //利用defer 关闭文件    defer testDefer(file)    content, err := ioutil.ReadAll(file)    if err != nil {        fmt.Println(&quot;read file err&quot;)    }    return string(content)}func testDefer(file *os.File) {    fmt.Println(&quot;defer 被调用了&quot;)    file.Close()}</code></pre><h4 id="4-2-函数中使用多个defer"><a href="#4-2-函数中使用多个defer" class="headerlink" title="4.2 函数中使用多个defer"></a>4.2 函数中使用多个defer</h4><blockquote><p>如果有一个函数中有多个地方调用defer,那么defer采用后进先出(逆序执行)</p></blockquote><pre><code>package mainimport (    &quot;fmt&quot;)func main() {    testDefer() // 5 4 3 2 1}func testDefer() {    for i := 1; i &lt; 6; i++ {        defer fmt.Println(i)    }}</code></pre><h3 id="5-函数作为值、类型"><a href="#5-函数作为值、类型" class="headerlink" title="5.函数作为值、类型"></a>5.函数作为值、类型</h3><blockquote><p>在Go语言中函数也是一种变量，我们可以通过type来定义它，它的类型就是所有拥有相同的参数，相同的返回值。</p></blockquote><pre><code class="go">type typeName func(input1 inputType1,input2 inputType2[,...])(result1 resultType1 [, ...])</code></pre><h4 id="5-1-使用示例"><a href="#5-1-使用示例" class="headerlink" title="5.1 使用示例"></a>5.1 使用示例</h4><pre><code>package mainimport &quot;fmt&quot;type testInt func(int) boolfunc main() {    numSlice := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}    odd := filter(numSlice, isOdd)    event := filter(numSlice, isEvent)    fmt.Println(odd) // [2 4 6 8]    fmt.Println(event) // [1 3 5 7 9]}func isOdd(num int) bool {    if num%2 == 0 {        return true    }    return false}func isEvent(num int) bool {    if num%2 == 0 {        return false    }    return true}func filter(arg []int, funcName testInt) []int {    var result []int    for _, v := range arg {        if funcName(v) {            result = append(result, v)        }    }    return result}</code></pre><h3 id="6-匿名函数"><a href="#6-匿名函数" class="headerlink" title="6.匿名函数"></a>6.匿名函数</h3><p>既没有名称的函数</p><h4 id="6-1-使用示例"><a href="#6-1-使用示例" class="headerlink" title="6.1 使用示例"></a>6.1 使用示例</h4><pre><code>package mainimport &quot;fmt&quot;func main()  {    f := func(a,b int) int{        i := a + b        return i    }    fmt.Println(f(1,4)) // 5 }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-字符串操作</title>
      <link href="/2018/04/06/Go%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/06/Go%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>在GO中字符串是用双引号(“”)或反引号(<code></code>)括起来，而且字符串不可变</strong></p></blockquote><h4 id="1-修改字符串"><a href="#1-修改字符串" class="headerlink" title="1.修改字符串"></a>1.修改字符串</h4><font color="red">字符串不能修改，否则报错,如下代码:<font><br><code>govar s string = &quot;hello word&quot;s[0] =`a`//报错# command-line-arguments...cannot assign to str[0]</code><br>通过转[]byte类型修改字符串<br><a id="more"></a><br><code>govar s string = &quot;hello word&quot;slice := []byte(s)slice[0] =&#39;H&#39;newStr := string(slice)fmt.Println(newStr)</code><br><br>&gt; <font color="red"> 此处的 slice[0] =’H’ 不能写成 slice[0] =”H”,否则会报错:cannot use “H” (type string) as type byte in assignment </font><h4 id="2-字符串转-byte-类型"><a href="#2-字符串转-byte-类型" class="headerlink" title="2.字符串转[]byte 类型"></a>2.字符串转[]byte 类型</h4><pre><code class="go">var s string = &quot;hello word&quot;sic := []byte(s)</code></pre><h4 id="3-字符串转整型"><a href="#3-字符串转整型" class="headerlink" title="3.字符串转整型"></a>3.字符串转整型</h4><pre><code class="go">n, err := strconv.Atoi(&quot;12&quot;)if err != nil {    fmt.Println(&quot;转换失败&quot;)}fmt.Println(n)</code></pre><h4 id="4-字符串连接"><a href="#4-字符串连接" class="headerlink" title="4.字符串连接"></a>4.字符串连接</h4><pre><code class="go">//字符串连接a, b := &quot;hello&quot;, &quot; word&quot;c := a + bfmt.Println(c)</code></pre><h4 id="5-声明多行字符串"><a href="#5-声明多行字符串" class="headerlink" title="5.声明多行字符串"></a>5.声明多行字符串</h4><pre><code class="go">str := ` hello,        nice to meet you`</code></pre><blockquote><p><code></code> 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。</p></blockquote><h4 id="6-字符串拼接和分割"><a href="#6-字符串拼接和分割" class="headerlink" title="6.字符串拼接和分割"></a>6.字符串拼接和分割</h4><font color="red">使用函数:strings.Join 和 strings.Split</font><br><code>//切片转 以x拼接成 字符串fmt.Println(&quot;Join: &quot;, strings.Join([]string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}, &quot;-&quot;))//输出：Join:  a-b-c// 字符串 以x分割成 切片fmt.Println(&quot;Split: &quot;, strings.Split(&quot;a-b-c-d-e&quot;, &quot;-&quot;))//输出：Split:  [a b c d e]// 去除字符串s中的空格符, 并按照空格(可以是一个或者多个空格)分割字符串, 返回slicefunc Fields(s string) []stringstr := &quot;nice to meet   you&quot;slice := strings.Fields(str) // [nice to meet you]</code><br>#### 7.字符串比较<br><br><font color="red">使用函数:strings.Compare</font><br><code>gofmt.Println(strings.Compare(string(&quot;hello&quot;), string(&quot;haha&quot;)))  // 1fmt.Println(strings.Compare(string(&quot;hello&quot;), string(&quot;helloworld&quot;)))  // -1fmt.Println(strings.Compare(string(&quot;hello&quot;), string(&quot;hello&quot;)))  //0// Compare函数:源码func Compare(a, b string) int {    if a == b {        return 0    }    if a &lt; b {        return -1    }    return +1}</code><br>#### 8.字符串查找<br><br><font color="red">使用函数:strings.Contains、Index、LastIndex、Count</font><pre><code>// 判断给定字符串s中是否包含子串substr, 找到返回true, 找不到返回falsefunc Contains(s, substr string) boolfmt.Println(strings.Contains(&quot;hello word&quot;, &quot;hell&quot;))  // truefmt.Println(strings.Contains(&quot;hello word&quot;, &quot;hella&quot;))  // falsefmt.Println(strings.Contains(&quot;&quot;, &quot;&quot;))  // true// 在字符串s中查找sep第一次出现的位置, 返回位置值, 找不到返回-1func Index(s, sep string) int// 在字符串s中查找sep最后一次出现的位置, 返回位置值, 找不到返回-1func LastIndex(s, sep string) intfmt.Println(strings.Index(&quot;abcdefga&quot;, &quot;a&quot;)) //0fmt.Println(strings.LastIndex(&quot;abcdefga&quot;, &quot;a&quot;))//7// 统计给定子串sep的出现次数, sep为空时, 返回1 + 字符串的长度func Count(s, sep string) intfmt.Println(strings.Count(&quot;hello&quot;, &quot;l&quot;))//2fmt.Println(strings.Count(&quot;hello&quot;, &quot;&quot;))//6</code></pre><h4 id="9-字符串重复"><a href="#9-字符串重复" class="headerlink" title="9.字符串重复"></a>9.字符串重复</h4><pre><code>// 重复s字符串count次, 最后返回新生成的重复的字符串func Repeat(s string, count int) stringfmt.Println(strings.Repeat(&quot;hello&quot;, 2)) //hellohello</code></pre><h4 id="10-字符串大小写转换"><a href="#10-字符串大小写转换" class="headerlink" title="10.字符串大小写转换"></a>10.字符串大小写转换</h4><pre><code>// 首字母大写func Title(s string) stringfmt.Println(strings.Title(&quot;hello&quot;)) //Hello// 所有字母转换为小写func ToLower(s string) stringfmt.Println(strings.ToLower(&quot;HELLO&quot;)) //hello// 所有字母转换为大写func ToUpper(s string) stringfmt.Println(strings.ToUpper(&quot;hello&quot;)) //HELLO</code></pre><h4 id="11-字符串前缀后缀"><a href="#11-字符串前缀后缀" class="headerlink" title="11.字符串前缀后缀"></a>11.字符串前缀后缀</h4><blockquote><font color="red">大小写敏感</font></blockquote><pre><code>// 判断字符串是否包含前缀prefixfunc HasPrefix(s, prefix string) boolfmt.Println(strings.HasPrefix(&quot;Golang&quot;, &quot;Go&quot;))  // truefmt.Println(strings.HasPrefix(&quot;Golang&quot;, &quot;go&quot;))  // falsefmt.Println(strings.HasPrefix(&quot;Golang&quot;, &quot;a&quot;))  // falsefmt.Println(strings.HasPrefix(&quot;Golang&quot;, &quot;&quot;))  // true// 判断字符串是否包含后缀suffix, func HasSuffix(s, suffix string) boolfmt.Println(strings.HasSuffix(&quot;Golang&quot;, &quot;ang&quot;))  // truefmt.Println(strings.HasSuffix(&quot;Golang&quot;, &quot;Ang&quot;))  // falsefmt.Println(strings.HasSuffix(&quot;Golang&quot;, &quot;bng&quot;))  // falsefmt.Println(strings.HasSuffix(&quot;Golang&quot;, &quot;&quot;))  // true</code></pre><h4 id="12-字符串删除"><a href="#12-字符串删除" class="headerlink" title="12.字符串删除"></a>12.字符串删除</h4><pre><code>// 删除在s字符串的头部和尾部中由cutset指定的字符, 并返回删除后的字符串func Trim(s string, cutset string) stringfmt.Println(strings.Trim(&quot;@hello word@&quot;,&quot;@&quot;)) // hello word</code></pre><h4 id="13-字符串替换"><a href="#13-字符串替换" class="headerlink" title="13.字符串替换"></a>13.字符串替换</h4><pre><code>// 在s字符串中, 把old字符串替换为new字符串，n表示替换的次数，小于0表示全部替换func Replace(s, old, new string, n int) stringfmt.Println(strings.Replace(&quot;hello word&quot;,&quot;o&quot;,&quot;@&quot;,1)) // hell@ wordfmt.Println(strings.Replace(&quot;hello word&quot;,&quot;o&quot;,&quot;@&quot;,-1)) // hell@ w@rd</code></pre></font></font>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-程序结构</title>
      <link href="/2018/04/03/Go-1.%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
      <url>/2018/04/03/Go-1.%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><ul><li>包声明</li><li>引入包</li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><p>以实际代码进行讲解:</p><pre><code>/* 这是包声明 */package main/* 这是引入包 */import &quot;fmt&quot;/* 这是函数 */func main() {  /* 这是变量 */  str := &quot;hello word&quot;  /* 这是语句 */  fmt.Println(str)}</code></pre><a id="more"></a><ul><li><p>第一行代码 package main 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包。</p><blockquote><p>每个 Go 应用程序都包含一个名为 main 的包</p></blockquote></li><li><p>import “fmt” 告诉 Go 编译器这个程序需要使用 fmt 包</p></li><li><p>func main() 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数。</p><blockquote><p>如果有 init() 函数则会先执行init()函数</p></blockquote></li><li><p>go语言中注释 单行用:// ，或者 /*…*/ </p><pre><code class="go">func main()  {  // str := &quot;hello word&quot;  fmt.Println(str)}</code></pre></li><li>go语言中一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号分号(;) 结尾</li></ul><p><strong>其他约定</strong></p><ul><li>大写字母开头的变量是可导出的，即其他包可以读取，是公用变量；小写字母开头的不可导出，是私有变量。</li><li>大写字母开头的函数也是一样，相当于class中带public关键词的公有函数；小写字母开头就是有private关键词的私有函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-基础篇-变量及数据类型</title>
      <link href="/2018/04/03/Go-2.%E5%8F%98%E9%87%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/04/03/Go-2.%E5%8F%98%E9%87%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1.变量声明"></a>1.变量声明</h2><h3 id="1-1-使用var关键字"><a href="#1-1-使用var关键字" class="headerlink" title="1.1 使用var关键字"></a>1.1 使用var关键字</h3><blockquote><p>var 变量名 变量类型  = [变量值]</p></blockquote><pre><code>//定义多个变量var vname1,vname2,vname3 type//定义变量,并初始化var vname1 int = 1//同时初始化多个变量var vname1,vname2,vname3 = v1,v2,v3 </code></pre><h3 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用 :="></a>1.2 使用 :=</h3><pre><code>//定义变量,并初始化vname1 := 1//同时初始化多个变量vname1,vname2,vname3 := v1,v2,v3 // 示例: var a, b, c = 3, 4, &quot;foo&quot;</code></pre><h3 id="1-3-分组声明"><a href="#1-3-分组声明" class="headerlink" title="1.3 分组声明"></a>1.3 分组声明</h3><p>在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明</p><pre><code>// 同时导入多个包import (    &quot;fmt&quot;    &quot;errors&quot;)// 声明多个常量const (  i = 100,  pi = 3.14  prex = &quot;Go_&quot;)// 声明多个变量var (  a int,  b string = &quot;hello&quot;,)</code></pre><h3 id="1-4-特殊变量-下划线"><a href="#1-4-特殊变量-下划线" class="headerlink" title="1.4 特殊变量: _(下划线)"></a>1.4 特殊变量: _(下划线)</h3><p><code>任何赋予它的值都会被丢弃,Go语言对于已声明但未使用的变量会在编译阶段报错,可以通过其来丢弃</code></p><pre><code>_, b := 1,2</code></pre><h3 id="1-5-make和new"><a href="#1-5-make和new" class="headerlink" title="1.5 make和new:"></a>1.5 make和new:</h3><ol><li>new(T) 返回的是T的指针<br><code>new(T) 为一个 T 类型新值分配空间并将此空间初始化为 T 的零值，返回的是新值的地址，也就是T类型的指针 *T，该指针指向T的新分配的零值。</code></li><li>make 只能用于 slice，map，channel 三种类型:<br><code>make(T, args) 返回的是初始化之后的 T 类型的值，这个新值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。</code></li></ol><h2 id="2-基础类型"><a href="#2-基础类型" class="headerlink" title="2.基础类型"></a>2.基础类型</h2><h3 id="2-1-整数"><a href="#2-1-整数" class="headerlink" title="2.1 整数"></a>2.1 整数</h3><p>整数类型有无符号和带符号两种。Go语言同时支持int和uint，这两种类型的长度相同，但具体长度取决于不同编译器的实现。当前的gcc和gccgo编译器在32位和64位平台上都使用32位来表示int和uint，但未来在64位平台上可能增加到64位。Go语言里面也有直接定义好位数的类型：rune，int8，int16，int32，int64和byte，uint8，uint16，uint32，uint64。<code>其中rune是int32的别称，byte是uint8的别称</code></p><h3 id="2-2-浮点数"><a href="#2-2-浮点数" class="headerlink" title="2.2 浮点数"></a>2.2 浮点数</h3><p>浮点类型有float32 和 浮点类型有float64 两种，默认是float64</p><h3 id="2-3-复数"><a href="#2-3-复数" class="headerlink" title="2.3 复数"></a>2.3 复数</h3><p>默认类型是complex128（64位实数＋64位虚数）。如果需要小一些的，也有complex64（32位实数＋32位虚数）。复数的形式为RE＋IMi，其中RE是实数部分，IM是虚数部分，而最后的i是虚数单位</p><pre><code>var c complex64 = 5 + 5i</code></pre><h3 id="2-4-布尔类型"><a href="#2-4-布尔类型" class="headerlink" title="2.4 布尔类型"></a>2.4 布尔类型</h3><p>布尔值的类型为bool，值是true或false，默认为false</p><h3 id="2-5-字符串"><a href="#2-5-字符串" class="headerlink" title="2.5 字符串"></a>2.5 字符串</h3><p>字符串都是采用UTF-8字符集编码。字符串是用一对双引号（””）或反引号（<code></code>）括起来定义,<code>字符串不可变，可以用 + 操作符 连接两个字符串</code> </p><pre><code>// 单行字符串s := &quot;hello word&quot;// 多行字符串s := `这是一个段落，此处的换行会原样输出。`</code></pre><h3 id="2-6-错误类型"><a href="#2-6-错误类型" class="headerlink" title="2.6 错误类型"></a>2.6 错误类型</h3><p>Go语言内置有一个error类型，专门用来处理错误信息，Go语言的package里面还专门有一个包errors来处理错误</p><pre><code> err := errors.New(&quot;error:我自己定义的错误&quot;) if err != nil {     fmt.Print(err) }</code></pre><h3 id="2-7-常量"><a href="#2-7-常量" class="headerlink" title="2.7 常量"></a>2.7 常量</h3><p>程序编译阶段就确定下来的值，而程序在运行时则无法改变该值。在Go语言程序中，常量可定义为数值、布尔值或字符串等类型。</p><p>语法:</p><blockquote><p>const 常量名 [常量类型] = 常量值</p></blockquote><pre><code>const PI float32 = 3.1415const a = 100const Prex = &quot;Go_&quot;</code></pre><ul><li>iota 枚举</li></ul><p>Go语言里面有一个关键字iota，这个关键字用来声明enum的时候采用，它默认开始值是0，每调用一次加1。，每个const分组的第一个常量被默认设置为它的0值，第二及后续的常量被默认设置为它前面那个常量的值，如果前面那个常量的值是iota，则它也被设置为iota。</p><pre><code>const(    x = iota  // x == 0    y = iota  // y == 1    z = iota  // z == 2    w  // 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说 w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;)const v = iota // 每遇到一个const关键字，iota就会重置，此时v == 0</code></pre><blockquote><p>每遇到一个const关键字，iota就会重置</p></blockquote><h2 id="3-复合类型"><a href="#3-复合类型" class="headerlink" title="3.复合类型"></a>3.复合类型</h2><h3 id="3-1-数组"><a href="#3-1-数组" class="headerlink" title="3.1 数组"></a>3.1 数组</h3><pre><code>语法: var 数组变量名 [数组长度]T说明： 1.数组变量名：数组声明及使用时的变量名。 2.元素数量：数组的元素数量。可以是一个表达式，但最终通过编译期计算的结果必须是整型数值。也就是说，元素数量不能含有到运行时才能确认大小的数值。 3. T可以是任意基本类型，包括T为数组本身。但类型为数组本身时，可以实现多维数组示例：var arr [3]int  //默认初始化0var q [3]int = [3]int{1,2,3}q := [...]int{1,2,3}q := [...]int{90:-1}//key和value的赋值方式，下表90的值为-1，数组长度为91</code></pre><blockquote><p>如果在 <code>数组的长度</code> 位置出现的是“…”省略号，则表示数组的长度是根据初始化值的 个数来计算</p></blockquote><h3 id="3-2-切片"><a href="#3-2-切片" class="headerlink" title="3.2 切片"></a>3.2 切片</h3><p>创建slice主要两种：1.基于数组创建。2.直接创建</p><ul><li><p>1.基础数组创建</p><pre><code>arrVar := [4]int{1, 2, 3，4} sliceVar := arrVar[1:3]</code></pre><blockquote><p>数组arrVar和sliceVar里面的地址其实是一样的，也就是说如果你改变sliceVar里面的变量，那么arrVar里面的变量也会随之改变。</p></blockquote></li></ul><ul><li>2.直接创建<pre><code>myslice1 := make([]int,5)//创建一个元素个数5的slice,cap也是5myslice2 := make([]int,5,10)//创建一个元素个数5的slice，cap是10myslice3 := []int{1,2,3,4}//创建一个元素个数为4的slice，cap是4var slice []int //创建一个空的slice，cap和len都是0</code></pre><blockquote><p>可以使用内置的make()函数来创建。事实上还是会创建一个匿名的数组，只是不需要我们来定义。</p></blockquote></li></ul><h3 id="3-3-map"><a href="#3-3-map" class="headerlink" title="3.3 map"></a>3.3 map</h3><p>可以使用内建函数 make 也可以使用 map 关键字来定义 Map:</p><pre><code> /* 声明变量，默认 map 是 nil */var myMap map[keyType]valueType//示例1ages := map[string] int {    &quot;tom&quot;: 21,    &quot;anny&quot;: 18,}/* 使用 make 函数 */myMap := make(map[keyType]valueType)//示例1相当于ages := make(map[string]int)ages[&quot;tom&quot;] = 21ages[&quot;anny&quot;] = 18</code></pre><blockquote><p>myMap是声明的变量名，keyType是对应的Key的类型，valueType是value的类型。</p></blockquote><h3 id="3-3-结构体"><a href="#3-3-结构体" class="headerlink" title="3.3 结构体"></a>3.3 结构体</h3><blockquote><p>结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结构体的成员。</p></blockquote><pre><code> /* 声明结构体 */type 结构体名称 struct {    属性1    类型    属性2    类型    ...}/* 使用示例 */type User struct {    name    string    age     int}user := new(User)user.name = &quot;tom&quot;user.age = 20</code></pre><p><code>字段直接没有逗号,</code></p><blockquote><p>结构体的初始化可以使用new关键词和var关键词，不同的是如果使用new，则返回类型是一个指针，使用var，则是结构体自身。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php排序算法汇总</title>
      <link href="/2018/01/12/php-sort/"/>
      <url>/2018/01/12/php-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-1-插入排序"><a href="#1-1-插入排序" class="headerlink" title="1.1 插入排序"></a>1.1 插入排序</h3><p>基本思想：每次将一个待排序的数据元素，插入到前面已经排好序的数列中的适当位置，使数列依然有序；直到待排序数据元素全部插入完为止。</p><pre><code class="php">&lt;?php/* 示例：[初始关键字] [49] 38 65 97 76 13 27 49J=2(38) [38 49] 65 97 76 13 27 49J=3(65) [38 49 65] 97 76 13 27 49J=4(97) [38 49 65 97] 76 13 27 49J=5(76) [38 49 65 76 97] 13 27 49J=6(13) [13 38 49 65 76 97] 27 49J=7(27) [13 27 38 49 65 76 97] 49J=8(49) [13 27 38 49 49 65 76 97]*/function insert_sort($arr){    $count = count($arr);    //i=1 是从第二个开始与第一个比较    for ($i = 1; $i &lt; $count; $i++) {        $tmp = $array[$i];        $j   = $i - 1;        while ($array[$j] &gt; $tmp) {            //前面的值大于后面的值时，互调位置,            //直到满足:$array[$j] &gt; $tmp            $array[$j + 1] = $array[$j];            $array[$j]     = $tmp;            $j--;        }    }    return $arr;}</code></pre><a id="more"></a><h3 id="1-2-选择排序"><a href="#1-2-选择排序" class="headerlink" title="1.2 选择排序"></a>1.2 选择排序</h3><p>基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。</p><pre><code class="php">&lt;?php/*初始关键字] [49 38 65 97 76 13 27 49]第一趟排序后 13 ［38 65 97 76 49 27 49]第二趟排序后 13 27 ［65 97 76 49 38 49]第三趟排序后 13 27 38 [97 76 49 65 49]第四趟排序后 13 27 38 49 [49 97 65 76]第五趟排序后 13 27 38 49 49 [97 97 76]第六趟排序后 13 27 38 49 49 76 [76 97]第七趟排序后 13 27 38 49 49 76 76 [ 97]最后排序结果 13 27 38 49 49 76 76 97*/function select_sort($arr){    /*     * 基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，     直到全部待排序的数据元素排完     * */    $count = count($arr);    for ($i = 0; $i &lt; $count; $i++) {        $k = $i;        for ($j = $i + 1; $j &lt; $count; $j++) {            if ($arr[$k] &gt; $arr[$j]) {                //每次找出最小的值，并把最小值的索引赋值给$k,然后索引 $k 与 $i 值比较，                $k = $j;            }        }        //当最小值索引 $k与$i不同时， 索引$k与$i值互换位置,        if ($k != $i) {            $tmp     = $arr[$i];            $arr[$i] = $arr[$k];            $arr[$k] = $tmp;        }    }    return $arr;}</code></pre><h3 id="1-3-冒泡排序"><a href="#1-3-冒泡排序" class="headerlink" title="1.3 冒泡排序"></a>1.3 冒泡排序</h3><p>基本思想：两两比较待排序数据元素的大小，发现两个数据元素的次序相反时即进行交换，直到没有反序的数据元素为止。 排序过程：设想被排序的数组R［1..N］垂直竖立，将每个数据元素看作有重量的气泡，根据轻气泡不能在重气泡之下的原则(正序)， 从下往上扫描数组R，凡扫描到违反本原则的轻气泡，就使其向上”漂浮”，如此反复进行，直至最后任何两个气泡都是轻者在上，重者在下为止。 </p><pre><code class="php">&lt;?php/*示例：49 13 13 13 13 13 13 1338 49 27 27 27 27 27 2765 38 49 38 38 38 38 3897 65 38 49 49 49 49 4976 97 65 49 49 49 49 4913 76 97 65 65 65 65 6527 27 76 97 76 76 76 7649 49 49 76 97 97 97 97*/function bubble_sort($array){   $count = count($array);   if ($count &lt;= 0) return false;   for($i=0; $i&lt;$count; $i++){       for($j=$count-1; $j&gt;$i; $j--){           if ($array[$j]&lt;$array[$j-1]){               $tmp = $array[$j];               $array[$j] = $array[$j-1];               $array[$j-1] = $tmp;           }       }   }   return $array;}</code></pre><h3 id="1-4-快速排序"><a href="#1-4-快速排序" class="headerlink" title="1.4 快速排序"></a>1.4 快速排序</h3><p>基本思想：在当前无序区R[1..H]中任取一个数据元素作为比较的”基准”(不妨记为X)， 用此基准将当前无序区划分为左右两个较小的无序区：R[1..I-1]和R[I 1..H]，且左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素，而基准X则位于最终排序的位置上，即R[1..I-1]≤X.Key≤RI 1..H， 当 R[1..I-1]和R[I 1..H]均非空时，分别对它们进行上述的划分过程，直至所有无序子区中的数据元素均已排序为止。</p><pre><code class="php">&lt;?php/*初始关键字 [49 38 65 97 76 13 27 49］第一次交换后 ［27 38 65 97 76 13 49 49］第二次交换后 ［27 38 49 97 76 13 65 49］J向左扫描，位置不变，第三次交换后 ［27 38 13 97 76 49 65 49］I向右扫描，位置不变，第四次交换后 ［27 38 13 49 76 97 65 49］J向左扫描 ［27 38 13 49 76 97 65 49］（一次划分过程）初始关键字 ［49 38 65 97 76 13 27 49］一趟排序之后 ［27 38 13］ 49 ［76 97 65 49］二趟排序之后 ［13］ 27 ［38］ 49 ［49 65］76 ［97］三趟排序之后 13 27 38 49 49 ［65］76 97最后的排序结果 13 27 38 49 49 65 76 97*/function quick_sort(&amp;$array){    //在当前无序区中任取一个数据元素作为比较的”基准”， 用此基准将当前无序区划分为左右两个较小的无序区    if (count($array) &gt; 1) {        $standard = $array[0];        //左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素        $left  = [];        $right = [];        $_size = count($array);        for ($i = 1; $i &lt; $_size; $i++) {            if ($array[$i] &lt;= $standard) {                $left[] = $array[$i];            } elseif ($array[$i] &gt; $standard) {                $right[] = $array[$i];            }        }        $left  = $this-&gt;quick_sort($left);        $right = $this-&gt;quick_sort($right);        return array_merge($left, array($standard), $right);    }    return $array;}</code></pre><h3 id="1-5-希尔排序"><a href="#1-5-希尔排序" class="headerlink" title="1.5 希尔排序"></a>1.5 希尔排序</h3><p>基本思想：希尔排序是将待排序的数组元素 按下标的一定增量分组 ，分成多个子序列，然后对各个子序列进行直接插入排序算法排序；然后依次缩减增量再进行排序，直到增量为1时，进行最后一次直接插入排序，排序结束。</p><pre><code class="php">&lt;?phpfunction shell_sort(&amp;$arr){    if(!is_array($arr))return;$n=count($arr);    for($gap=floor($n/2);$gap&gt;0;$gap=floor($gap/=2)){        for($i=$gap;$i&lt;$n;++$i){            for($j=$i-$gap;$j&gt;=0&amp;&amp;$arr[$j+$gap]&lt;$arr[$j];$j-=$gap){                $temp=$arr[$j];                $arr[$j]=$arr[$j+$gap];                $arr[$j+$gap]=$temp;            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储单位</title>
      <link href="/2017/11/20/%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D/"/>
      <url>/2017/11/20/%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h3><pre><code>1B(Byte 字节)=8bit，1KB (Kilobyte 千字节)=1024B， 1MB (Megabyte 兆字节 简称“兆”)=1024KB， 1GB (Gigabyte 吉字节 又称“千兆”)=1024MB， 1TB (Trillionbyte 万亿字节 太字节)=1024GB，其中1024=2^10 ( 2 的10次方)， 1PB（Petabyte 千万亿字节 拍字节）=1024TB， 1EB（Exabyte 百亿亿字节 艾字节）=1024PB， 1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB, 1YB (Yottabyte 一亿亿亿字节 尧字节)= 1024 ZB, 1BB (Brontobyte 一千亿亿亿字节)= 1024 YB.注：“兆”为百万级数量单位。 附：进制单位全称及译音 yotta, [尧]它, Y. 10^21, zetta, [泽]它, Z. 10^18, exa, [艾]可萨, E. 10^15, peta, [拍]它, P. 10^12, tera, [太]拉, T. 10^9, giga, [级]咖, G. 10^6, mega, [兆]，M. 10^3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 行业术语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php面试题</title>
      <link href="/2017/09/17/php-interView-question/"/>
      <url>/2017/09/17/php-interView-question/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h2><h3 id="1-1-cookie与session的区别"><a href="#1-1-cookie与session的区别" class="headerlink" title="1.1 cookie与session的区别"></a>1.1 cookie与session的区别</h3><ul><li>存储位置：session存储于服务器，cookie存储于客户端</li><li>安全性：session安全性比cookie高</li><li>存放的形式：Session是以对象的形式保存在服务器，Cookie以字符串的形式保存在客户端</li><li>用途：Cookies适合做保存用户的个人设置,爱好等,Session适合做客户的身份验证</li><li>session为’会话服务’，在使用时需要开启服务，cookie不需要开启，可以直接用</li></ul><h3 id="1-2-禁用-cookie-后-session-还能用吗"><a href="#1-2-禁用-cookie-后-session-还能用吗" class="headerlink" title="1.2 禁用 cookie 后 session 还能用吗?"></a>1.2 禁用 cookie 后 session 还能用吗?</h3><p>可以,通过URL传值或者隐藏表单传递Session ID (常用)。</p><p><strong>Session和cookie的工作流程：</strong></p><ol><li><p>你第一次访问网站时，</p></li><li><p>服务端脚本中开启了session_start();，</p></li><li><p>服务器会生成一个不重复的 SESSIONID 的文件session_id();，比如在/var/lib/php/session目录</p></li><li><p>并将返回(Response)如下的HTTP头 Set-Cookie:PHPSESSIONID=xxxxxxx</p></li><li><p>客户端接收到<code>Set-Cookie</code>的头，将PHPSESSIONID写入cookie</p></li><li><p>当你第二次访问页面时，所有Cookie会附带的请求头(Request)发送给服务器端</p></li><li><p>服务器识别PHPSESSIONID这个cookie，然后去session目录查找对应session文件，</p></li><li><p>找到这个session文件后，检查是否过期，如果没有过期，去读取Session文件中的配置；如果已经过期，清空其中的配置</p></li></ol><h3 id="1-3-表单中get与post提交方法的区别"><a href="#1-3-表单中get与post提交方法的区别" class="headerlink" title="1.3 表单中get与post提交方法的区别"></a>1.3 表单中get与post提交方法的区别</h3><pre><code>参数接收： get：通过url参数传递进行接收, post：是实体数据,可以通过表单提交大量信息.</code></pre><h3 id="1-4-数据库中的事务是什么"><a href="#1-4-数据库中的事务是什么" class="headerlink" title="1.4 数据库中的事务是什么"></a>1.4 数据库中的事务是什么</h3><ul><li>事务（transaction）是作为一个单元的一组有序的数据库操作。<br>如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。<br>如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。<br>如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消</li></ul><h3 id="1-5-echo-print-print-r-的区别"><a href="#1-5-echo-print-print-r-的区别" class="headerlink" title="1.5 echo(),print(),print_r()的区别"></a>1.5 echo(),print(),print_r()的区别</h3><ul><li><p>echo是PHP语句, print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)</p></li><li><p>print() 只能打印出简单类型变量的值(如int,string)</p></li><li><p>print_r() 可以打印出复杂类型变量的值(如数组,对象)</p></li><li><p>echo 输出一个或者多个字符串</p></li></ul><h3 id="1-6-用PHP写出显示客户端IP与服务器IP的代码"><a href="#1-6-用PHP写出显示客户端IP与服务器IP的代码" class="headerlink" title="1.6 用PHP写出显示客户端IP与服务器IP的代码"></a>1.6 用PHP写出显示客户端IP与服务器IP的代码</h3><ul><li><p>打印客户端IP:echo $_SERVER[‘REMOTE_ADDR’]; 或者: getenv(‘REMOTE_ADDR’);</p></li><li><p>打印服务器IP:echo gethostbyname(“<a href="http://www.bolaiwu.com&quot;" target="_blank" rel="noopener">www.bolaiwu.com&quot;</a>)</p></li></ul><h3 id="1-7-include和require的区别是什么"><a href="#1-7-include和require的区别是什么" class="headerlink" title="1.7 include和require的区别是什么?"></a>1.7 include和require的区别是什么?</h3><ul><li><p>require:是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require</p></li><li><p>include:有返回值，而require没有(可能因为如此require的速度比include快)</p></li></ul><blockquote><font color="red">注意:包含文件不存在或者语法错误的时候,require是致命的,include不是</font></blockquote><h3 id="1-8-Trait是什么"><a href="#1-8-Trait是什么" class="headerlink" title="1.8 Trait是什么?"></a>1.8 Trait是什么?</h3><p>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题</p><p>单个Trait使用方法：</p><pre><code class="php">&lt;?phptrait ezcReflectionReturnInfo {    function getReturnType() { /*1*/ }    function getReturnDescription() { /*2*/ }}class ezcReflectionMethod extends ReflectionMethod {    use ezcReflectionReturnInfo;    /* ... */}class ezcReflectionFunction extends ReflectionFunction {    use ezcReflectionReturnInfo;    /* ... */}?&gt;</code></pre><p>多个Trait使用方法</p><pre><code class="php">&lt;?phptrait Hello {    public function sayHello() {        echo &#39;Hello &#39;;    }}trait World {    public function sayWorld() {        echo &#39;World&#39;;    }}class MyHelloWorld {    use Hello, World;    public function sayExclamationMark() {        echo &#39;!&#39;;    }}$o = new MyHelloWorld();$o-&gt;sayHello();$o-&gt;sayWorld();$o-&gt;sayExclamationMark();?&gt;</code></pre><h3 id="1-9-php7和php5区别"><a href="#1-9-php7和php5区别" class="headerlink" title="1.9 php7和php5区别"></a>1.9 php7和php5区别</h3><p>1.PHP7.0 比PHP5.6性能提升了两倍。<br>1). 变量存储字节减小，减少内存占用，提升变量操作速度</p><p>2). 改善数组结构，数组元素和hash映射表被分配在同一块内存里，降低了内存占用、提升了 cpu 缓存命中率</p><p>3). 改进了函数的调用机制，通过优化参数传递的环节，减少了一些指令，提高执行效率</p><p>2.PHP7.0全面一致支持64位。</p><p>3.PHP7.0之前出现的致命错误，都改成了抛出异常。</p><p>4.增加了空结合操作符（？？）。效果相当于三元运算符。</p><p>5.PHP7.0新增了函数的返回类型声明。</p><p>6.PHP7.0新增了标量类型声明。<br><code>PHP 7 中的函数的形参类型声明可以是标量。在 PHP 5 中只可以是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。</code></p><p>7.新增加了匿名类。</p><p><code>PHP 5.3 开始有了匿名函数，现在又新增了匿名类；</code></p><p>8.PHP7.0之后溢移除了一些老的不再支持的SAPI(服务器端应用编程端口)和扩展。</p><pre><code> ereg mssql mysql sybase_ct</code></pre><p>9.define 现在可以定义常量数组。</p><h3 id="1-10-谈谈对mvc的认识"><a href="#1-10-谈谈对mvc的认识" class="headerlink" title="1.10 谈谈对mvc的认识"></a>1.10 谈谈对mvc的认识</h3><p><code>模型(model),视图(view),控制器(controller);由模型发出要实现的功能到控制器,控制器接收组织功能传递给视图;</code></p><h3 id="1-11-请说明php中传值与传引用的区别。什么时候传值什么时候传引用"><a href="#1-11-请说明php中传值与传引用的区别。什么时候传值什么时候传引用" class="headerlink" title="1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?"></a>1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?</h3><ul><li><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略</p></li><li><p>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改</p></li></ul><blockquote><p>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。<br>按引用传递则不需要复制值，对于性能提高很有好处</p></blockquote><h3 id="1-12-从一个标准url-里取出文件的扩展名"><a href="#1-12-从一个标准url-里取出文件的扩展名" class="headerlink" title="1.12 从一个标准url 里取出文件的扩展名"></a>1.12 从一个标准url 里取出文件的扩展名</h3><p>例如: <a href="http://www.sina.com.cn/abc/de/fg.php?id=1" target="_blank" rel="noopener">http://www.sina.com.cn/abc/de/fg.php?id=1</a> 需要取出php 或.php</p><pre><code class="php">function getExt($url){   $arr = parse_url($url);   $file = basename($arr[&#39;path&#39;]);   $ext = explode(&quot;.&quot;,$file);   return $ext[1];}</code></pre><h3 id="1-13-字符串反转"><a href="#1-13-字符串反转" class="headerlink" title="1.13 字符串反转"></a>1.13 字符串反转</h3><pre><code class="php">function strrev($str){  $len = mb_strlen($str);  $tmp=[];  for ($i=0;$i&lt;$len;$i++){      $tmp[] = mb_substr($str,$i,1);  }  krsort($tmp);  return implode(&#39;&#39;,$tmp);}</code></pre><blockquote><p>strrev函数对英文很好用,直接可以实现字符串翻转,但是面对中文会出现乱码</p></blockquote><h3 id="1-14-在HTTP-1-0中，状态码401-的含义是-如果返回-“找不到文件”-的提示，则可用header函数，其语句为"><a href="#1-14-在HTTP-1-0中，状态码401-的含义是-如果返回-“找不到文件”-的提示，则可用header函数，其语句为" class="headerlink" title="1.14 在HTTP 1.0中，状态码401 的含义是? 如果返回 “找不到文件” 的提示，则可用header函数，其语句为?"></a>1.14 在HTTP 1.0中，状态码401 的含义是? 如果返回 “找不到文件” 的提示，则可用header函数，其语句为?</h3><pre><code>答：401表示未授权; header(&quot;HTTP/1.0 404 Not Found&quot;);</code></pre><h3 id="1-15-isset、empty和is-null的区别"><a href="#1-15-isset、empty和is-null的区别" class="headerlink" title="1.15 isset、empty和is_null的区别?"></a>1.15 isset、empty和is_null的区别?</h3><ul><li>isset 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。</li><li>empty 判断变量是否为空，如果变量是非空或非零的值，则empty() 返回 FALSE。换句话说，”” 、0 、”0”、NULL 、FALSE 、array() 、var $var; 以及没有任何属性的对象都将被认为是空的，如果变量为空，则返回TRUE。　　</li><li>is_null 判断变量是否为NULL</li></ul><h3 id="1-16-self、static、-this-的区别"><a href="#1-16-self、static、-this-的区别" class="headerlink" title="1.16 self、static、$this 的区别?"></a>1.16 self、static、$this 的区别?</h3><ul><li>self 和 __CLASS__，都是对当前类的ip静态引用，取决于定义当前方法所在的类。也就是说，self写在哪个类里面,它引用的就是谁。</li><li>$this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。</li><li>static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。</li><li>self可以用于访问类的静态属性、静态方法和常量，但self指向的是当前定义所在的类，这是 self 的限制。</li><li>$this 指向的对象所属的类和 static 指向的类相同。</li><li>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。</li><li>静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。</li></ul><h3 id="1-17-单引号’与双引号”区别"><a href="#1-17-单引号’与双引号”区别" class="headerlink" title="1.17 单引号’与双引号”区别"></a>1.17 单引号’与双引号”区别</h3><p>  php里的单引号把内容当成纯文本，不会经过服务器翻译。而双引号则与此相反。里面的内容会经过服务器处理(process)；</p><pre><code class="php">$foo=&quot;data&quot;;echo &#39;$foo&#39;; //单引号输出$fooecho &quot;$foo&quot;; //双引号输出data</code></pre><h3 id="1-18-如果理解OOP？"><a href="#1-18-如果理解OOP？" class="headerlink" title="1.18 如果理解OOP？"></a>1.18 如果理解OOP？</h3><p>OOP(object oriented programming)，即面向对象编程，其中两个最重要的概念就是类和对象，类只是具备了某些功能和属性的抽象模型，而实际应用中需要一个一个实体，也就是需要对类进行实例化，类在实例化之后就是对象。</p><p><code>OOP具有三大特点：</code></p><ul><li>封装性：<blockquote><p>将一个类的使用和实现分开,只保留部分接口和方法供外部使用，所以开发人员只需要关注这个类如何使用，而不用去关心其具体的实现过程。</p></blockquote></li><li>继承性：<blockquote><p>子类自动继承其父级类中的属性和方法,并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。 php只支持单继承，也就是说一个子类只能有一个父类。</p></blockquote></li><li>多态性：<blockquote><p>继承了来自父级类中的属性和方法，并对其中部分方法进行重写,于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。多态性增强了软件的灵活性。</p></blockquote></li></ul><h3 id="1-19-PHP缓存技术有哪些-？"><a href="#1-19-PHP缓存技术有哪些-？" class="headerlink" title="1.19 PHP缓存技术有哪些 ？"></a>1.19 PHP缓存技术有哪些 ？</h3><ul><li>全页面静态化缓存，也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程</li><li>页面部分缓存，将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示</li><li>数据缓存，通过一个id进行请求的数据,将数据缓存到一个php文件中,id和文件是对应的,下次通过这个id进行请求时 直接读php文件</li><li>查询缓存，和数据缓存差不多,根据查询语句进行缓存;</li></ul><h3 id="1-20-接口和抽象类的区别是什么？"><a href="#1-20-接口和抽象类的区别是什么？" class="headerlink" title="1.20 接口和抽象类的区别是什么？"></a>1.20 接口和抽象类的区别是什么？</h3><ul><li>抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。</li><li><font color="red">抽象类是通过关键字 abstract 来声明的</font>。</li><li>抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，</li><li>抽象方法没有方法体，该方法天生就是要被子类重写的。</li><li>抽象方法的格式为：abstract function abstractMethod();</li><li>因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。</li><li><font color="red">接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public</font>，</li><li>接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。</li><li><font color="red">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现</font>。</li><li><font color="red">子类继承抽象类使用extends，子类实现接口使用implements</font>。</li></ul><h3 id="1-21-常见-HTTP-状态码，分别代表什么含义"><a href="#1-21-常见-HTTP-状态码，分别代表什么含义" class="headerlink" title="1.21 常见 HTTP 状态码，分别代表什么含义"></a>1.21 常见 HTTP 状态码，分别代表什么含义</h3><ul><li>200:请求成功</li><li>206:部分内容<blockquote><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具，都是使用此类响应实现断点续传，或者将一个大文档分解为多个下载段同时下载。</p></blockquote></li><li>301:永久重定向</li><li>302:临时重定向</li><li>400:错误请求</li><li>401:未经授权</li><li>403:禁止访问</li><li>404:文件未找到</li><li>500:内部服务器错误</li><li>502:无效网关</li></ul><h3 id="1-22-计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒"><a href="#1-22-计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒" class="headerlink" title="1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒"></a>1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒</h3><pre><code class="php">&lt;?php/** * function：计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒 * param string $date1[格式如：2011-11-5] * param string $date2[格式如：2012-12-01] * return array array(&#39;年&#39;,&#39;月&#39;,&#39;日&#39;); */function diffDate($date1,$date2){    $datetime1 = new \DateTime($date1);    $datetime2 = new \DateTime($date2);    $interval = $datetime1-&gt;diff($datetime2);    $time[&#39;y&#39;]         = $interval-&gt;format(&#39;%Y&#39;);    $time[&#39;m&#39;]         = $interval-&gt;format(&#39;%m&#39;);    $time[&#39;d&#39;]         = $interval-&gt;format(&#39;%d&#39;);    $time[&#39;h&#39;]         = $interval-&gt;format(&#39;%H&#39;);    $time[&#39;i&#39;]         = $interval-&gt;format(&#39;%i&#39;);    $time[&#39;s&#39;]         = $interval-&gt;format(&#39;%s&#39;);    return $time;}# 使用实例$sss = diffDate(&#39;2018-12-25 12:30:30&#39;, &#39;2018-12-26 15:00:00&#39;);print_r($sss);</code></pre><p>输出结果：</p><pre><code>Array(    [y] =&gt; 00    [m] =&gt; 0    [d] =&gt; 1    [h] =&gt; 02    [i] =&gt; 29    [s] =&gt; 30)</code></pre><h3 id="1-23-长连接、短连接的区别和使用"><a href="#1-23-长连接、短连接的区别和使用" class="headerlink" title="1.23 长连接、短连接的区别和使用"></a>1.23 长连接、短连接的区别和使用</h3><p>涵义说明:</p><ul><li>长连接：client方与server方先建立连接，连接建立后不断开，然后再进行报文发送和接收。这种方式下由于通讯连接一直存在。此种方式常用于P2P通信。</li><li>短连接：Client方与server每进行一次报文收发交易时才进行通讯连接，交易完毕后立即断开连接。此方式常用于一点对多点通讯。C/S通信。</li></ul><p>使用时机:</p><ul><li><p>长连接使用场景:<br>短连接多用于操作频繁，点对点的通讯，而且连接数不能太多的情况。每个TCP连 接的建立都需要三次握手，每个TCP连接的断开要四次握手。如果每次操作都要建立连接然后再操作的话处理速度会降低，所以每次操作下次操作时直接发送数据 就可以了，不用再建立TCP连接。例如：数据库的连接用长连接，如果用短连接频繁的通信会造成socket错误，频繁的socket创建也是对资源的浪费。</p></li><li><p>短连接使用场景:<br>web网站的http服务一般都用短连接。因为长连接对于服务器来说要耗费一定 的资源。像web网站这么频繁的成千上万甚至上亿客户端的连接用短连接更省一些资源。试想如果都用长连接，而且同时用成千上万的用户，每个用户都占有一个 连接的话，可想而知服务器的压力有多大。所以并发量大，但是每个用户又不需频繁操作的情况下需要短连接。</p></li></ul><h3 id="1-24-如何防止盗链？"><a href="#1-24-如何防止盗链？" class="headerlink" title="1.24 如何防止盗链？"></a>1.24 如何防止盗链？</h3><ul><li><p>不定期更名文件或者目录</p></li><li><p>加入水印</p></li><li><p>限制引用页<br>原理:服务器获取用户提交信息的网站地址，然后和真正的服务端的地址相比较， 如果一致则表明是站内提交，或者为自己信任的站点提交，否则视为盗链。实现时可以使用HTTP_REFERER 和htaccess 文件(需要启用mod_Rewrite)，结合正则表达式去匹配用户的每一个访问请求。</p></li><li><p>文件伪装<br>文件伪装是目前用得最多的一种反盗链技术，一般会结合服务器端动态脚本 (PHP/JSP/ASP)。实际上用户请求的文件地址，只是一个经过伪装的脚本文件，这个脚本文件会对用户的请求作认证,一般会检查 Session，Cookie 或HTTP_REFERER 作为判断是否为盗链的依据。而真实的文件实际隐藏在用户不能够访问的地方，只有用户通过验证以后才会返回给用户</p></li><li><p>加密认证<br>这种反盗链方式，先从客户端获取用户信息，然后根据这个信息和用户请求的文件名 字一起加密成字符串(Session ID)作为身份验证。只有当认证成功以后，服务端才会把用户需要的文件传送给客户。一般我们会把加密的Session ID 作为URL 参数的一部分传递给服务器，由于这个Session ID 和用户的信息挂钩，所以别人就算是盗取了链接，该Session ID 也无法通过身份认证，从而达到反盗链的目的。这种方式对于分布式盗链非常有效。</p></li><li><p>随机附加码<br>每次,在页面里生成一个附加码,并存在数据库里,和对应的图片相关,访问图片时和此附加码对比,相同则输出图片,否则输出404图片</p></li></ul><blockquote><p><a href="https://www.alibabacloud.com/help/zh/doc-detail/31937.htm" target="_blank" rel="noopener">查看阿里云防盗链方案</a></p></blockquote><h2 id="2、进阶"><a href="#2、进阶" class="headerlink" title="2、进阶"></a>2、进阶</h2><h3 id="2-1-yield-是什么，说个使用场景"><a href="#2-1-yield-是什么，说个使用场景" class="headerlink" title="2.1 yield 是什么，说个使用场景"></a>2.1 yield 是什么，说个使用场景</h3><ul><li>yield是生成器函数的核心关键字，</li><li>使用场景：协程可以用在，异步网络 IO 的时候，使其成为非阻塞的，</li></ul><p>使用示例:</p><pre><code>&lt;?phpheader(&quot;content-type:text/html;charset=utf-8&quot;);function readTxt(){    # code...    $handle = fopen(&quot;./test.txt&quot;, &#39;rb&#39;);    while (feof($handle)===false) {        # code...        yield fgets($handle);    }    fclose($handle);}foreach (readTxt() as $key =&gt; $value) {    # code...    echo $value.&#39;&lt;br/&gt;&#39;;}</code></pre><blockquote><p>使用生成器读取文件，第一次读取了第一行，第二次读取了第二行，以此类推，每次被加载到内存中的文字只有一行，大大的减小了内存的使用</p></blockquote><p><a href="http://www.laruence.com/2015/05/28/3038.html" target="_blank" rel="noopener">在PHP中使用协程实现多任务调度</a></p><h3 id="2-2-session共享方案"><a href="#2-2-session共享方案" class="headerlink" title="2.2 session共享方案"></a>2.2 session共享方案</h3><ul><li><p>搭建redis集群或者memcached集群，用集群自带的同步方法来帮我们在不同的主机中同步session，这样就相当于把原来的一份session变成了N分session，session的同步就依赖于NoSql集群的同步了。</p></li><li><p>单独设置一个session服务器，负载服务器得到一个sessionid过后，去session服务器获得会话状态，然后根据状态来响应用户请求，如果会话状态为空，则在session服务器中设置一个会话状态，然后返回给用户一个sessionid。</p></li></ul><h3 id="2-3-php7-2-为什么弃用-autoload"><a href="#2-3-php7-2-为什么弃用-autoload" class="headerlink" title="2.3 php7.2 为什么弃用__autoload"></a>2.3 php7.2 为什么弃用__autoload</h3><p><code>自动加载的原理，就是在我们new一个class的时候，PHP系统如果找不到你这个类，就会去自动调用本文件中的__autoload($class_name)方法，我们new的这个class_name 就成为这个方法的参数。所以我们就可以在这个方法中根据我们需要new class_name的各种判断和划分就去require对应的路径类文件，从而实现自动加载。</code></p><p><strong>弃用原因</strong>:因是PHP不允许函数重名，所以一个项目中仅能出现一个<strong>autoload函数。自己写的代码保证只有一个</strong>autoload函数虽然有点难但也能做到，要是第三方库也定义了<strong>autoload，那就很头疼了。</strong>autoload的后继者是<a href="http://php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="noopener">spl_autoload_register</a>函数</p><h3 id="2-4-Zval结构"><a href="#2-4-Zval结构" class="headerlink" title="2.4 Zval结构"></a>2.4 Zval结构</h3><ul><li>PHP5 Zval结构<pre><code>struct _zval_struct {   union {        long lval;        double dval;        struct {             char *val;             int len;        } str;        HashTable *ht;        zend_object_value obj;        zend_ast *ast;   } value;   zend_uint refcount__gc;   zend_uchar type;   zend_uchar is_ref__gc;};</code></pre><strong> <font color="blue">PHP5 Zval结构存在的问题:</font> </strong></li><li>整个结构体的大小是(在64位系统)24个字节, 而zval.value联合体中zend_object_value是最大的长板, 它导致整个value需要16个字节。</li><li>结构体中的每一个字段都有明确的定义, 没有预留任何的自定义字段,在存储一些和zval相关的信息的时候，不得不采用其他方式来扩充zval</li><li>PHP的zval大部分都是按值传递,但有俩个例外(对象和资源),它们永远都是按引用传递，这样就造成一个问题, 对象和资源在除了zval中的引用计数以外, 还需要一个全局的引用计数, 这样才能保证内存可以回收。<code>在PHP5的时代, 以对象为例, 它有俩套引用计数, 一个是zval中的, 另外一个是obj自身的计数。非此之外，需要多次读取内存, 才能获取到真正的objec对象本身</code></li><li>PHP5的时代调用MAKE_STD_ZVAL会在堆内存上分配一个临时变量</li></ul><ul><li>PHP7 Zval结构<pre><code>struct _zval_struct {   union {        zend_long         lval;             /* long value */        double            dval;             /* double value */        zend_refcounted  *counted;        zend_string      *str;        zend_array       *arr;        zend_object      *obj;        zend_resource    *res;        zend_reference   *ref;        zend_ast_ref     *ast;        zval             *zv;        void             *ptr;        zend_class_entry *ce;        zend_function    *func;        struct {             uint32_t w1;             uint32_t w2;        } ww;   } value;  union {      struct {          ZEND_ENDIAN_LOHI_4(              zend_uchar    type,         /* active type */              zend_uchar    type_flags,              zend_uchar    const_flags,              zend_uchar    reserved)     /* call info for EX(This) */      } v;      uint32_t type_info;  } u1;  union {      uint32_t     var_flags;      uint32_t     next;                 /* hash collision chain */      uint32_t     cache_slot;           /* literal cache slot */      uint32_t     lineno;               /* line number (for ast nodes) */      uint32_t     num_args;             /* arguments number for EX(This) */      uint32_t     fe_pos;               /* foreach position */      uint32_t     fe_iter_idx;          /* foreach iterator index */  } u2;};</code></pre><strong> <font color="blue">PHP7对Zval结构优化:</font> </strong></li><li>整个结构体内部都是联合体，这个新的zval在64位环境下,现在只需要16个字节(2个指针size), 它主要分为俩个部分, value和扩充字段, 而扩充字段又分为u1和u2俩个部分, 其中u1是type info, u2是各种辅助字段.</li><li>在PHP7中，移除了MAKE_STD_ZVAL/ALLOC_ZVAL宏, 不再支持存堆内存上申请zval. 函数内部使用的zval要么来自外面输入, 要么使用在栈上分配的临时zval.</li><li>抽象的来说, PHP7中的zval, 已经变成了一个值指针, 要么保存着原始值, 要么保存着指向一个保存原始值的指针. 也就是说现在的zval相当于PHP5的时候的zval<em>. 只不过相比于zval</em>, 直接存储zval, 我们可以省掉一次指针解引用, 从而提高缓存友好性.</li></ul><p><a href="http://www.laruence.com/2018/04/08/3170.html" target="_blank" rel="noopener">深入理解PHP7内核之zval</a></p><h2 id="3、数据库"><a href="#3、数据库" class="headerlink" title="3、数据库"></a>3、数据库</h2><h3 id="3-1-Mysql的存储引擎-MyISAM和InnoDB的区别。"><a href="#3-1-Mysql的存储引擎-MyISAM和InnoDB的区别。" class="headerlink" title="3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。"></a>3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。</h3><ul><li>MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持.</li><li>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快.</li><li>InnoDB不支持FULLTEXT(全文索引) 类型的索引.</li><li><p>InnoDB 中不保存表的具体行数.</p><blockquote><p>也就是说执行 ：select count(*) from table时，<br> InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可.</p></blockquote></li><li><p>对于AUTO_INCREMENT(递增)类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p></li><li>DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</li><li>Load Table From Master 操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用.</li><li>MyISAM支持表锁，InnoDB支持行锁。</li></ul><h3 id="3-2-delete-drop-truncate区别"><a href="#3-2-delete-drop-truncate区别" class="headerlink" title="3.2 delete drop truncate区别"></a>3.2 delete drop truncate区别</h3><ul><li>truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。</li><li>删除数据的速度，一般来说: drop&gt; truncate &gt; delete</li><li>delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚</li></ul><p><strong>使用场合</strong>：<br>  1.当你不再需要该表时， 用drop;<br>  2.当你仍要保留该表，但要删除所有记录时， 用truncate;<br>  3.当你要删除部分记录时（always with a where clause), 用 delete.</p><blockquote><p>对于有主外键关系的表，不能使用truncate而应该使用不带where子句的delete语句，由于truncate不记录在日志中，不能够激活触发器</p></blockquote><h3 id="3-3-优化MYSQL数据库的方法"><a href="#3-3-优化MYSQL数据库的方法" class="headerlink" title="3.3 优化MYSQL数据库的方法"></a>3.3 优化MYSQL数据库的方法</h3><ul><li>选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL,例如’省份,性别’,最好设置为ENUM</li><li><p>使用连接（JOIN）来代替子查询</p><pre><code>a.删除没有任何订单客户:DELETE FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)b.提取所有没有订单客户:SELECT FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)c.提高b的速度优化:SELECT FROM customerinfo LEFT JOIN orderid customerinfo.customerid=orderinfo.customerid WHERE orderinfo.customerid IS NULL</code></pre></li><li>使用联合(UNION)来代替手动创建的临时表<pre><code>SELECT name FROM `nametest` UNION SELECT username FROM `nametest2`</code></pre></li><li><p>事务处理</p><blockquote><p>保证数据完整性,例如添加和修改同时,两者成立则都执行,一者失败都失败。</p></blockquote></li><li><p>锁定表,优化事务处理</p><p><code>我们用一个 SELECT 语句取出初始数据，通过一些计算，用 UPDATE 语句将新值更新到表中。包含有 WRITE 关键字的 LOCK TABLE 语句可以保证在 UNLOCK TABLES 命令被执行之前，不会有其它的访问来对 inventory 进行插入、更新或者删除的操作.</code></p><pre><code>mysql_query(&quot;LOCK TABLE customerinfo READ, orderinfo WRITE&quot;);mysql_query(&quot;SELECT customerid FROM `customerinfo` where id=&quot;.$id);mysql_query(&quot;UPDATE `orderinfo` SET ordertitle=&#39;$title&#39; where customerid=&quot;.$id);mysql_query(&quot;UNLOCK TABLES&quot;);</code></pre></li><li>建立索引<br><a href="https://mrliuqh.github.io/2017/09/17/php-interView-question/#3-7-索引类型">索引类型,请看3.7</a></li><li><p>优化查询语句</p><ul><li>避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li><li>避免全表扫描，首先应考虑在where及order by涉及的列上建立索引</li><li><p>避免在 where子句中对字段进行null值判断，会引起全表扫描</p><pre><code>如：select id from test where num is null</code></pre><blockquote><font color="red">因此字段都应设置为NOT NULL，将来查询的时候就不用去比较NULL值</font></blockquote></li><li><p>避免在where子句中使用or来连接条件，会引起全表扫描<br><code>如：select id from t where num=10 or num=20可以这样查询：select id from t where num=10 union all select id from t where num=20</code></p></li><li>in 和 not in 也要慎用，否则会导致全表扫描</li><li>避免在 where 子句中对字段进行表达式操作</li></ul><p><code>如：select id from t where num/2=100应改为：select id from t where num =100*2</code></p><ul><li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，一个表的索引数最好不要超过6个。</p></li><li><p>任何地方都不要使用 select * from t ，用具体的字段列表代替”*”，不要返回用不到的任何字段。</p></li><li><p>通过explain查询和分析SQL的执行计划<br><img src="https://mrliuqh.github.io/directionsImg/mysql/explain.png" alt="image"></p></li></ul></li></ul><h3 id="3-4-mysql-fetch-row-和-mysql-fetch-array-有什么分别？"><a href="#3-4-mysql-fetch-row-和-mysql-fetch-array-有什么分别？" class="headerlink" title="3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？"></a>3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？</h3><pre><code> mysql_fetch_row()  返回的结果集是索引数组。 mysql_fetch_assoc()   返回的结果集是关联数组 mysql_fetch_array()  既可以返回索引数组也可以返回关联数组，  取决于它的第二个参数 MYSQL_BOTH MYSQL_NUM MYSQL_ASSOC 默认为MYSQL_BOTH</code></pre><h3 id="3-5-php访问数据库有哪几步"><a href="#3-5-php访问数据库有哪几步" class="headerlink" title="3.5 php访问数据库有哪几步?"></a>3.5 php访问数据库有哪几步?</h3><p> 1.连接数据库服务器：<br> <code>mysql_connect(&#39;数据库服务器的主机名或ip&#39;,&#39;数据库服务器的用户名&#39;,&#39;数据库服务器的密码&#39;);</code><br> 2.选择数据库：<br> <code>mysql_select_db(数据库名);</code><br> 3.设置从数据库提取数据的字符集：<br> <code>mysql_query(&quot;set names utf8&quot;);</code><br> 4.执行sql语句：<br> <code>mysql_query(sql语句);</code><br> 5.关闭结果集，释放资源：<br> <code>mysql_free_result($result);</code><br> 6.关闭与数据库服务器的连接：<br> <code>mysql_close($link);</code></p><h3 id="3-6-表设计三大范式"><a href="#3-6-表设计三大范式" class="headerlink" title="3.6 表设计三大范式"></a>3.6 表设计三大范式</h3><ul><li>1．第一范式(原子性):所有字段值都是不可分解的原子值       </li><li>2．第二范式(在第一范式的基础上):确保表中的每列都和主键相关，即一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中</li><li>3．第三范式(在第二范式的基础上):确保每列都和主键列直接关联,而不是间接相关</li></ul><h3 id="3-7-索引类型"><a href="#3-7-索引类型" class="headerlink" title="3.7 索引类型"></a>3.7 索引类型</h3><ul><li><p>普通索引(index):<br><code>创建:CREATE INDEX &lt;索引名&gt; ON tablename (索引字段)修改:ALTER TABLE tablename ADD INDEX [索引名] (索引字段)创表指定索引:CREATE TABLE tablename([...],INDEX[索引名](索引字段))</code></p></li><li><p>唯一索引(unique):<br><font color="red">在普通索引的基础上，会进行排除重复值</font><br><code>创建:CREATE UNIQUE &lt;索引名&gt; ON tablename (索引字段)修改:ALTER TABLE tablename ADD UNIQUE [索引名] (索引字段)创表指定索引: CREATE TABLE tablename([...],UNIQUE[索引名](索引字段))</code></p></li><li><p>主键(primary key):<br><font color="red">和唯一索引的区别在于一个表里只能有一个主键索引，但是唯一索引可以有多个</font></p><pre><code>它是唯一索引,一般在创建表是建立语法：CREATA TABLE tablename ([...],PRIMARY KEY[索引字段])</code></pre></li><li><p>联合索引:<br><code>语法：ALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3 )</code></p></li><li><p>全文索引 (fulltext)</p></li></ul><p><code>普通索引／唯一索引／主键索引 哪个速度更快？</code><br><code>速度是一样的快，因为三者都是采用btree二叉树算法进行查找。</code></p><h3 id="3-8-索引算法"><a href="#3-8-索引算法" class="headerlink" title="3.8 索引算法"></a>3.8 索引算法</h3><ul><li><p>BTREE算法</p><blockquote><p>Innodb和MyISAM默认的索引是BTREE索引<br>采用二叉树算法，左边的树枝小于根节点关键词，右边大于根节点，两边的树的深度不大于1，从而降低时间复杂度。</p></blockquote></li><li><p>HASH算法</p><blockquote><p>Mermory默认的索引是Hash索引<br>Hash索引只能用于HASH值比较，例如=,&lt;&gt; 操作符，不像BTREE索引需要从根节点到枝节点，最后才能访问到页节点这样多次IO访问，所以检索效率远高于BTREE索引。</p></blockquote></li><li><p><font>为什么不默认采用HASH索引呢？</font></p><blockquote><p>HASH只能用在=和&lt;&gt;上，所以功能受限，所以默认采用BTREE。</p></blockquote></li></ul><h3 id="3-9-insert-和-replace的区别"><a href="#3-9-insert-和-replace的区别" class="headerlink" title="3.9 insert 和 replace的区别"></a>3.9 insert 和 replace的区别</h3><p>replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。</p><blockquote><font color="red">要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</font></blockquote><ul><li><strong>MySQL replace into 有三种形式：</strong></li></ul><pre><code>replace into tbl_name(col_name, ...) values(...)replace into tbl_name(col_name, ...) select ...replace into tbl_name set col_name=value, ...</code></pre><blockquote><p>前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值</p></blockquote><h3 id="3-10-数据库操作事务的四大特性"><a href="#3-10-数据库操作事务的四大特性" class="headerlink" title="3.10 数据库操作事务的四大特性"></a>3.10 数据库操作事务的四大特性</h3><h4 id="3-10-1-事务操作数据库的四大特性-ACID"><a href="#3-10-1-事务操作数据库的四大特性-ACID" class="headerlink" title="3.10.1 事务操作数据库的四大特性(ACID)"></a>3.10.1 事务操作数据库的四大特性(ACID)</h4><ul><li>原子性 (Atomicity):就是事务的所包含的所有操作，要么全部成功，要么全部失败回滚。</li><li>一致性 (Consistency):简单来说就是在事务执行前和执行后，必须保持数据的一致。</li><li><p>隔离性 (Isolation):一个事务执行的过程当中，不能被其他的事务干扰。</p><blockquote><p>比如有事务A和事务B，相对于A来说，B想要执行，要么在我执行之前执行，要么在我执行完毕之后，你再开始执行.</p></blockquote></li><li><p>持久性 (Durability):事务被提交之后，他就被永久的存储到了数据库当中.</p></li></ul><h4 id="3-10-2-不考虑事务的隔离性所引发的问题"><a href="#3-10-2-不考虑事务的隔离性所引发的问题" class="headerlink" title="3.10.2 不考虑事务的隔离性所引发的问题"></a>3.10.2 不考虑事务的隔离性所引发的问题</h4><ul><li>脏读:一个事务读取到了一个未提交的事务的数据。</li><li><p>不可重复读:<br>在读取数据库的某条数据的时候返回了不同的值，造成这个结果的原因是因为我们在查询了一次之后准备进行第二次查询的这个间隔之间，对我们要进行查询的这条数据进行了修改操作，从而导致两次读取的数据不一致。</p><p>脏读和不可重复读的区别:脏读是一个事务读取到了一个未提交事务的脏数据，而不可重复读是一个数据读取了一个已经提交了的事务的数据。</p></li><li><p>虚读(幻读)<br>出现幻读不是对一条数据的操作而产生的问题，而是操作多条数据产生的问题，例如：事务A想要对一张表中的某一字段的值进行修改，假设有一个字段的值全部为1，事务A现在想要将1全部修改为2，在提交事务之后，事务B接着又进行了一个操作，在这张表中添加了一个字段，值全部为1。那么这时候操作事务A的用户在查看的时候，会发现还有一行数据没有进行修改，其实这是事务B在他查看之前添加的。</p><p><code>幻读和不可重复读都是读取了一个已经提交的事务，而脏读是读取了一个未提交的事务。不同的是不可重复读查询的是同一条数据，而虚读查询的是批量数据。</code></p></li></ul><h3 id="3-11-事务的四种隔离级别"><a href="#3-11-事务的四种隔离级别" class="headerlink" title="3.11 事务的四种隔离级别"></a>3.11 事务的四种隔离级别</h3><ul><li>Serializable (序列化)：可避免脏读、不可重读读、幻读的发生</li><li>Repeatable-read (可重复读)：可避免脏读、不可重复读的发生。</li><li>Read-committed (读已提交)：可避免脏读的发生。</li><li>Read-uncommitted (读未提交)：最低级别，任何情况都无法保证。<br><code>以上四种的隔离级别最高的Serializable，最低的是Read uncommitted，级别越高，虽然安全级别越高，但是执行的效率就越低，MySQL中默认的隔离级别是:Repeatable read(可重复读)，oracle默认的隔离级别是：Read committed(读已提交)。</code></li></ul><blockquote><font color="red">这里需要注意的是，mysql支持以上四种隔离级别，但是oracle只支持Serializable(串行化)和Read committed(读已提交)这两种隔离级别。</font></blockquote><ul><li>MySQL中查看当前的事务隔离界别<pre><code class="mysql">select @@tx_isolation</code></pre></li><li>设置mysql的隔离级别<pre><code class="mysql">set tx_isolation=&#39;read-uncommitted&#39;</code></pre><blockquote><font color="red">记住:设置数据库的隔离级别一定要是在开启事务之前！</font></blockquote></li></ul><blockquote><p>隔离级别的设置只对当前的链接有效。对于MySQL窗口来说，一个窗口就是一个链接，当前设置的事务隔离级别只对当前的窗口有效。</p></blockquote><h3 id="3-12-CHAR和VARCHAR的区别"><a href="#3-12-CHAR和VARCHAR的区别" class="headerlink" title="3.12 CHAR和VARCHAR的区别"></a>3.12 CHAR和VARCHAR的区别</h3><h4 id="3-12-1-存储方式"><a href="#3-12-1-存储方式" class="headerlink" title="3.12.1 存储方式"></a>3.12.1 存储方式</h4><ul><li>当值存储在CHAR字段中时，<font color="red">剩余的字符将用空格填充;<blockquote><p>例如，一个字段是 name char(5)，并且您要存储只是”tom”，则实际值将存储为”tom  “</p></blockquote></font></li><li>与CHAR不同，VARCHAR只占用基于存储的数据的空间</li><li>varchar类型的实际长度是它的值的实际长度+1，这一个(也可能是两)字节用于保存实际使用了多大的长度</li><li>char的存储方式是：英文字符占1个字节，汉字占用2个字节；varchar的存储方式是：英文和汉字都占用2个字节，两者的存储数据都非unicode的字符数据</li></ul><h4 id="3-12-2-数据检索"><a href="#3-12-2-数据检索" class="headerlink" title="3.12.2 数据检索"></a>3.12.2 数据检索</h4><ul><li>如果CHAR字段的数据较短时，会经过空格填充，所以查询出来的结果需删除尾随空格。</li></ul><h4 id="3-12-3-存储上限"><a href="#3-12-3-存储上限" class="headerlink" title="3.12.3 存储上限"></a>3.12.3 存储上限</h4><ul><li>char(n)，n最大255。</li><li>varchar(n)，n最大65535，另外，按照字符集，不能超过65525字节。这65535字节不能全用来存数据，因为有1-2字节要用来存占用长度，255字节以下用1字节存储长度，255字节以上用2字节存储长度。</li><li>text，上限65535字节，再多也能存，因为还有mediumtext上限2^24-3字节大概16m，longtext上限2^32-4字节大概4G。</li></ul><h4 id="3-12-4-性能对比"><a href="#3-12-4-性能对比" class="headerlink" title="3.12.4 性能对比"></a>3.12.4 性能对比</h4><blockquote><p>按照查询速度： char最快， varchar次之，text最慢</p><ul><li>char，定长，基本没有碎片，索引速度极快。</li><li>varchar，不定长，索引速度没有char快。理论上可以添加全部索引，但是数据长度太大时索引也会截取数据前面的一部分。</li><li>text，不定长，速度慢，索引只能是前缀索引。</li></ul></blockquote><h4 id="3-12-5-不同存储引擎对-CHAR-和-VARCHAR-的使用"><a href="#3-12-5-不同存储引擎对-CHAR-和-VARCHAR-的使用" class="headerlink" title="3.12.5 不同存储引擎对 CHAR 和 VARCHAR 的使用"></a>3.12.5 不同存储引擎对 CHAR 和 VARCHAR 的使用</h4><ul><li><p>MyISAM 存储引擎:建议使用固定长度的数据列代替可变长度的数据列。</p></li><li><p>MEMORY 存储引擎:目前都使用固定长度的数据行存储，因此无论使用 CHAR 或 VARCHAR 列都没有关系。两者都是作为 CHAR 类型处理。</p></li><li>InnoDB 存储引擎:建议使用 VARCHAR 类型。对于 InnoDB 数据表，内部的行存储格式没有区分固定长度和可变长度列(所有数据行都使用指向数据列值的头指针)，因此在 本质上，使用固定长度的 CHAR 列不一定比使用可变长度 VARCHAR 列性能要好。因而，主要的性能因素是数据行使用的存储总量。由于 CHAR 平均占用的空间多于 VARCHAR，因此使 用 VARCHAR 来最小化需要处理的数据行的存储总量和磁盘 I/O 是比较好的。</li></ul><h3 id="3-13-如何理解超键、候选键、主键、外键"><a href="#3-13-如何理解超键、候选键、主键、外键" class="headerlink" title="3.13 如何理解超键、候选键、主键、外键"></a>3.13 如何理解超键、候选键、主键、外键</h3><ul><li><p>主键(Primary Key)：对数据库表中的每一行数据进行唯一标识。</p><ul><li>任意两行的主键值都不同</li><li>包含主键值的列从不修改或更新</li><li>主键值不能重用</li><li>使用PRIMARY KEY进行标识</li></ul></li><li><p>外键(foreign key)：是表中的一列，其值必须在另一个表的主键中。</p></li><li><p>超键(Super Key)：在关系中能惟一标识元组(数据库中的一条记录)的属性集称为关系模式的超键。 </p><blockquote><p>比如一张学生信息表，学生表中含有学号或者身份证号的任意组合都为此表的超键。如：（学号）、（学号，姓名）、（身份证号，性别）等。</p></blockquote></li><li><p>候选键(Candidate Key)：不含有多余属性的超键称为候选键。也就是在候选键中，若要再删除属性，就不能唯一标识元组了。</p></li></ul><blockquote><p>如：学生表中的候选键为：（学号）、（身份证号）。</p></blockquote><h3 id="3-14-BLOB和TEXT有什么区别"><a href="#3-14-BLOB和TEXT有什么区别" class="headerlink" title="3.14  BLOB和TEXT有什么区别"></a>3.14  BLOB和TEXT有什么区别</h3><ul><li><p>二者之间的主要差别是 BLOB 能用来保存二进制数据（比如照片），而TEXT只能保存字符数据</p></li><li><p>TEXT值是大小写不敏感的</p></li><li>BLOB值进行排序和比较时区分大小写</li></ul><h3 id="3-15-NOW-和CURRENT-DATE-有什么区别"><a href="#3-15-NOW-和CURRENT-DATE-有什么区别" class="headerlink" title="3.15 NOW() 和CURRENT_DATE() 有什么区别"></a>3.15 NOW() 和CURRENT_DATE() 有什么区别</h3><ul><li><p>NOW()  命令用于显示当前年份，月份，日期，小时，分钟和秒。</p></li><li><p>CURRENT_DATE() 仅显示当前年份，月份和日期。</p></li></ul><h2 id="4、缓存"><a href="#4、缓存" class="headerlink" title="4、缓存"></a>4、缓存</h2><h3 id="4-1-Memcache和Redis区别"><a href="#4-1-Memcache和Redis区别" class="headerlink" title="4.1 Memcache和Redis区别"></a>4.1 Memcache和Redis区别</h3><ul><li><strong>数据类型</strong>：都是k/v数据库，但memcache只支持string，redis除了string，还支持list，set，hash等数据</li><li><strong>持久化</strong>：memcache不支持内存持久化，redis支持。</li><li><strong>内存管理</strong>：memcache内存用完时，会删除用得最少的缓存；redis内存用完时，会把最少的缓存交换到磁盘里。</li></ul><h3 id="4-2-如何提高memcache的缓存命中率"><a href="#4-2-如何提高memcache的缓存命中率" class="headerlink" title="4.2 如何提高memcache的缓存命中率"></a>4.2 如何提高memcache的缓存命中率</h3><ul><li>合理组合缓存 Key，保证Key最大复用率。</li><li>合理设置过期时间，减少因为缓存数据过期后被穿透</li></ul><h2 id="5、服务器"><a href="#5、服务器" class="headerlink" title="5、服务器"></a>5、服务器</h2><h3 id="5-1-Apache与Nginx的优缺点比较"><a href="#5-1-Apache与Nginx的优缺点比较" class="headerlink" title="5.1 Apache与Nginx的优缺点比较"></a>5.1 Apache与Nginx的优缺点比较</h3><p>1、nginx相对于apache的优点：<br>轻量级，比apache 占用更少的内存及资源。高度模块化的设计，编写模块相对简单抗并发，nginx处理请求是异步非阻塞，多个连接（万级别）可以对应一个进程，而apache 则是阻塞型的，是同步多进程模型，一个连接对应一个进程，在高并发下nginx 能保持低资源低消耗高性能。nginx处理静态文件好，Nginx 静态处理性能比 Apache 高 3倍以上<br>2、apache 相对于nginx 的优点：<br>apache 的rewrite 比nginx 的rewrite 强大 ，模块非常多，基本想到的都可以找到 ，比较稳定，少bug ，nginx的bug相对较多<br>3：Nginx比Apache快的原因：这得益于Nginx使用了最新的epoll（Linux 2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。</p><blockquote><p>目前Linux下能够承受高并发访问的 Squid、Memcached都采用的是epoll网络I/O模型。 处理大量的连接的读写，Apache所采用的select网络I/O模型非常低效。</p></blockquote><h3 id="5-2-fastcgi、cgi、php-fpm"><a href="#5-2-fastcgi、cgi、php-fpm" class="headerlink" title="5.2 fastcgi、cgi、php-fpm"></a>5.2 fastcgi、cgi、php-fpm</h3><ul><li><p>fastcgi和cgi的区别<br><code>在web服务器方面在对数据进行处理的进程方面</code>:<br>a. cgi fork一个新的进程进行处理读取参数，处理数据，然后就结束生命期。<br>b. fastcgi 用tcp方式跟远程机子上的进程或本地进程建立连接要开启tcp端口，进入循环，等待数据的到来，处理数据。</p></li><li><p>php-fpm的作用<br><code>那PHP-FPM又是什么呢？它是一个实现了Fastcgi协议的程序,用来管理Fastcgi起的进程的,即能够调度php-cgi进程的程序。现已在PHP内核中就集成了PHP-FPM，使用--enalbe-fpm这个编译参数即可。另外，修改了php.ini配置文件后，没办法平滑重启，需要重启php-fpm才可。此时新fork的worker会用新的配置，已经存在的worker继续处理完手上的活</code></p></li></ul><blockquote><p>举个例子: 服务端现在有个10万个字单词， 客户每次会发来一个字符串，问以这个字符串为前缀的单词有多少个。 那么可以写一个程序，这个程序会建一棵trie树，然后每次用户请求过来时可以直接到这个trie去查找。 但是如果以cgi的方式的话，这次请求结束后这课trie也就没了，等下次再启动该进程时，又要新建一棵trie树，这样的效率就太低下了。 而用fastcgi的方式的话，这课trie树在进程启动时建立，以后就可以直接在trie树上查询指定的前缀了</p></blockquote><h3 id="5-3-为什么使用独立文件服务器？"><a href="#5-3-为什么使用独立文件服务器？" class="headerlink" title="5.3 为什么使用独立文件服务器？"></a>5.3 为什么使用独立文件服务器？</h3><ul><li>从服务器本身来说，单台的话会加大机器IO负载,多台(负载均衡)的话涉及到文件同步的问题</li><li>浏览器对一个域名下的并发是有数量限制的，独立域名的文件服务器会加快响应</li><li>防止域名污染，请求图片的时候是不用带上cookie</li></ul><h2 id="6、算法"><a href="#6、算法" class="headerlink" title="6、算法"></a>6、算法</h2><h3 id="6-1-写一个函数，算出两个文件的相对路径"><a href="#6-1-写一个函数，算出两个文件的相对路径" class="headerlink" title="6.1 写一个函数，算出两个文件的相对路径"></a>6.1 写一个函数，算出两个文件的相对路径</h3><pre><code class="php"> function countOppose(){   $arr1 = explode(&#39;/&#39;, $pathA);   $arr2 = explode(&#39;/&#39;, $pathB);   // 获取相同路径的部分   $intersection = array_intersect_assoc($arr1, $arr2);   $depth =count($intersection);   // 将path2的/ 转为 ../，path1获取后面的部分，然后合拼   // 计算前缀   if (count($arr2) - $depth - 1 &gt; 0) {       $prefix = array_fill(0, count($arr2) - $depth - 1, &#39;..&#39;);   } else {       $prefix = array(&#39;.&#39;);   }   $tmp = array_merge($prefix, array_slice($arr1, $depth));   $relativePath = implode(&#39;/&#39;, $tmp);   return $relativePath; }</code></pre><h3 id="6-2-php排序算法汇总"><a href="#6-2-php排序算法汇总" class="headerlink" title="6.2 php排序算法汇总"></a>6.2 <a href="https://mrliuqh.github.io/2018/01/12/php-sort/">php排序算法汇总</a></h3><h3 id="6-3-遍历一个文件夹下的所有文件和子文件夹"><a href="#6-3-遍历一个文件夹下的所有文件和子文件夹" class="headerlink" title="6.3 遍历一个文件夹下的所有文件和子文件夹"></a>6.3 遍历一个文件夹下的所有文件和子文件夹</h3><pre><code class="php">function childForDir($dir){    $files = [];    if (!is_dir($dir)) {        return $dir;    }    $handle = opendir($dir);    if (!$handle) {        return false;    }    //取出.和..    readdir($handle);    readdir($handle);   //遍历剩余的文件和目录    while ($file = readdir($handle)) {        if (is_dir($file)) {            $files[$file] = $this-&gt;childForDir($file);        } else {            $files[] = $dir . &#39;/&#39; . $file;        }    }    closedir($handle);    return $files;}</code></pre><h3 id="6-4-猴子选大王"><a href="#6-4-猴子选大王" class="headerlink" title="6.4 猴子选大王"></a>6.4 猴子选大王</h3><p> 一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停 的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。</p><pre><code class="php">&lt;?phpfunction monkeyKingNum($allNum, $m){  $arr = range(1,$allNum);  $num = 1;  while(count($arr) &gt; 1){      foreach ($arr as $key =&gt; $value) {          if($num == $m){              unset($arr[$key]);              $num = 1;          }else{              $num++;          }      }  }  $monkeyKingNum = array_values($arr)[0];  return $monkeyKingNum;}monkeyKingNum(10,10);</code></pre><h3 id="6-5-二分查找"><a href="#6-5-二分查找" class="headerlink" title="6.5 二分查找"></a>6.5 二分查找</h3><p><code>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好;其缺点是要求待查表为有序表，且插入删除困难。 因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</code></p><pre><code class="php">&lt;?php/** * @param $data //待查找的元素数组 * @param $min //开始元素的下标 * @param $max //结束元素的下标 * @param $k //待查找的元素 * @return bool */function binarySearch($data,$min,$max,$k){    if ($min &lt;= $max){        //计算中间的元素下标        $mid = intval(($min +$max)/2);        if ($data[$mid] == $k){            //如果相等,则找到            return $mid;        } else if ($k &lt; $data[$mid]){            //元素下标在前面一部分            return binarySearch($data, $min, $mid-1, $k);        } else {            //元素下标在后面一部分            return binarySearch($data, $mid+1, $max, $k);        }    }    return false;}</code></pre><h2 id="7、设计模式"><a href="#7、设计模式" class="headerlink" title="7、设计模式"></a>7、设计模式</h2><h3 id="7-1单例模式（三私一公）"><a href="#7-1单例模式（三私一公）" class="headerlink" title="7.1单例模式（三私一公）"></a>7.1单例模式（三私一公）</h3><blockquote><p>单例模式的用途,是对系统资源的节省, 可以避免重复实例化,而PHP每次执行完都会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的, 这样就失去了单例重复实例化的意义了. 单单从这个方面来说, PHP的单例的确有点让各位失望. </p></blockquote><blockquote><p>但是php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时(废话), 如果使用单例模式, 则可以避免大量的new 操作消耗的资源。</p></blockquote><pre><code class="php"> class Test{     //私有化后在类内部保存对象并且防止外部访问到     private static $obj=null;     //私有化后防止在外部创建新的对象     private function __construct() {     }     //公有并且静态方法在类外面可以通过类名直接访问     public static function getInstance(){         if(self::$obj==null)             self::$obj=new self();         return self::$obj;     }     //私有化克隆执行的方法,防止在外部被克隆     private function __clone(){     } }</code></pre><h3 id="7-2工厂模式"><a href="#7-2工厂模式" class="headerlink" title="7.2工厂模式"></a>7.2工厂模式</h3><p>工厂模式具体可分为四类：简单工厂，工厂方法，抽象工厂、静态工厂；</p><blockquote><p>简单工厂模式:静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同,返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。。</p></blockquote><p>示例代码：</p><pre><code class="php">&lt;?php//简单工厂模式class Cat{  function __construct()  {      echo &quot;I am Cat class &lt;br&gt;&quot;;  }}class Dog{  function __construct()  {      echo &quot;I am Dog class &lt;br&gt;&quot;;  }}class Factory{  public static function CreateAnimal($name){      if ($name == &#39;cat&#39;) {          return new Cat();      } elseif ($name == &#39;dog&#39;) {          return new Dog();      }  }}$cat = Factory::CreateAnimal(&#39;cat&#39;);$dog = Factory::CreateAnimal(&#39;dog&#39;);?&gt;</code></pre><blockquote><font color="red">IUser 接口定义用户对象应执行什么操作。IUser 的实现称为 User，UserFactory 工厂类则创建 IUser 对象 </font></blockquote><ul><li><p><a href="https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/FactoryMethod/README.html" target="_blank" rel="noopener">工厂方法，查看详情</a></p></li><li><p><a href="https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/AbstractFactory/README.html" target="_blank" rel="noopener">抽象工厂，查看详情</a></p></li><li><p><a href="https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/StaticFactory/README.html" target="_blank" rel="noopener">静态工厂，查看详情</a></p></li></ul><h3 id="7-3-建造者模式（生成器模式）"><a href="#7-3-建造者模式（生成器模式）" class="headerlink" title="7.3 建造者模式（生成器模式）"></a>7.3 建造者模式（生成器模式）</h3><p>又名：生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p><blockquote><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。例如，一辆汽车由轮子，发动机以及其他零件组成，对于普通人而言，我们使用的只是一辆完整的车，这时，我们需要加入一个构造者，让他帮我们把这些组件按序组装成为一辆完整的车</p></blockquote><ul><li>Builder：抽象构造者类，为创建一个Product对象的各个部件指定抽象接口。</li><li>ConcreteBuilder：具体构造者类，实现Builder的接口以构造和装配该产品的各个部件。定义并明确它所创建的表示。提供一个检索产品的接口</li><li>Director：指挥者，构造一个使用Builder接口的对象。</li><li>Product：表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。</li></ul><p> <strong>示例代码</strong>：</p><pre><code class="php">&lt;?php abstract class Builder{  protected $car;  abstract public function buildPartA();  abstract public function buildPartB();  abstract public function buildPartC();  abstract public function getResult();}class CarBuilder extends Builder{  function __construct()  {      $this-&gt;car = new Car();  }  public function buildPartA(){      $this-&gt;car-&gt;setPartA(&#39;发动机&#39;);  }  public function buildPartB(){      $this-&gt;car-&gt;setPartB(&#39;轮子&#39;);  }  public function buildPartC(){      $this-&gt;car-&gt;setPartC(&#39;其他零件&#39;);  }  public function getResult(){      return $this-&gt;car;  }}class Car{  protected $partA;  protected $partB;  protected $partC;  public function setPartA($str){      $this-&gt;partA = $str;  }  public function setPartB($str){      $this-&gt;partB = $str;  }  public function setPartC($str){      $this-&gt;partC = $str;  }  public function show()  {      echo &quot;这辆车由：&quot;.$this-&gt;partA.&#39;,&#39;.$this-&gt;partB.&#39;,和&#39;.$this-&gt;partC.&#39;组成&#39;;  }}class Director{  public $myBuilder;  public function startBuild()  {      $this-&gt;myBuilder-&gt;buildPartA();      $this-&gt;myBuilder-&gt;buildPartB();      $this-&gt;myBuilder-&gt;buildPartC();      return $this-&gt;myBuilder-&gt;getResult();  }  public function setBuilder(Builder $builder)  {      $this-&gt;myBuilder = $builder;  }}$carBuilder = new CarBuilder();$director = new Director();$director-&gt;setBuilder($carBuilder);$newCar = $director-&gt;startBuild();$newCar-&gt;show();</code></pre><h2 id="8、数据结构"><a href="#8、数据结构" class="headerlink" title="8、数据结构"></a>8、数据结构</h2><h3 id="8-1-堆、栈、队列的区别"><a href="#8-1-堆、栈、队列的区别" class="headerlink" title="8.1 堆、栈、队列的区别"></a>8.1 堆、栈、队列的区别</h3><ul><li>堆<br><strong>堆中主要存放用new构造的对象和数组</strong><br>优势：可以动态的分配内存的大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的。<br>缺点：由于要在运行时动态分配内存，存取速度比较慢</li></ul><ul><li>栈<br><strong>栈中主要存放一些基本类型的变量和对象引用类型。</strong><br>优势：存取速度比较快，仅次于寄存器，栈数据可以共享。<br>缺点：栈中的数据大小和生存周期必须是确定的，缺乏灵活性。</li></ul><ul><li>队列<br><strong>设计程序中常用的一种数据结构，采用”先进先出”的存储结构，类似于队列。</strong><br>数据元素只能从队尾进入，从队首取出。在此队列中，数据元素可以随意增减，<br>但是数据元素的次序不会更改。每次都是取出队首的元素，后面的元素会整体向前移动一位。队列遍历数据的速度要快的多</li></ul><h3 id="8-2-什么是哈希表？"><a href="#8-2-什么是哈希表？" class="headerlink" title="8.2 什么是哈希表？"></a>8.2 什么是哈希表？</h3><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><p>哈希表hashtable(key，value) 的做法其实很简单，就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。<br>     而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位</p><h2 id="附加1、扩展"><a href="#附加1、扩展" class="headerlink" title="附加1、扩展"></a>附加1、扩展</h2><h3 id="1-写代码来解决多进程-线程同时读写一个文件的问题"><a href="#1-写代码来解决多进程-线程同时读写一个文件的问题" class="headerlink" title="1. 写代码来解决多进程/线程同时读写一个文件的问题"></a>1. 写代码来解决多进程/线程同时读写一个文件的问题</h3><pre><code class="php">function write(){    //打开文件    $file = fopen(&#39;flock.text&#39;,&#39;w+&#39;);    if(!$file){      return &#39;the file not exist!&#39;;    }    //获取锁    if (flock(file,LOCK_EX)){       //todo        fwrite(file,&#39;do some things&#39;);       //释放锁       flock(file,LOCK_UN);    } else {      return &#39;the file is write...&#39;;    }    //关闭文件    fclose(file);}</code></pre><h3 id="2-什么是写时复制"><a href="#2-什么是写时复制" class="headerlink" title="2. 什么是写时复制"></a>2. 什么是写时复制</h3><blockquote><p> <strong>写时复制（Copy on Write，也缩写为COW)的应用场景非常多， 比如Linux中对进程复制中内存使用的优化，在各种编程语言中，如C++的STL等等中均有类似的应用。 COW是常用的优化手段，可以归类于：资源延迟分配。只有在真正需要使用资源时才占用资源， 写时复制通常能减少资源的占用。</strong></p></blockquote><p>在开始之前，我们可以先看一段简单的代码：</p><pre><code class="php">&lt;?php   //例一    $foo = 1;    $bar = $foo;    echo $foo + $bar;?&gt;</code></pre><blockquote><p>执行这段代码，会打印出数字2。从内存的角度来分析一下这段代码”可能”是这样执行的： 分配一块内存给foo变量，里面存储一个1； 再分配一块内存给bar变量，也存一个1，最后计算出结果输出。 事实上，我们发现foo和bar变量因为值相同，完全可以使用同一块内存，这样，内存的使用就节省了一个1， 并且，还省去了分配内存和管理内存地址的计算开销。 没错，很多涉及到内存管理的系统，都实现了这种相同值共享内存的策略：写时复制</p></blockquote><p><a href="http://www.php-internals.com/book/?p=chapt06/06-06-copy-on-write" target="_blank" rel="noopener">详情参考</a></p><h3 id="3-echo-int-0-1-0-7-10-输出是多少？为什么"><a href="#3-echo-int-0-1-0-7-10-输出是多少？为什么" class="headerlink" title="3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?"></a>3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?</h3><pre><code>输出的结果为：7 </code></pre><blockquote><p>关于浮点数精度的警告<br> 显然简单的十进制分数如同 0.1 或 0.7 不能在不丢失一点点精度的情况下转换为内部二进制的格式，这就会造成混乱的结果。例如，floor((0.1+0.7)*10) 通常会返回 7 而不是预期中的 8，因为该结果内部的表示其实是类似 7.9。</p></blockquote><blockquote><p>注意：永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等</p></blockquote><h2 id="附加2、面试题链接"><a href="#附加2、面试题链接" class="headerlink" title="附加2、面试题链接"></a>附加2、面试题链接</h2><ul><li><a href="https://github.com/hookover/php-engineer-interview-questions" target="_blank" rel="noopener">https://github.com/hookover/php-engineer-interview-questions</a></li><li><a href="https://www.kancloud.cn/pingfan_/php_interview/916716" target="_blank" rel="noopener">https://www.kancloud.cn/pingfan_/php_interview/916716</a></li><li><a href="https://www.kancloud.cn/i281151/php_questions/174233" target="_blank" rel="noopener">https://www.kancloud.cn/i281151/php_questions/174233</a></li><li><a href="https://www.kancloud.cn/tp5girl/interview/329075" target="_blank" rel="noopener">https://www.kancloud.cn/tp5girl/interview/329075</a></li><li><a href="https://github.com/wudi/PHP-Interview-Best-Practices-in-China" target="_blank" rel="noopener">https://github.com/wudi/PHP-Interview-Best-Practices-in-China</a></li><li><a href="https://my.oschina.net/anyeshe/blog/1550238" target="_blank" rel="noopener">https://my.oschina.net/anyeshe/blog/1550238</a></li><li><a href="https://www.jianshu.com/p/ac5cad6d64a8" target="_blank" rel="noopener">https://www.jianshu.com/p/ac5cad6d64a8</a></li><li><a href="https://www.zhaoyafei.cn/content.html?id=150846575347" target="_blank" rel="noopener">https://www.zhaoyafei.cn/content.html?id=150846575347</a></li><li><a href="https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html</a></li><li><a href="https://segmentfault.com/a/1190000010262869#articleHeader9" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010262869#articleHeader9</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则使用</title>
      <link href="/2017/06/27/%E6%AD%A3%E5%88%99/"/>
      <url>/2017/06/27/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="匹配语法规则"><a href="#匹配语法规则" class="headerlink" title="匹配语法规则"></a>匹配语法规则</h3><ul><li><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><img src="https://mrliuqh.github.io/directionsImg/regular/special.png" alt=""></li><li><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p><img src="https://mrliuqh.github.io/directionsImg/regular/limitStr.png" alt=""></p></li><li><h4 id="匹配组"><a href="#匹配组" class="headerlink" title="匹配组"></a>匹配组</h4><p><img src="https://mrliuqh.github.io/directionsImg/regular/group1.png" alt=""></p></li><li><h4 id="正则表达式中-i-g-ig-gi-m的区别和含义"><a href="#正则表达式中-i-g-ig-gi-m的区别和含义" class="headerlink" title="正则表达式中/i,/g,/ig,/gi,/m的区别和含义"></a>正则表达式中/i,/g,/ig,/gi,/m的区别和含义</h4><pre><code>/i (忽略大小写)/g (全文查找出现的所有匹配字符)/m (多行查找)/gi(全文查找、忽略大小写)/ig(全文查找、忽略大小写)</code></pre></li></ul><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><ul><li><h4 id="匹配两个字符串A与B中间的字符串包含A与B："><a href="#匹配两个字符串A与B中间的字符串包含A与B：" class="headerlink" title="匹配两个字符串A与B中间的字符串包含A与B："></a>匹配两个字符串A与B中间的字符串包含A与B：</h4><pre><code>表达式: A.*?B示例: Abaidu.comB结果: Awww.apizl.comB</code></pre></li><li><h4 id="匹配两个字符串A与B中间的字符串包含A但是不包含B："><a href="#匹配两个字符串A与B中间的字符串包含A但是不包含B：" class="headerlink" title="匹配两个字符串A与B中间的字符串包含A但是不包含B："></a>匹配两个字符串A与B中间的字符串包含A但是不包含B：</h4><pre><code>表达式: A.*?(?=B)示例: Awww.apizl.comB结果: Awww.apizl.com</code></pre></li><li><h4 id="匹配两个字符串A与B中间的字符串且不包含A与B："><a href="#匹配两个字符串A与B中间的字符串且不包含A与B：" class="headerlink" title="匹配两个字符串A与B中间的字符串且不包含A与B："></a>匹配两个字符串A与B中间的字符串且不包含A与B：</h4><pre><code>表达式: (?&lt;=A).*?(?=B)示例: Awww.baidu.comB结果: www.baidu.com</code></pre></li><li><h4 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h4></li></ul><pre><code> 1. 数字：^[0-9]*$ 2. n位的数字：^\d{n}$ 3. 至少n位的数字：^\d{n,}$ 4. m-n位的数字：^\d{m,n}$ 5. 零和非零开头的数字：^(0|[1-9][0-9]*)$ 6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$ 7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$ 8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$ 9. 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$10. 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$12. 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></pre><ul><li><h4 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h4><pre><code>1.汉字：^[\u4e00-\u9fa5]{0,}$2.英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$3.长度为3-20的所有字符：^.{3,20}$4.由26个英文字母组成的字符串：^[A-Za-z]+$5.由26个大写英文字母组成的字符串：^[A-Z]+$6.由26个小写英文字母组成的字符串：^[a-z]+$7.由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8.由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$9.中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$10.中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$11.可以输入含有^%&amp;&#39;,;=?$\&quot;等字符：[^%&amp;&#39;,;=?$\x22]+12.禁止输入含有~的字符：[^~\x22]+</code></pre></li><li><h4 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h4></li></ul><pre><code> 1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ 2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.? 3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$ 4. 手机号码：^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])\d{8}$ (由于工信部放号段不定时，所以建议使用泛解析 ^([1][3,4,5,6,7,8,9])\d{9}$) 5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$  6. 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}  7. 18位身份证号码(数字、字母x结尾)：^((\d{18})|([0-9x]{18})|([0-9X]{18}))$ 8. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 9. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$10. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  11. 日期格式：^\d{4}-\d{1,2}-\d{1,2}12. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$13. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 14. 钱的输入格式：15.    1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ 16.    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 17.    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 18.    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 19.    5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$ 20.    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 21.    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 22.    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ 23.    备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里24. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$25. 中文字符的正则表达式：[\u4e00-\u9fa5]26. 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))27. 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)28. HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)29. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)30. 腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)31. 中国邮政编码：[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)32. IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)33. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))    (由@飞龙三少 提供,感谢共享)</code></pre><ul><li><h4 id="所有的超链接的href和链接文字"><a href="#所有的超链接的href和链接文字" class="headerlink" title="所有的超链接的href和链接文字"></a>所有的超链接的href和链接文字</h4></li></ul><pre><code>&lt;a.+?href=\&quot;(.+?)\&quot;.*&gt;(.+)&lt;/a&gt;单独href ： &lt;a.+?href=\&quot;(.+?)\&quot;.*&gt;单独连接文字：&gt;(.+)&lt;/a&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 正则表达 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git批量上线脚本</title>
      <link href="/2017/05/21/git%E6%89%B9%E9%87%8F%E4%B8%8A%E7%BA%BF%E8%84%9A%E6%9C%AC/"/>
      <url>/2017/05/21/git%E6%89%B9%E9%87%8F%E4%B8%8A%E7%BA%BF%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="online-sh"><a href="#online-sh" class="headerlink" title="online.sh"></a>online.sh</h4><p>上线执行的脚本</p><pre><code>#!/bin/shpssh -h ./demo.list -l root -P &quot;cd /xxx/xxx/demo &amp;&amp; git pull&quot;</code></pre><h4 id="demo-list"><a href="#demo-list" class="headerlink" title="demo.list"></a>demo.list</h4><p>该文件下指的是上线哪些服务器的列表</p><pre><code>root@xxxx.xx.xx.01root@xxxx.xx.xx.02root@xxxx.xx.xx.03root@xxxx.xx.xx.04</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 反向代理</title>
      <link href="/2017/04/17/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2017/04/17/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="关键词匹配"><a href="#关键词匹配" class="headerlink" title="关键词匹配"></a>关键词匹配</h4><pre><code>location ~ ^/TEST/ {    rewrite     /TEST/(.*)$ /$1 break;    proxy_next_upstream http_502 http_504 error timeout invalid_header;    proxy_set_header Host  $host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;       proxy_pass http://ip:port;    expires     3d;}</code></pre><h4 id="域名转发"><a href="#域名转发" class="headerlink" title="域名转发"></a>域名转发</h4><pre><code>server {   listen     80;   server_name 域名;   location / {      proxy_set_header X-Real-IP $remote_addr;      proxy_set_header Host $http_host;      proxy_set_header REMOTE-HOST $remote_addr;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      proxy_pass http://ip:port;   }}</code></pre><h4 id="转发到多台"><a href="#转发到多台" class="headerlink" title="转发到多台"></a>转发到多台</h4><pre><code>upstream baidunode {   server xxx:port weight=10 max_fails=3  fail_timeout=30s;   server xxx:port weight=10 max_fails=3  fail_timeout=30s;}location / {   add_header Cache-Control no-cache;   proxy_set_header   Host local.baidu.com;   proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;   proxy_set_header   X-Real-IP        $remote_addr;   proxy_pass         http://baidunode;   proxy_connect_timeout 30s;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux docker 搭建禅道</title>
      <link href="/2017/01/14/Linux-docker-chandao/"/>
      <url>/2017/01/14/Linux-docker-chandao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、下载地址"><a href="#一、下载地址" class="headerlink" title="一、下载地址"></a>一、下载地址</h3><p><a href="http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip" target="_blank" rel="noopener">禅道开源版(点击下载)</a></p><p><strong>默认配置信息:</strong></p><ul><li>数据库</li></ul><pre><code>用户名：root默认密码： 123456。# 运行时，可以设置 MYSQL_ROOT_PASSWORD变量来更改密码。</code></pre><ul><li>可挂载目录</li></ul><pre><code>/app/zentaopms:该目录为禅道目录，里面包含禅道代码及附件上传目录。/var/lib/mysql:该目录为数据库的数据目录。</code></pre><h3 id="二、安装使用"><a href="#二、安装使用" class="headerlink" title="二、安装使用"></a>二、安装使用</h3><p><span style="color:red">注意：需要关闭下selinux </span><br><a id="more"></a><br>1、构建镜像</p><p>下载安装包，解压缩。 进入docker_zentao目录，执行命令 docker build -t [镜像名称] [Dockerfile所在目录]</p><pre><code class="$xslt">docker build -t zentao ./</code></pre><p>2、运行镜像</p><pre><code class="$xslt">docker run --name [容器名称] -p [主机端口]:80 -v [主机代码目录]:/app/zentaopms -v [主机数据目录]:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=[数据库密码] -d [镜像名]:latest</code></pre><p>例如<br>创建 /data/www /data/data 目录。</p><p>执行命令：</p><pre><code class="$xslt">docker run --name zentao -p 80:80 -v /data/www:/app/zentaopms -v /data/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d zentao:latest运行成功</code></pre><p>3、安装禅道</p><p>浏览器访问 <a href="http://ip，显示禅道安装页面，安装禅道。" target="_blank" rel="noopener">http://ip，显示禅道安装页面，安装禅道。</a></p><p><a href="https://www.zentao.net/download/80098.html" target="_blank" rel="noopener">原文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关的问题</title>
      <link href="/2016/11/23/question-for-git/"/>
      <url>/2016/11/23/question-for-git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q1-解决git-pull-push每次都需要输入密码问题"><a href="#Q1-解决git-pull-push每次都需要输入密码问题" class="headerlink" title="Q1 解决git pull/push每次都需要输入密码问题"></a>Q1 解决git pull/push每次都需要输入密码问题</h1><p>解决办法:</p><ul><li>进入你的项目目录，输入：</li><li><blockquote><p>git config --global credential.helper store</p></blockquote></li></ul><h1 id="Q2-git无法pull仓库refusing-to-merge-unrelated-histories"><a href="#Q2-git无法pull仓库refusing-to-merge-unrelated-histories" class="headerlink" title="Q2 git无法pull仓库refusing to merge unrelated histories"></a>Q2 git无法pull仓库refusing to merge unrelated histories</h1><p>解决方法: </p><pre><code>git pull origin master --allow-unrelated-histories</code></pre><h1 id="Q3-error-cannot-lock-ref-refs-remotes-origin"><a href="#Q3-error-cannot-lock-ref-refs-remotes-origin" class="headerlink" title="Q3  error: cannot lock ref refs/remotes/origin.."></a>Q3  error: cannot lock ref refs/remotes/origin..</h1><p>报错:</p><pre><code>error: cannot lock ref &#39;refs/remotes/origin/分支名&#39;: ref refs/remotes/origin/分支名... is at 19070aed6873f8d58f35e4631272b59f13927a1c but expected 8a5b3bda0778070bd6b92123556475c9484e04b8</code></pre><p>解决方法:</p><pre><code># rm .git/refs/remotes/origin/分支名# git fetch</code></pre><h1 id="Q4-warning-远程-HEAD-指向一个不存在的引用，无法检出"><a href="#Q4-warning-远程-HEAD-指向一个不存在的引用，无法检出" class="headerlink" title="Q4 warning: 远程 HEAD 指向一个不存在的引用，无法检出"></a>Q4 warning: 远程 HEAD 指向一个不存在的引用，无法检出</h1><p>解决方法： </p><pre><code>原因是.git目录下.git/refs/heads不存在HEAD指向的文件，这个时候可以用git show-ref命令查看 获得如下打印： 5fa0b60252ca2c10fa3c2e12780d351c047c802d refs/remotes/origin/branch_qc_origin 5fa0b60252ca2c10fa3c2e12780d351c047c802d refs/tags/XXXXXXXXXXXX 48dee3a5f7b9cac98349e949275c652e02b0b67e refs/tags/PXXXXV0.0.0B01-bringup 505a9bb0c6d815e6db561f7cb7ed0e20cd73ddde refs/tags/PXXXX_02550_201309260427 e2b211a3c9d8dabec9fe1018b4f7db5c953832ea refs/tags/PXXXX_bsp_02550_201309260422 0848e8b7922c78dbb364aa0e7c1b8375d16a70a3 refs/tags/branch_PXXXX_02550_201309190102 7384803be7c8866393b96ebaaa7e1b2b119654e7 refs/tags/branch_PXXXX_02550_201309200102 480f444dd26bb238aeaacf15da748ad861ea9378 refs/tags/branch_PXXXX_02550_201309210102 …… 可以看出，全部是标签tag，并没有类似refs/head/branch_name 继续执行命令： git branch //输入出空 git branch -a //输出 remotes/origin/branch_qc_origin git checkout remotes/origin/branch_qc_origin // ① checkout的是git branch -a输出的内容 这样通过ll命令查看，Contacts代码下载到工作目录了 接着创建分支： git checkout -b remotes/origin/branch_qc_origin // ② 创建分支 git branch //可以看到输出*remotes/origin/branch_qc_origin了，不再为空 git branch -m remotes/origin/branch_qc_origin master // ③ 重命名分支叫master git show-ref命令查看也能看到head了 至此，问题得到解决。</code></pre><h1 id="Q5-gitLab-remote-rejected-master-gt-master-pre-receive-hook-declined"><a href="#Q5-gitLab-remote-rejected-master-gt-master-pre-receive-hook-declined" class="headerlink" title="Q5 gitLab:[remote rejected] master -&gt; master (pre-receive hook declined)"></a>Q5 gitLab:[remote rejected] master -&gt; master (pre-receive hook declined)</h1><p>原因:</p><ol><li>项目中对应的分支，设置成了已保护，无法push</li><li>ssh克隆下的地址有问题，具体什么问题还不清楚，对应的方案使用http</li></ol><p>报错:</p><pre><code>remote: GitLab: You are not allowed to push code to protected branches on this project.To ssh://git.xxx.com:22138/ms-group/mm-test.git ! [remote rejected] master -&gt; master (pre-receive hook declined)error: failed to push some refs to &#39;ssh://git@git.xxx.com:22138/ms-group/mm-test.git&#39;</code></pre><p>解决方法：</p><ul><li><p>第一步:查看gitlab中对应的项目是否设置保护分支;<br><img src="https://mrliuqh.github.io/directionsImg/git/gitlab-pre-receive-hook-declined.png" alt=""><br><img src="https://mrliuqh.github.io/directionsImg/git/gitlab-protected-branch.png" alt=""></p></li><li><p>第二步: 上面确认设置后，依旧报错，改用下面方法<br><img src="https://mrliuqh.github.io/directionsImg/git/gitlab-use-http.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写时复制</title>
      <link href="/2016/10/20/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6/"/>
      <url>/2016/10/20/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h3><blockquote><p> <strong>写时复制（Copy on Write，也缩写为COW)的应用场景非常多， 比如Linux中对进程复制中内存使用的优化，在各种编程语言中，如C++的STL等等中均有类似的应用。 COW是常用的优化手段，可以归类于：资源延迟分配。只有在真正需要使用资源时才占用资源， 写时复制通常能减少资源的占用。</strong></p></blockquote><p>在开始之前，我们可以先看一段简单的代码：</p><pre><code class="php">&lt;?php   //例一    $foo = 1;    $bar = $foo;    echo $foo + $bar;?&gt;</code></pre><blockquote><p>执行这段代码，会打印出数字2。从内存的角度来分析一下这段代码“可能”是这样执行的： 分配一块内存给foo变量，里面存储一个1； 再分配一块内存给bar变量，也存一个1，最后计算出结果输出。 事实上，我们发现foo和bar变量因为值相同，完全可以使用同一块内存，这样，内存的使用就节省了一个1， 并且，还省去了分配内存和管理内存地址的计算开销。 没错，很多涉及到内存管理的系统，都实现了这种相同值共享内存的策略：写时复制</p></blockquote><p><a href="http://www.php-internals.com/book/?p=chapt06/06-06-copy-on-write" target="_blank" rel="noopener">详情参考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TPS/QPS/PV/UV</title>
      <link href="/2016/08/16/%E8%A1%8C%E4%B8%9A%E6%9C%AF%E8%AF%AD/"/>
      <url>/2016/08/16/%E8%A1%8C%E4%B8%9A%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h3><blockquote><p>Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）</p></blockquote><p>TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</p><h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><blockquote><p>每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。</p></blockquote><p><code>对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。</code></p><h3 id="PV-page-view-页面浏览量或点击量"><a href="#PV-page-view-页面浏览量或点击量" class="headerlink" title="PV (page view) - 页面浏览量或点击量"></a>PV (page view) - 页面浏览量或点击量</h3><blockquote><p>页面浏览量或点击量，是衡量一个网站或网页用户访问量。具体的说，PV值就是所有访问者在24小时（0点到24点）内看了某个<br>网站多少个页面或某个网页多少次。PV是指页面刷新的次数，每一次页面刷新，就算做一次PV流量</p></blockquote><h3 id="UV-unique-visitor-独立访客数"><a href="#UV-unique-visitor-独立访客数" class="headerlink" title="UV (unique visitor)- 独立访客数"></a>UV (unique visitor)- 独立访客数</h3><blockquote><p>指访问某个站点或点击某个网页的不同IP地址的人数。在同一天内，UV只记录第一次进入网站的具有独立IP<br>的访问者，在同一天内再次访问该网站则不计数。UV提供了一定时间内不同观众数量的统计指标，而没有反应出网站的全面活动</p></blockquote><p><a href="https://www.jianshu.com/p/2fff42a9dfcf" target="_blank" rel="noopener">什么是QPS，TPS，吞吐量</a></p>]]></content>
      
      
      <categories>
          
          <category> 行业术语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他术语</title>
      <link href="/2016/08/15/%E5%85%B6%E4%BB%96%E6%9C%AF%E8%AF%AD/"/>
      <url>/2016/08/15/%E5%85%B6%E4%BB%96%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="盗链"><a href="#盗链" class="headerlink" title="盗链"></a>盗链</h3><p>盗链是指服务提供商自己不提供服务的内容，通过技术手段绕过其它有利益的最终用户界面(如广告)，直接在自己的网站上向最终用户提供其它服务提供商的服务内容，骗取最终用户的浏览和点击率。受益者不提供资源或提供很少的资源，而真正的服务提供商却得不到任何的收益。</p><h3 id="内存溢出-out-of-memory"><a href="#内存溢出-out-of-memory" class="headerlink" title="内存溢出(out of memory)"></a>内存溢出(out of memory)</h3><p>指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。</p><h3 id="内存泄露-memory-leak"><a href="#内存泄露-memory-leak" class="headerlink" title="内存泄露(memory leak)"></a>内存泄露(memory leak)</h3><p>指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p><blockquote><p>内存泄露会最终会导致内存溢出</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 行业术语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ安装方法总结</title>
      <link href="/2016/08/03/rabbit-mq-install/"/>
      <url>/2016/08/03/rabbit-mq-install/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>具体安装如下：</p><h3 id="一：安装Erlang："><a href="#一：安装Erlang：" class="headerlink" title="一：安装Erlang："></a>一：安装Erlang：</h3><pre><code class="$xslt"> # rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc   # cd /etc/yum.repos.d/  # wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo   # yum install esl-erlang  </code></pre><a id="more"></a><h3 id="二：安装esl-erlang-compat："><a href="#二：安装esl-erlang-compat：" class="headerlink" title="二：安装esl-erlang-compat："></a>二：安装esl-erlang-compat：</h3><pre><code class="$xslt"># cd /tmp/  # wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm   # yum install esl-erlang-compat-R14B-1.el6.noarch.rpm </code></pre><h3 id="三：安装RabbitMQ"><a href="#三：安装RabbitMQ" class="headerlink" title="三：安装RabbitMQ"></a>三：安装RabbitMQ</h3><pre><code class="$xslt"> # cd /tmp  #  wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm  # yum install rabbitmq-server-3.6.2-1.noarch.rpm </code></pre><p>到此，RabbitMQ基本安装完成了。</p><h3 id="四：RabbitMQ页面监控系统"><a href="#四：RabbitMQ页面监控系统" class="headerlink" title="四：RabbitMQ页面监控系统"></a>四：RabbitMQ页面监控系统</h3><p>RabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。<br>在Documentation下的Server下的Management是关于配置这个插件的。地址：<a href="http://www.rabbitmq.com/management.html" target="_blank" rel="noopener">http://www.rabbitmq.com/management.html</a><br>这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。</p><p>命令： </p><pre><code class="$xslt"># rabbitmq-plugins enable rabbitmq_management</code></pre><h3 id="五：配置登陆用户"><a href="#五：配置登陆用户" class="headerlink" title="五：配置登陆用户"></a>五：配置登陆用户</h3><pre><code class="$xslt"># rabbitmqctl  add_user leyue leyue100# rabbitmqctl  set_user_tags leyue administrator# rabbitmqctl  set_permissions -p / leyue &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></pre><p>浏览器地址栏输入：<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>  用户名登陆</p><p>RabbitMQ服务启动、关闭、重启</p><pre><code class="$xslt"># service rabbitmq-server start  //开启# service rabbitmq-server stop   //关闭#service rabbitmq-server restart //重启</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http头部属性</title>
      <link href="/2016/07/23/http%E5%A4%B4%E9%83%A8%E5%B1%9E%E6%80%A7/"/>
      <url>/2016/07/23/http%E5%A4%B4%E9%83%A8%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>Accept 指定客户端能够接收的内容类型 Accept: text/plain, text/htmlAccept-Charset 浏览器可以接受的字符编码集。 Accept-Charset: iso-8859-5Accept-Encoding 指定浏览器可以支持的web服务器返回内容压缩编码类型。 Accept-Encoding: compress, gzipAccept-Language 浏览器可接受的语言 Accept-Language: en,zhAccept-Ranges 可以请求网页实体的一个或者多个子范围字段 Accept-Ranges: bytesAuthorization HTTP授权的授权证书 Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==Cache-Control 指定请求和响应遵循的缓存机制 Cache-Control: no-cacheConnection 表示是否需要持久连接。（HTTP 1.1默认进行持久连接） Connection: closeCookie HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。 Cookie: $Version=1; Skin=new;Content-Length 请求的内容长度 Content-Length: 348Content-Type 请求的与实体对应的MIME信息 Content-Type: application/x-www-form-urlencodedDate 请求发送的日期和时间 Date: Tue, 15 Nov 2010 08:12:31 GMTExpect 请求的特定的服务器行为 Expect: 100-continueFrom 发出请求的用户的Email From: user@email.comHost 指定请求的服务器的域名和端口号 Host: www.zcmhi.comIf-Match 只有请求内容与实体相匹配才有效 If-Match: “737060cd8c284d8af7ad3082f209582d”If-Modified-Since 如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码 If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMTIf-None-Match 如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变 If-None-Match: “737060cd8c284d8af7ad3082f209582d”If-Range 如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag If-Range: “737060cd8c284d8af7ad3082f209582d”If-Unmodified-Since 只在实体在指定时间之后未被修改才请求成功 If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMTMax-Forwards 限制信息通过代理和网关传送的时间 Max-Forwards: 10Pragma 用来包含实现特定的指令 Pragma: no-cacheProxy-Authorization 连接到代理的授权证书 Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==Range 只请求实体的一部分，指定范围 Range: bytes=500-999Referer 先前网页的地址，当前请求网页紧随其后,即来路 Referer: http://www.zcmhi.com/archives...TE 客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息 TE: trailers,deflate;q=0.5Upgrade 向服务器指定某种传输协议以便服务器进行转换（如果支持） Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11User-Agent User-Agent的内容包含发出请求的用户信息 User-Agent: Mozilla/5.0 (Linux; X11)Via 通知中间网关或代理服务器地址，通信协议 Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)Warning 关于消息实体的警告信息 Warn: 199 Miscellaneous warning</code></pre>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http状态码</title>
      <link href="/2016/07/14/http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2016/07/14/http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="2开头-（请求成功）表示成功处理了请求的状态代码。"><a href="#2开头-（请求成功）表示成功处理了请求的状态代码。" class="headerlink" title="2开头 （请求成功）表示成功处理了请求的状态代码。"></a>2开头 （请求成功）表示成功处理了请求的状态代码。</h4><pre><code>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 201   （已创建）  请求成功并且服务器创建了新的资源。 202   （已接受）  服务器已接受请求，但尚未处理。 203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。 204   （无内容）  服务器成功处理了请求，但没有返回任何内容。 205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。206   （部分内容）  服务器成功处理了部分 GET 请求。</code></pre><h4 id="3开头-（请求被重定向）表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向。"><a href="#3开头-（请求被重定向）表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向。" class="headerlink" title="3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。"></a>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</h4><pre><code>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</code></pre><h4 id="4开头-（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。"><a href="#4开头-（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。" class="headerlink" title="4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。"></a>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</h4><pre><code>400   （错误请求） 服务器不理解请求的语法。 401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 403   （禁止） 服务器拒绝请求。404   （未找到） 服务器找不到请求的网页。405   （方法禁用） 禁用请求中指定的方法。 406   （不接受） 无法使用请求的内容特性响应请求的网页。 407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。408   （请求超时）  服务器等候请求时发生超时。 409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。 411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。 412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。 413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。 415   （不支持的媒体类型） 请求的格式不受请求页面的支持。 416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。 417   （未满足期望值） 服务器未满足&quot;期望&quot;请求标头字段的要求。</code></pre><h4 id="5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误，而不是请求出错。"><a href="#5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误，而不是请求出错。" class="headerlink" title="5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。"></a>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</h4><pre><code>500   （服务器内部错误）  服务器遇到错误，无法完成请求。 501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Linux搭建nfs文件共享</title>
      <link href="/2016/04/19/nfs-file-sharing/"/>
      <url>/2016/04/19/nfs-file-sharing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-测试节点"><a href="#1-测试节点" class="headerlink" title="1.测试节点"></a>1.测试节点</h3><pre><code>NFS服务器主机名：server.unixmen.local NFS服务器IP地址：192.168.1.101/24NFS客户端主机名：client.unixmen.local NFS客户端IP地址：192.168.1.102/24</code></pre><h3 id="2-服务器端配置"><a href="#2-服务器端配置" class="headerlink" title="2.服务器端配置"></a>2.服务器端配置</h3><h4 id="2-1-安装NFS软件包"><a href="#2-1-安装NFS软件包" class="headerlink" title="2.1 安装NFS软件包"></a>2.1 安装NFS软件包</h4><pre><code>//使用以下命令在Server系统中安装NFS软件包：# yum install nfs-utils nfs-utils-lib# systemctl enable rpcbind # systemctl enable nfs-server # systemctl enable nfs-lock # ystemctl enable nfs-idmap# systemctl start rpcbind # systemctl start nfs-server # systemctl start nfs-lock # systemctl start nfs-idmap</code></pre><h4 id="2-2-创建共享目录"><a href="#2-2-创建共享目录" class="headerlink" title="2.2 创建共享目录"></a>2.2 创建共享目录</h4><p><code>现在，让我们在服务器中创建一些共享目录。</code></p><p>在服务器中创建名为/var/unixmen_share的共享目录，让客户端用户读取和写入该目录中的文件。</p><pre><code># mkdir /var/unixmen_share # chmod 777 /var/unixmen_share</code></pre><h4 id="2-3-导出共享目录"><a href="#2-3-导出共享目录" class="headerlink" title="2.3 导出共享目录"></a>2.3 导出共享目录</h4><p><code>在NFS服务器上导出共享目录：编辑文件/etc/exports，</code><br>添加以下行：</p><pre><code># /var/unixmen_share/  192.168.1.0/24(rw,sync,no_root_squash,no_all_squash）&lt;1&gt; /var/unixmen_share - 共享目录&lt;2&gt; 192.168.1.0/24 - 客户端的IP地址范围&lt;3&gt; rw  - 共享文件夹同步的可写权限&lt;4&gt; sync - 同步共享目录&lt;5&gt; no_root_squash - 启用root权限&lt;6&gt; no_all_squash - 启用用户权限</code></pre><h4 id="2-4-重启NFS服务："><a href="#2-4-重启NFS服务：" class="headerlink" title="2.4 重启NFS服务："></a>2.4 重启NFS服务：</h4><pre><code># systemctl restart nfs-server</code></pre><hr><h3 id="3-客户端"><a href="#3-客户端" class="headerlink" title="3.客户端"></a>3.客户端</h3><h4 id="3-1-安装NFS软件包"><a href="#3-1-安装NFS软件包" class="headerlink" title="3.1 安装NFS软件包"></a>3.1 安装NFS软件包</h4><p>使用以下命令在客户端系统中安装NFS软件包：</p><pre><code># yum install nfs-utils nfs-utils-lib</code></pre><h4 id="3-2-启用并启动NFS服务"><a href="#3-2-启用并启动NFS服务" class="headerlink" title="3.2 启用并启动NFS服务"></a>3.2 启用并启动NFS服务</h4><pre><code># systemctl enable rpcbind # systemctl enable nfs-server # systemctl enable nfs-lock # systemctl enable nfs-idmap# systemctl start rpcbind # systemctl start nfs-server # systemctl start nfs-lock # systemctl start nfs-idmap</code></pre><p>###4.在客户端上挂载NFS共享<br><code>创建一个挂载点以挂载我们之前在服务器中创建的共享文件夹&#39;/var/unixmen_share&#39;</code>。</p><pre><code># mkdir /var/nfs_share</code></pre><p>####4.1 共享服务​​器目录<br><code>将共享从服务​​器挂载到客户端，如下所示</code></p><pre><code>// 挂载# mount -t nfs 192.168.1.101：/var/unixmen_share  /var/nfs_share //强制卸载umount -lf /var/nfs_share</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发现cron不生成日志文件或不按时执行怎么办?</title>
      <link href="/2015/10/03/crontab-run-error-time/"/>
      <url>/2015/10/03/crontab-run-error-time/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-在-var-log-没有cron日志文件"><a href="#1-在-var-log-没有cron日志文件" class="headerlink" title="1.在/var/log/ 没有cron日志文件"></a>1.在/var/log/ 没有cron日志文件</h1><p><strong>处理方法:</strong></p><pre><code class="$xslt"># yum install rsyslog </code></pre><h1 id="2-没有按时执行"><a href="#2-没有按时执行" class="headerlink" title="2.没有按时执行"></a>2.没有按时执行</h1><p><strong>处理方法:</strong></p><ul><li><p>修改时区</p><pre><code class="$xslt">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre></li><li><p>重启服务</p><pre><code class="$xslt"># service crond restart# service rsyslog restart</code></pre></li></ul><h1 id="3-在线生成定时任务"><a href="#3-在线生成定时任务" class="headerlink" title="3.在线生成定时任务"></a>3.在线生成定时任务</h1><p><a href="https://crontab-generator.org/" target="_blank" rel="noopener">点击,去生成</a></p><p><img src="https://mrliuqh.github.io/directionsImg/other/crontab-make.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 入坑历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crond </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Centos7中使用防火墙</title>
      <link href="/2015/08/17/close-firewalld/"/>
      <url>/2015/08/17/close-firewalld/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-查看火墙"><a href="#1-查看火墙" class="headerlink" title="1.查看火墙"></a>1.查看火墙</h1><h2 id="1-1-使用-firewall-cmd"><a href="#1-1-使用-firewall-cmd" class="headerlink" title="1.1 使用:firewall-cmd"></a>1.1 使用:firewall-cmd</h2><pre><code>firewall-cmd --state</code></pre><h2 id="1-2-使用-systemctl"><a href="#1-2-使用-systemctl" class="headerlink" title="1.2 使用:systemctl"></a>1.2 使用:systemctl</h2><pre><code>[root@vpn01 ~]# systemctl status firewalld.service● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)   Active: inactive (dead)     Docs: man:firewalld(1)</code></pre><h1 id="2-关闭火墙"><a href="#2-关闭火墙" class="headerlink" title="2.关闭火墙"></a>2.关闭火墙</h1><h2 id="2-1-第一步-关闭firewalld"><a href="#2-1-第一步-关闭firewalld" class="headerlink" title="2.1 第一步:关闭firewalld"></a>2.1 第一步:关闭firewalld</h2><pre><code>systemctl stop firewalld.service</code></pre><h2 id="2-2-第二步-禁止firewalld开机启动"><a href="#2-2-第二步-禁止firewalld开机启动" class="headerlink" title="2.2 第二步:禁止firewalld开机启动"></a>2.2 第二步:禁止firewalld开机启动</h2><pre><code>systemctl disable firewalld.service </code></pre><h2 id="2-3-第三步-禁用selinux"><a href="#2-3-第三步-禁用selinux" class="headerlink" title="2.3 第三步:禁用selinux"></a>2.3 第三步:禁用selinux</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux" target="_blank" rel="noopener">什么是SELinux?</a></p><p>1.临时禁用</p><pre><code>[root@vpn02 ~]# setenforce 0</code></pre><p>2.永久关闭:修改/etc/selinux/config文件中设置SELINUX=disabled </p><pre><code>[root@vpn02 ~]# cat /etc/selinux/config# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX=disabled # 此处设置# SELINUXTYPE= can take one of three values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected.#     mls - Multi Level Security protection.SELINUXTYPE=targeted</code></pre><p>3.查看selinux状态</p><pre><code>[root@vpn02 ~]# sestatusSELinux status:                 disabled</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令-ls</title>
      <link href="/2015/08/13/ls%E4%BD%BF%E7%94%A8/"/>
      <url>/2015/08/13/ls%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-使用语法"><a href="#1-使用语法" class="headerlink" title="1.使用语法"></a>1.使用语法</h1><pre><code>ls（选项）（参数）</code></pre><h1 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2.参数说明"></a>2.参数说明</h1><pre><code>-a 列出目录下的所有文件，包括以 . 开头的隐含文件。-A 显示除 “.”和“..”外的所有文件-b 把文件名中不可输出的字符用反斜杠加字符编号的形式列出。-B 不输出以 “~”结尾的备份文件。-c 输出文件的 i 节点的修改时间，并以此排序。-C 按列输出，纵向排序。-d 将目录象文件一样显示，而不是显示其下的文件。-e 该ls命令选项可以输出时间的全部信息，而不是输出简略信息。-f -U 该ls命令选项可以对输出的文件不排序。-i 该ls命令选项可以输出文件的 i 节点的索引信息。-k 该ls命令选项可以以 k 字节的形式表示文件的大小。-l 该ls命令选项可以列出文件的详细信息。-m 该ls命令选项可以横向输出文件名，并以“，”作分格符。-n 该ls命令选项可以用数字的GUID代替名称。-o 该ls命令选项可以显示文件的除组信息外的详细信息。-p -F 该ls命令选项可以在每个文件名后附上一个字符以说明该文件的类型，“*”表示可执行的普通文件；“/”表示目录；“@”表示符号链接；“|”表示FIFOs；“=”表示套接字(sockets)。-q 该ls命令选项可以用?代替不可输出的字符。-r 该ls命令选项可以对目录反向排序。-s 该ls命令选项可以在每个文件名后输出该文件的大小。-t 该ls命令选项可以以时间排序。-u 该ls命令选项可以以文件上次被访问的时间排序。-x 该ls命令选项可以按列输出，横向排序。-G 该ls命令选项可以输出文件的组的信息。-L 该ls命令选项可以列出链接文件名而不是链接到的文件。-N 该ls命令选项将不限制文件长度。-Q 该ls命令选项可以把输出的文件名用双引号括起来。-R 该ls命令选项可以列出所有子目录下的文件。-S 该ls命令选项可以以文件大小排序。-X 该ls命令选项可以以文件的扩展名(最后一个 . 后的字符)排序。-1 该ls命令选项可以一行只输出一个文件。</code></pre><h1 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3.使用示例"></a>3.使用示例</h1><h2 id="3-1-排序"><a href="#3-1-排序" class="headerlink" title="3.1 排序"></a>3.1 排序</h2><ul><li>按照大小排序显示文件</li></ul><pre><code>➜  ls -Slhtotal 4040-rw-r--r--  1 liuqh  staff   596K  6  1 11:04 inviteheader.png-rw-r--r--  1 liuqh  staff   458K  6  1 11:04 rice_center.png-rw-r--r--  1 liuqh  staff   103K  5 21 21:53 pk-share.png-rw-rw-rw-@ 1 liuqh  staff    97K  6  2 05:41 background_morning.png-rw-rw-rw-@ 1 liuqh  staff    92K  6  2 05:41 background_night.png-rw-r--r--  1 liuqh  staff    91K  6  2 14:23 find_invite.png-rw-r--r--  1 liuqh  staff    85K  6  1 11:04 pk.png-rw-r--r--  1 liuqh  staff    83K  6  1 11:04 exchange.png-rwxr-xr-x  1 liuqh  staff    72K  6  1 11:04 runner.png-rw-r--r--  1 liuqh  staff    67K  6  2 12:13 bottomBG.png-rw-r--r--  1 liuqh  staff    44K  6  1 11:04 fuceng.png-rw-r--r--  1 liuqh  staff    41K  4 23 19:49 title@2x.png-rw-r--r--@ 1 liuqh  staff    38K  6  3 17:18 win-jifen.png-rw-r--r--@ 1 liuqh  staff    37K  6  3 17:18 win-rice.png-rwxr-xr-x  1 liuqh  staff    13K  4  9 11:00 Badge@2x.png-rwxr-xr-x  1 liuqh  staff   8.0K  4  9 11:00 bg@2x.png...</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令-scp</title>
      <link href="/2015/07/26/scp%E4%BD%BF%E7%94%A8/"/>
      <url>/2015/07/26/scp%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>scp是用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。</p><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><h2 id="2-1-命令格式"><a href="#2-1-命令格式" class="headerlink" title="2.1 命令格式"></a>2.1 命令格式</h2><pre><code>scp [参数] [原路径] [目标路径]</code></pre><h2 id="2-2-参数说明"><a href="#2-2-参数说明" class="headerlink" title="2.2 参数说明"></a>2.2 参数说明</h2><pre><code>-1  强制scp命令使用协议ssh1  -2  强制scp命令使用协议ssh2  -4  强制scp命令只使用IPv4寻址  -6  强制scp命令只使用IPv6寻址  -B  使用批处理模式（传输过程中不询问传输口令或短语）  -C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  -p 保留原文件的修改时间，访问时间和访问权限。  -q  不显示传输进度条。  -r  递归复制整个目录。  -v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   -c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   -F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  -i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    -l limit  限定用户所能使用的带宽，以Kbit/s为单位。     -o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   -P port  注意是大写的P, port是指定数据传输用到的端口号   -S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</code></pre><h1 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h1><h2 id="3-1-下载目录"><a href="#3-1-下载目录" class="headerlink" title="3.1 下载目录"></a>3.1 下载目录</h2><pre><code>scp -r username@servername:remote_dir/ /tmp/local_dir # 例如把服务器上/home/kimi/test，下载到本地scp -r codinglog@192.168.0.101 /home/kimi/test  /tmp/local_dir</code></pre><h2 id="3-2-上传目录"><a href="#3-2-上传目录" class="headerlink" title="3.2  上传目录"></a>3.2  上传目录</h2><pre><code>scp  -r /tmp/local_dir username@servername:remote_dir# 例如把当前目录下的test目录上传到服务器scp -r test codinglog@192.168.0.101:/var/www/   </code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令-curl</title>
      <link href="/2015/07/12/command-curl/"/>
      <url>/2015/07/12/command-curl/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-表单提交"><a href="#1-表单提交" class="headerlink" title="1. 表单提交"></a>1. 表单提交</h1><h2 id="1-1-GET数据提交"><a href="#1-1-GET数据提交" class="headerlink" title="1.1 GET数据提交"></a>1.1 GET数据提交</h2><pre><code>$ curl https://cn.bing.com/search?q=go</code></pre><h2 id="1-2-POST数据提交"><a href="#1-2-POST数据提交" class="headerlink" title="1.2 POST数据提交"></a>1.2 POST数据提交</h2><ul><li>不设置header提交</li></ul><pre><code>curl -d &quot;user=admin&amp;passwd=12345678&quot; http://127.0.0.1:8080/login</code></pre><ul><li>设置header提交</li></ul><pre><code>curl -H &quot;Content-Type:application/json&quot; -X POST -d &#39;{&quot;user&quot;: &quot;admin&quot;, &quot;passwd&quot;:&quot;12345678&quot;}&#39; http://127.0.0.1:8000/login</code></pre><h1 id="2-使用代理请求"><a href="#2-使用代理请求" class="headerlink" title="2.使用代理请求"></a>2.使用代理请求</h1><blockquote><p><em>linux curl命令可以使用下面参数设置http(s)代理、socks代理，已经设置它们的用户名、密码以及认证方式</em></p></blockquote><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td> -x host:port<br> -x [protocol://[user:pwd@]host[:port]<br>–proxy [protocol://[user:pwd@]host[:port]<br></td><td>使用HTTP代理访问；如果未指定端口，默认使用8080端口;<br>protocol默认为http_proxy，其他可能的值包括：<br>http_proxy、HTTPS_PROXY、socks4、socks4a、socks5；<br>如：<br>–proxy 8.8.8.8:8080；<br>-x “http_proxy://aiezu:<a href="mailto:123@aiezu.com" target="_blank" rel="noopener">123@aiezu.com</a>:80”</td></tr><tr><td>–socks4 &lt;host[:port]&gt;<br>–socks4a &lt;host[:port]&gt;<br>–socks5 &lt;host[:port]&gt;<br></td><td>使用SOCKS4代理；<br>使用SOCKS4A代理；<br>使用SOCKS5代理；<br>此参数会覆盖“-x”参数；<br></td></tr><tr><td>–proxy-anyauth<br>–proxy-basic<br>–proxy-diges<br>–proxy-negotiate<br>–proxy-ntlm<br></td><td>代理认证方式，参考：<br> –anyauth <br> –basic <br> –diges <br> –negotiate <br> –ntlm <br></td></tr><tr><td>-U <a href="user:password" target="_blank" rel="noopener">user:password</a> <br>–proxy-user <a href="user:password" target="_blank" rel="noopener">user:password</a></td><td>设置代理的用户名和密码；</td></tr></tbody></table><h2 id="2-1-http-https代理"><a href="#2-1-http-https代理" class="headerlink" title="2.1 http/https代理"></a>2.1 http/https代理</h2><h3 id="1-指定http代理IP和端口"><a href="#1-指定http代理IP和端口" class="headerlink" title="1. 指定http代理IP和端口"></a>1. 指定http代理IP和端口</h3><pre><code># 指定http代理IP和端口curl -x 113.185.19.192:80 http://aiezu.com/test.phpcurl --proxy 113.185.19.192:80 http://aiezu.com/test.php</code></pre><h3 id="2-指定为http代理"><a href="#2-指定为http代理" class="headerlink" title="2.指定为http代理"></a>2.指定为http代理</h3><pre><code>#指定为http代理curl -x http_proxy://113.185.19.192:80 http://aiezu.com/test.php</code></pre><h3 id="3-指定为https代理"><a href="#3-指定为https代理" class="headerlink" title="3.指定为https代理"></a>3.指定为https代理</h3><pre><code>curl -x HTTPS_PROXY://113.185.19.192:80 http://aiezu.com/test.php</code></pre><h3 id="4-指定代理用户名和密码，basic认证方式"><a href="#4-指定代理用户名和密码，basic认证方式" class="headerlink" title="4.指定代理用户名和密码，basic认证方式"></a>4.指定代理用户名和密码，basic认证方式</h3><pre><code>curl -x aiezu:123456@113.185.19.192:80 http://aiezu.com/test.phpcurl -x 113.185.19.192:80 -U aiezu:123456 http://aiezu.com/test.phpcurl -x 113.185.19.192:80 --proxy-user aiezu:123456 http://aiezu.com/test.php</code></pre><h3 id="5-指定代理用户名和密码，ntlm认证方式"><a href="#5-指定代理用户名和密码，ntlm认证方式" class="headerlink" title="5.指定代理用户名和密码，ntlm认证方式"></a>5.指定代理用户名和密码，ntlm认证方式</h3><pre><code>#指定代理用户名和密码，ntlm认证方式curl -x 113.185.19.192:80 -U aiezu:123456 --proxy-ntlm http://aiezu.com/test.php</code></pre><h3 id="6-指定代理协议、用户名和密码，basic认证方式"><a href="#6-指定代理协议、用户名和密码，basic认证方式" class="headerlink" title="6.指定代理协议、用户名和密码，basic认证方式"></a>6.指定代理协议、用户名和密码，basic认证方式</h3><pre><code>curl -x http_proxy://aiezu:123456@113.185.19.192:80 http://aiezu.com/test.php</code></pre><h2 id="2-2-socks代理："><a href="#2-2-socks代理：" class="headerlink" title="2.2.socks代理："></a>2.2.socks代理：</h2><h3 id="1-使用socks4代理，无需认证方式"><a href="#1-使用socks4代理，无需认证方式" class="headerlink" title="1. 使用socks4代理，无需认证方式"></a>1. 使用socks4代理，无需认证方式</h3><pre><code>curl --socks4 122.192.32.76:7280 http://aiezu.com/test.phpcurl -x socks4://122.192.32.76:7280 http://aiezu.com/test.php</code></pre><h3 id="2-使用socks4代理，无需认证方式"><a href="#2-使用socks4代理，无需认证方式" class="headerlink" title="2.使用socks4代理，无需认证方式"></a>2.使用socks4代理，无需认证方式</h3><pre><code>curl --socks4a 122.192.32.76:7280 http://aiezu.com/test.phpcurl -x socks4a://122.192.32.76:7280 http://aiezu.com/test.php</code></pre><h3 id="3-使用socks5代理，basic认证方式"><a href="#3-使用socks5代理，basic认证方式" class="headerlink" title="3.使用socks5代理，basic认证方式"></a>3.使用socks5代理，basic认证方式</h3><pre><code>curl --socks5 122.192.32.76:7280 -U aiezu:123456 http://aiezu.com/test.phpcurl -x socks5://aiezu:123456@122.192.32.76:7280 http://aiezu.com/test.php</code></pre><h3 id="4-使用socks5代理，basic认证方式，ntlm认证方式"><a href="#4-使用socks5代理，basic认证方式，ntlm认证方式" class="headerlink" title="4.使用socks5代理，basic认证方式，ntlm认证方式"></a>4.使用socks5代理，basic认证方式，ntlm认证方式</h3><pre><code>curl -x socks5://aiezu:123456@122.192.32.76:7280 --proxy-ntlm http://aiezu.com/test.php</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 正则去掉字符串中非汉字字符串</title>
      <link href="/2015/03/09/php-preg_match_all/"/>
      <url>/2015/03/09/php-preg_match_all/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>直接上代码示例：</p><pre><code class="$xslt">$str=&#39;2016，北京欢迎您 from around you..&#39;;preg_match_all(&#39;/[\x{4e00}-\x{9fff}]+/u&#39;, $str, $matches);$str = join(&#39;&#39;, $matches[0]);</code></pre><p>输出</p><pre><code class="$xslt">北京欢迎您</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
