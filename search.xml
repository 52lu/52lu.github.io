<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用XHProf查找PHP性能瓶颈]]></title>
    <url>%2F2018%2F08%2F07%2Fphp-xhprof%2F</url>
    <content type="text"><![CDATA[XHProf是facebook 开发的一个测试php性能的扩展，本文记录了在PHP应用中使用XHProf对PHP进行性能优化，查找性能瓶颈的方法。 看完很多博客，整理了一下，以及自己踩得坑。 1.安装Xhprof扩展1234567$ wget http://pecl.php.net/get/xhprof-0.9.4.tgz$ tar -zxvf xhprof-0.9.4.tgz $ cd xhprof-0.9.4$ cd extension/$ phpize$ ./configure$ make$ sudo make install 2.修改php.ini12345[xhprof]extension=xhprof.soxhprof.output_dir=/tmp 配置中xhprof.output_dir指定了生成的profile文件存储的位置，我将其指定为/tmp。** 3.对PHP进行性能分析在XHProf扩展中，一共提供了四个函数用于对PHP进行性能分析。 xhprof_enable/xhprof_sample_enable 函数用于开始XHProf性能分析，区别在于前者功能更加强大，而后者则是是以简单模式启动性能分析（简单记录了函数的调用栈信息），开销比较小。 xhprof_disable/xhprof_sample_disable函数用于停止性能分析，并返回分析的数据。 需要特别说明的函数是xhprof_enable，其他函数都是不需要提供参数的，而该函数则可以接受两个可选的参数，用于改变该工具的行为。 1void xhprof_enable ([ int $flags = 0 [, array $options ]] ) flags 该参数用于为剖析结果添加额外的信息，该参数的值使用以下宏，如果需要提供多个值，使用|进行分隔。 XHPROFFLAGSNO_BUILTINS 跳过所有的内置函数 XHPROFFLAGSCPU 添加对CPU使用的分析 XHPROFFLAGSMEMORY 添加对内存使用的分析 options 数组形式提供可选参数，在此处提供ignored_functions选项需要忽略的函数 比如下面的例子，同时对内存和CPU进行分析，并且忽略对call_user_func和call_user_func_array函数的分析。123456789xhprof_enable( XHPROF_FLAGS_MEMORY|XHPROF_FLAGS_CPU, [ &apos;ignored_functions&apos; =&gt; [&apos;call_user_func&apos;,&apos;call_user_func_array&apos;] ]);- 这里是PHP代码，比如业务逻辑实现等要被分析的代码部分....$xhprofData = xhprof_disable();- $xhprofData是数组形式的分析结果print_r($xhprofData); 注意，如果使用XHPROF_FLAGS_CPU选项对CPU占用也进行分析，在Linux环境下，会造成比较高的系统负载，因此不建议使用，而推荐只使用XHPROF_FLAGS_MEMORY，对内存的分析不会对系统造成太多负载。 4.形象化的查看分析结果使用xhprof_disable完成性能分析并且获取到分析结果之后，我们通常不会直接输出结果，因为这样的结果是以数组形式组织的，看起来并不直观，幸运的是，xhprof提供了基于web的图形界面对分析结果进行查看。 数组输出的结果： 12345678910111213141516171819202122array (size=5) 'LiuqhController::foreachAction==&gt;var_dump' =&gt; array (size=2) 'ct' =&gt; int 7 'wt' =&gt; int 647 'main()==&gt;LiuqhController::foreachAction' =&gt; array (size=2) 'ct' =&gt; int 7 'wt' =&gt; int 1400101 'main()==&gt;time' =&gt; array (size=2) 'ct' =&gt; int 1 'wt' =&gt; int 3 'main()==&gt;xhprof_disable' =&gt; array (size=2) 'ct' =&gt; int 1 'wt' =&gt; int 1 'main()' =&gt; array (size=2) 'ct' =&gt; int 1 'wt' =&gt; int 1400233 ..... 直接输出结果中的含义：12345ct 函数调用次数，wt 花费的时间，cpu 花费的 CPU 时间(微秒即百万分之一秒)，mu 使用的内存(bytes)，pmu 使用的内存峰值(bytes) 在使用之前，请先确保服务器安装了graphviz工具，否则在生成监控图表的时候回出现以下错误:1failed to execute cmd: &quot; dot -Tpng&quot;. stderr: `sh: dot: command not found &apos; 这里提示找不到dot命令，所以需要先安装graphviz 解决方法：1$ sudo yum install graphviz graphviz安裝 Graphviz 支援 Windows、Mac OS X、FreeBSD、Solaris、Linux 等多種作業系統。 若您是 Linux 使用者，基於這款軟體的名氣，您的套件管理器中幾乎一定會有，從套件庫中安裝吧！倘若真找不到，請看官網下載頁面，試試原始碼。 若您是 Windows 用戶，請前往這裡下載安裝檔：http://www.graphviz.org/Download_windows.php Mac OS X 的使用者請往這邊走：http://www.graphviz.org/Download_macos.php 由于分析结果的查看工具是基于web的，因此，我们需要将xhprof安装包中的xhprofhtml和xhproflib目录放到服务器的web目录下，让xhprof_html目录中的内容对外可以访问。 比如我的测试服务器环境是使用vagrant搭建的Cent OS，我见过这两个目录放到/vagrant/xhprof目录下： 123[vagrant@localhost xhprof]$ pwd/vagrant/xhprof[vagrant@localhost xhprof]$ lsxhprof_html xhprof_lib web服务器使用的是Nginx，因此，在Nginx的配置文件nginx.conf中的配置如下： 12345server &#123; listen 80; server_name _; root /vagrant; ... web服务器的根目录是/vagrant，因此访问地址为http://localhost/xhprof/xhprof_html/index.php. 当然，配置好环境之后，我们还是获取不到分析结果的，因为我们在代码中并没有将分析结果保存到xhprof.output_dir指定的目录中。 因此，我们需要修改我们的代码，是其能够将分析结果存放到xhprof.output_dir指定的目录中。 123456789....$xhprofData = xhprof_disable();require &apos;/vagrant/xhprof/xhprof_lib/utils/xhprof_lib.php&apos;;require &apos;/vagrant/xhprof/xhprof_lib/utils/xhprof_runs.php&apos;;$xhprofRuns = new XHProfRuns_Default();$runId = $xhprofRuns-&gt;save_run($xhprofData, &apos;xhprof_test&apos;);echo &apos;http://localhost/xhprof/xhprof_html/index.php?run=&apos; . $runId . &apos;&amp;source=xhprof_test&apos;; 变量$runId是本次请求生成分析结果的id，最后我们输出了一个链接地址，使用改地址就可以看到本次请求的分析结果。 funciton name ： 函数名 calls: 调用次数 Incl. Wall Time (microsec 微妙)： 函数运行时间（包括子函数） IWall%：函数运行时间（包括子函数）占比 Excl. Wall Time(microsec 微妙)：函数运行时间（不包括子函数） EWall%：函数运行时间（不包括子函数） 下面是一些参数说明 Inclusive Time 包括子函数所有执行时间。Exclusive Time/Self Time 函数执行本身花费的时间，不包括子树执行时间。Wall Time 花去了的时间或挂钟时间。CPU Time 用户耗的时间+内核耗的时间Inclusive CPU 包括子函数一起所占用的CPUExclusive CPU 函数自身所占用的CPU所有参数说明Function Name 函数名 Calls 调用次数 Calls% 调用百分比 Incl. Wall Time (microsec) 调用的包括子函数所有花费时间 以微秒算(一百万分之一秒) IWall% 调用的包括子函数所有花费时间的百分比 Excl. Wall Time (microsec) 函数执行本身花费的时间，不包括子树执行时间,以微秒算(一百万分之一秒) EWall% 函数执行本身花费的时间的百分比，不包括子树执行时间 Incl. CPU(microsecs) 调用的包括子函数所有花费的cpu时间。减Incl. Wall Time即为等待cpu的时间 减Excl. Wall Time即为等待cpu的时间 ICpu% Incl. CPU(microsecs)的百分比 Excl. CPU(microsec) 函数执行本身花费的cpu时间，不包括子树执行时间,以微秒算(一百万分之一秒)。 ECPU% Excl. CPU(microsec)的百分比 Incl.MemUse(bytes) 包括子函数执行使用的内存。 IMemUse% Incl.MemUse(bytes)的百分比 Excl.MemUse(bytes) 函数执行本身内存,以字节算 EMemUse% Excl.MemUse(bytes)的百分比 Incl.PeakMemUse(bytes) Incl.MemUse的峰值 IPeakMemUse% Incl.PeakMemUse(bytes) 的峰值百分比 Excl.PeakMemUse(bytes) Excl.MemUse的峰值 EPeakMemUse% EMemUse% 峰值百分比 注意到中间的View Full Callgraph 链接，通过该链接我们可以看到图形化的分析结果。 图中红色的部分为性能比较低，耗时比较长的部分，我们可以根据根据哪些函数被标记为红色对系统的代码进行优化 本人踩的坑 使用xhprof时，图片查看时[View Full Callgraph]，出现以下错误 1failed to execute cmd: &quot; dot -Tpng&quot;. stderr: `sh: dot: command not found &apos; 各种goole，stackoverflow，说需要安装graphviz，好了，本人mac使用brew安装 1brew install graphviz 安装成功了，再试，依然提示以上错误。 而我直接在命令行输入 dot -V是正常的 1bash-3.2# dot -Vdot - graphviz version 2.38.0 (20140413.2041) 那么就是php运行环境有问题了，然后就排查 xhprof的 callgraph.php，最后定位到 xhprof/xhprof_lib/utils/callgraph_utils.php 的 xhprof_generate_image_by_dot 函数 12345678910111213141516171819202122232425262728293031function xhprof_generate_image_by_dot($dot_script, $type) &#123; $descriptorspec = array( // stdin is a pipe that the child will read from 0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;), // stdout is a pipe that the child will write to 1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;), // stderr is a pipe that the child will write to 2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;) ); $cmd = &quot; dot -T&quot;.$type; $process = proc_open( $cmd, $descriptorspec, $pipes, sys_get_temp_dir(), array( &apos;PATH&apos; =&gt; getenv( &apos;PATH&apos; ) ) ); if (is_resource($process)) &#123; fwrite($pipes[0], $dot_script); fclose($pipes[0]); $output = stream_get_contents($pipes[1]); $err = stream_get_contents($pipes[2]); if (!empty($err)) &#123; print &quot;failed to execute cmd: \&quot;$cmd\&quot;. stderr: `$err&apos;\n&quot;; exit; &#125; fclose($pipes[2]); fclose($pipes[1]); proc_close($process); return $output; &#125; print &quot;failed to execute cmd \&quot;$cmd\&quot;&quot;; exit();&#125; 问题出现在callgraph_utils.php 112行： 1proc_open( $cmd, $descriptorspec, $pipes, sys_get_temp_dir(), array( &apos;PATH&apos; =&gt; getenv( &apos;PATH&apos; ) ) ); 其中1getenv( &apos;PATH&apos; ) 输出为：/usr/bin:/bin:/usr/sbin:/sbin 而使用brew 安装 的dot在 1/usr/local/bin/dot 所以我追加了 在后面如下：/usr/local/bin1proc_open( $cmd, $descriptorspec, $pipes, sys_get_temp_dir(), array( &apos;PATH&apos; =&gt; getenv( &apos;PATH&apos; ).&apos;:/usr/local/bin&apos; ) ); 使用技巧：]]></content>
      <categories>
        <category>php</category>
        <category>Linux</category>
        <category>XHProf</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum error cannot open Packages database in ...rpm]]></title>
    <url>%2F2018%2F08%2F01%2Fyum-rpm-cannot-open%2F</url>
    <content type="text"><![CDATA[报错：yum error: cannot open Packages database in /var/lib/rpm 1、前提条件：安装软件包的时候，被我手动终止了1234567891011121314# yum clean allrpmdb: Thread/process 4541/140619363587840 failed: Thread died in Berkeley DB libraryerror: db3 error(-30974) from dbenv-&gt;failchk: DB_RUNRECOVERY: Fatal error, run database recoveryerror: cannot open Packages index using db3 - (-30974)error: cannot open Packages database in /var/lib/rpmCRITICAL:yum.main:Error: rpmdb open failed# yum makecacherpmdb: Thread/process 4541/140619363587840 failed: Thread died in Berkeley DB libraryerror: db3 error(-30974) from dbenv-&gt;failchk: DB_RUNRECOVERY: Fatal error, run database recoveryerror: cannot open Packages index using db3 - (-30974)error: cannot open Packages database in /var/lib/rpmCRITICAL:yum.main: 2、根据提示可以知道rpm数据库被损坏，如是按照下面的方法进行重建 1234567891011121314151617181920212223242526272829303132# cd /var/lib/rpm/# lsBasenames __db.004 Name Pubkeys TriggernameConflictname Dirnames Obsoletename Requirename__db.001 Filedigests Packages Requireversion__db.002 Group Providename Sha1header__db.003 Installtid Provideversion Sigmd5# rm __db.* -rf# rpm --rebuilddb# yum clean allLoaded plugins: aliases, changelog, downloadonly, kabi, presto, product-id, : refresh-packagekit, security, subscription-manager, tmprepo, : verify, versionlockUpdating certificate-based repositories.Unable to read consumer identityLoading support for Red Hat kernel ABICleaning repos: rhel-sourceCleaning up Everything0 delta-package files removed, by presto# yum updateLoaded plugins: aliases, changelog, downloadonly, kabi, presto, product-id, : refresh-packagekit, security, subscription-manager, tmprepo, : verify, versionlockUpdating certificate-based repositories.Unable to read consumer identityLoading support for Red Hat kernel ABIrhel-source | 4.0 kB 00:00 ...rhel-source/primary_db | 3.1 MB 00:00 ...Setting up Update ProcessNo Packages marked for Update]]></content>
      <categories>
        <category>yum</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ安装方法总结]]></title>
    <url>%2F2018%2F08%2F01%2Frabbit-mq-install%2F</url>
    <content type="text"><![CDATA[具体安装如下： 一：安装Erlang：12345678 # rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc # cd /etc/yum.repos.d/ # wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo # yum install esl-erlang 二：安装esl-erlang-compat：12345# cd /tmp/ # wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm # yum install esl-erlang-compat-R14B-1.el6.noarch.rpm 三：安装RabbitMQ 12345# cd /tmp # wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm # yum install rabbitmq-server-3.6.2-1.noarch.rpm 到此，RabbitMQ基本安装完成了。 四：RabbitMQ页面监控系统RabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。在Documentation下的Server下的Management是关于配置这个插件的。地址：http://www.rabbitmq.com/management.html这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。 命令：1# rabbitmq-plugins enable rabbitmq_management 五：配置登陆用户 123# rabbitmqctl add_user leyue leyue100# rabbitmqctl set_user_tags leyue administrator# rabbitmqctl set_permissions -p / leyue &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; 浏览器地址栏输入：http://localhost:15672 用户名登陆 RabbitMQ服务启动、关闭、重启12345# service rabbitmq-server start //开启# service rabbitmq-server stop //关闭#service rabbitmq-server restart //重启 具体使用，待续….]]></content>
      <categories>
        <category>rabbitmq</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 中 in_array 需要注意，根据具体场景设置第三个参数]]></title>
    <url>%2F2018%2F08%2F01%2Fphp-in-array%2F</url>
    <content type="text"><![CDATA[问题描述: 在使用php的in_array 函数时；我习惯性使用以下的方式判断： 1234567$a = &apos;1abc&apos;;$array = [1,2,3];if (in_array($a,$array)&#123; echo &apos;do .....&apos;;&#125; else &#123; echo &apos;do else .....&apos;;&#125; 按照预想应该会输出1do else ..... 但是实际输出的是：1do ..... 原因：根据官方文档函数 in_array 的描述： 在 array 中搜索 search，如果没有设置 type 则使用宽松的比较。第三个参数默认为 false，当 search 和 array 中的元素比较时会进行类型转换，相当于使用 == 进行比较。 备注：上个例子中的$a=’1abc’ 再和数字做比较时会转为$a=1 总结12in_array()第三个参数决定变量和数组中元素如何进行比较。值为 false（默认值）时，相当于 ==，值为 true 时，相当于 ===。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP float金额在强制转换为整型时，发现数值不对。]]></title>
    <url>%2F2018%2F08%2F01%2Fphp-float%2F</url>
    <content type="text"><![CDATA[今天发现一个很奇怪的问题: PHP float金额在强制转换为整型时，发现数值和实际相差1分。 123456789101112131415今天发现一个很奇怪的问题； 我有一笔订单金额为$a = 529.80 交易时我做了金额检验： 客户端传给我的是字符串52980（分）， 我从数据库取出是：529.80 然后 * 100 （变成分） $b = 52980， 然后在转为整型 intval($b),发现一个奇怪的问题，变成了52979 少了一分。然后都试了一遍，发现： [ *.30 *.80 *.31 *.81 ] 都有这个问题具体原因还不明白。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php 正则去掉字符串中非汉字字符串]]></title>
    <url>%2F2018%2F08%2F01%2Fphp-preg_match_all%2F</url>
    <content type="text"><![CDATA[直接上代码示例： 123456$str=&apos;2016，北京欢迎您 from around you..&apos;; preg_match_all(&apos;/[\x&#123;4e00&#125;-\x&#123;9fff&#125;]+/u&apos;, $str, $matches); $str = join(&apos;&apos;, $matches[0]); 输出 1北京欢迎您]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacBook brew yaf error: unknown type name 'HASHKIT_API']]></title>
    <url>%2F2018%2F07%2F31%2Fbrew-yaf-error-unknown-type-name-HASHKIT-API%2F</url>
    <content type="text"><![CDATA[问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name ‘HASHKIT_API’ 1234567891011121314151617181920212223\h:\W \u$ brew install php70-yaf==&gt; Installing php70-yaf from homebrew/php==&gt; Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gzAlready downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz==&gt; /usr/local/opt/php70/bin/phpize==&gt; ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config==&gt; makeLast 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:/usr/local/include/string.h:56:1: error: unknown type name &apos;HASHKIT_API&apos;HASHKIT_API^/usr/local/include/string.h:57:1: error: expected identifier or &apos;(&apos;const char *hashkit_string_c_str(const hashkit_string_st* self);^6 errors generated.make: *** [yaf_bootstrap.lo] Error 1make: *** Waiting for unfinished jobs....6 errors generated.make: *** [yaf.lo] Error 16 errors generated.make: *** [yaf_application.lo] Error 16 errors generated.make: *** [yaf_dispatcher.lo] Error 1 ====&gt; 解决方法：找到/usr/local/include/string.h 注释调和’HASHKIT_API有关的代码； 123456789101112/*=============================20180314 解决yaf 装不上的问题，注释#HASHKIT_APIvoid hashkit_string_free(hashkit_string_st *ptr);#HASHKIT_APIsize_t hashkit_string_length(const hashkit_string_st *self);#HASHKIT_APIconst char *hashkit_string_c_str(const hashkit_string_st* self);#================================================================*/ 补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错； 1234567891011&gt;&gt;&gt; nginx 报错： 2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: &quot;GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;, host: &quot;www.cloudins.com&quot;&gt;&gt;&gt;php-fpm报错:[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593[16-Mar-2018 12:21:27] NOTICE: ready to handle connections[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started[16-Mar-2018 14:10:02] NOTICE: Finishing ...[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye! 结论：12345=========================================================这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；]]></content>
      <categories>
        <category>php</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>
