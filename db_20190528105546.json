{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/images/demo.png","path":"images/demo.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/go-float.png","path":"images/go-float.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/go_basis_list.png","path":"images/go_basis_list.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixin.png","path":"images/weixin.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zhifubao.png","path":"images/zhifubao.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/xhprof2.png","path":"images/xhprof2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/go-init.png","path":"images/go-init.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/php-in-array.png","path":"images/php-in-array.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/xhprof1.png","path":"images/xhprof1.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1551162324000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1551162324000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1551162325000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1551162324000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1551162325000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1551162324000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1551162324000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1551162324000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1551162325000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1551162325000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1551162324000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1551162324000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1551162325000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1551162324000},{"_id":"themes/next/_config.yml","hash":"c9a27c83a87843413aeebf82638fdef91837b6d2","modified":1551266458000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1551162325000},{"_id":"source/_posts/Linked-List.md","hash":"2795fb926e1263da594438da8e5580c0029b2a7b","modified":1553680174870},{"_id":"source/_posts/Row-size-too-large-8126-for-mysql.md","hash":"1ed218178922194623cebaa25b16751d3ef09e36","modified":1553499814755},{"_id":"source/_posts/crontab-run-error-time.md","hash":"1189d77c8fbe3bb933e66bb18e014025bcceef79","modified":1553855564201},{"_id":"source/_posts/Lisked-List-two.md","hash":"ea44944826f20c5307e0306d9b75b16491d136d0","modified":1553681222169},{"_id":"source/_posts/Linux-docker-chandao.md","hash":"50fa6fd3c1b35956a41c7a0a358fcd45677ceded","modified":1553514357882},{"_id":"source/_posts/brew-yaf-error-unknown-type-name-HASHKIT-API.md","hash":"7be4daba1697dc8d1e5208f2fa54a6f7e1c51b4b","modified":1553514357900},{"_id":"source/_posts/fatal-Pathspec-xxx-is-in-submodule-for-php-yaf-vendor.md","hash":"81f8f6e8a5b8d347beb536b95f66605116fcd512","modified":1553514357908},{"_id":"source/_posts/multiRequest.md","hash":"2776cb998870e425ab7695a680b527a8a18aeba6","modified":1553514357905},{"_id":"source/_posts/php-preg_match_all.md","hash":"c786fcbe0552264fe897832ba15c44469b154d25","modified":1553855904290},{"_id":"source/_posts/php-sort.md","hash":"6125bada5948742c870233b55667fc7477524e7b","modified":1553514357893},{"_id":"source/_posts/nfs-file-sharing.md","hash":"7f3baad20da95eab0bf38574ce23280681c46469","modified":1554290240598},{"_id":"source/_posts/php-interView-question.md","hash":"3f8f643121d352f9ff762efc28174d36142800cd","modified":1555931130003},{"_id":"source/_posts/nginx-optimization.md","hash":"9977412eedc28a03b328e9708c9a803360bc77a4","modified":1553777910054},{"_id":"source/_posts/php7-update-log.md","hash":"5689532259e042a9d555571434c50a75d549147c","modified":1553499814759},{"_id":"source/_posts/phpFpm.md","hash":"08a8013f6a2a4d8cb42d743e1b730065ca742050","modified":1553514357877},{"_id":"source/_posts/question-for-git.md","hash":"ab39a65ce2fdd39d3cbaf364314a4067f5d00ec1","modified":1553514357873},{"_id":"source/categories/index.md","hash":"705ed7a11fbbba5c62a993bc44a68947d4376a0f","modified":1553499814762},{"_id":"source/_posts/rabbit-mq-install.md","hash":"092f1a479424d8537ae2020118f19bf3b8e0d177","modified":1553514222014},{"_id":"source/tags/index.md","hash":"d76de7d8727d5a8890aa852a43c13af4bc3f9753","modified":1553499814763},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1551162325000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1551162325000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1551162325000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1551162325000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1551162324000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1551162324000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1551162324000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1551162324000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1551162324000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1551162324000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1551162324000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1551162325000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1551162324000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1551162325000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1551162324000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1551162324000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1551162324000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1551162325000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1551162324000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1551162325000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1551162325000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1551162324000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1551162325000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1551162325000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1551162324000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1551162325000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1551162324000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1551162324000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1551162325000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1551162325000},{"_id":"themes/next/languages/zh-hk.yml","hash":"0f286bbd9f70378eb11b10d4e0f6328c444dd4f3","modified":1551162325000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f90fde914eb1eb3c38784266acf928e403a638ba","modified":1551257264000},{"_id":"themes/next/languages/zh-tw.yml","hash":"fcdfa52e8931a461b4c9cf1c07d0cfda2ec97327","modified":1551162325000},{"_id":"themes/next/source/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1551162324000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1551162324000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1551162324000},{"_id":"themes/next/layout/_macro/post.swig","hash":"8e0899e21e0e0a025030e4b8646883d7f66fb8b7","modified":1553242030000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1551162324000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1551162324000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551162324000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1551162324000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551162324000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1551162324000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1551162324000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1551162324000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c80775d2ec743690b18c5fa00f75da6e261ba34d","modified":1551162324000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a9fb1afa86514b4fc0de479351aed957804f5935","modified":1551265467000},{"_id":"themes/next/layout/_partials/header.swig","hash":"9c10bbe462ec3bbf661ebb9d1ed9a85f47edc6cd","modified":1551162324000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1551162324000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1551162324000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1551162324000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1551162324000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1551162324000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1551162324000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1551162324000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1551162324000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1551162324000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1551162324000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1551162324000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1551162325000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1551162325000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1551162325000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1551162325000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1551162325000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1551162325000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1551162325000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1551162325000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1551162325000},{"_id":"source/images/demo.png","hash":"8f0a443492078e557c7e642a15dbcab44a6da9a7","modified":1553499814762},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1551162324000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551162324000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551162324000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551162324000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551162324000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551162324000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551162324000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551162324000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551162324000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551162324000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551162324000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551162324000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551162324000},{"_id":"themes/next/source/images/go-float.png","hash":"6fbfd0e4c0ba05d467b9bf73664264b26418bbb7","modified":1551162324000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551162324000},{"_id":"themes/next/source/images/go_basis_list.png","hash":"3b851fd2fae935a087dc2dc21a4c08eeb24ddf73","modified":1551162324000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551162324000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551162324000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551162324000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551162324000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551162324000},{"_id":"themes/next/source/images/weixin.png","hash":"66fbe50c3231e81c01782081f95d27f11d6c9c9c","modified":1551162324000},{"_id":"themes/next/source/images/zhifubao.png","hash":"726623ccb90eaedfac2b24e68e88af22d4dbd1a1","modified":1551162324000},{"_id":"themes/next/source/images/xhprof2.png","hash":"62ddb8f33f445df635fcbdc80e00e488d9cb0f25","modified":1551162324000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324656},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162324557},{"_id":"themes/next/source/images/go-init.png","hash":"0add38ab440c639f00934dde8a1080ab94ae1bc9","modified":1551162324000},{"_id":"themes/next/source/images/php-in-array.png","hash":"2158481b84b54ea86231e693bd4b8afe1c763d4e","modified":1551162324000},{"_id":"themes/next/source/images/xhprof1.png","hash":"d78b4e63db59abc836b7c8c53012e4c0a08b0635","modified":1551162324000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1551162324000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551162324000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551162324000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551162324000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1551162324000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1551162324000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1551162324000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1551162324000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1551162324000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1551162324000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1551162324000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"9cef9cc708639afcf7714803d194562c5847e64d","modified":1551265389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"9483e1754ded4e9c9ba8bdcf94b3ab0a180d3134","modified":1551265912000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1551162324000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1551162324000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1551162324000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1551162324000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1551162324000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1551162324000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1551162324000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1551162324000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1551162324000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1551262069000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1551162324000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1551162324000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1551162324000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1551162324000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1551162324000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1551162324000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1551162324000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1551162324000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1551162324000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1551162324000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1551162324000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551162324000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1551162324000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1551162324000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1551162324000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1551162324000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1551162324000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1551162324000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1551162324000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1551162324000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1551162324000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1551162324000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1551162324000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1551162324000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551162324000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1551162324000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1551162324000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1551162324000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551162324000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551162324000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551162324000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551162324000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1551162324000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551162324000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551162324000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551162324000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551162324000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1551162324000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1551162324000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551162324000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551162324000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1551162324000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551162324000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551162324000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1551162324000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1551162324000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1551162324000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1551162324000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1551162324000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1551162324000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1551162324000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1551162324000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551162324000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1551162324000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551162324000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551162324000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1551162324000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1551265977000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1551162324000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"8b4b6d23a4d796a8a415f877bc9d6ea94cea7e46","modified":1551265997000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551162324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551162324000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551162324000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551162324000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1551162324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551162324000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1551162324000},{"_id":"public/search.xml","hash":"43782763deef4a9c16c028175336d15931af9b8e","modified":1555931143663},{"_id":"public/categories/index.html","hash":"e1e9c43a41c2a91c6118153d36a4f4244475ac89","modified":1555931143710},{"_id":"public/tags/index.html","hash":"ecc40bc6dcc76cad18d3d35b6874d1e1b79a147c","modified":1555931143710},{"_id":"public/2019/03/28/nginx-optimization/index.html","hash":"9e79f0e1e49918530ddae7a95e32fd3ee6b1d3fc","modified":1555931143710},{"_id":"public/2019/03/27/Lisked-List-two/index.html","hash":"9509a93fae3e9eeafc9bf377fc0961b5b26874b3","modified":1555931143710},{"_id":"public/2019/03/25/Linked-List/index.html","hash":"4f1ccd34e0f8b11c18bed7192d064d5a8b432b11","modified":1555931143710},{"_id":"public/2019/03/22/multiRequest/index.html","hash":"70135b315462993f96047f63ba3c3fb6aad32827","modified":1555931143710},{"_id":"public/2019/03/10/phpFpm/index.html","hash":"1243db00899bc42b9fc9c8de5de05d29f3932751","modified":1555931143710},{"_id":"public/2018/10/06/php7-update-log/index.html","hash":"f811e29d91c1bab895ecb1a67e52edafa8094bed","modified":1555931143710},{"_id":"public/2018/09/11/Row-size-too-large-8126-for-mysql/index.html","hash":"3292f2fd3c2fc43b660ba5b9e2c84b021843eb08","modified":1555931143711},{"_id":"public/2018/08/13/fatal-Pathspec-xxx-is-in-submodule-for-php-yaf-vendor/index.html","hash":"00e1c58d9ce76ead048218ca5b7b0efd078d2645","modified":1555931143711},{"_id":"public/2018/08/03/rabbit-mq-install/index.html","hash":"9536bd3a433c0934d5cccaa3318c37841a24e0b6","modified":1555931143711},{"_id":"public/2018/07/31/brew-yaf-error-unknown-type-name-HASHKIT-API/index.html","hash":"fe87ca6385ea8f68b360ac6ec5a82e1117d88c23","modified":1555931143711},{"_id":"public/2018/01/12/php-sort/index.html","hash":"2d4d9b37877e2ce25baf0bf6d310a34e99d06c50","modified":1555931143711},{"_id":"public/2017/09/17/php-interView-question/index.html","hash":"7c1154c08faa5a70f6ed75b718839c5782e04b5e","modified":1555931143711},{"_id":"public/2017/01/14/Linux-docker-chandao/index.html","hash":"da1efb5518ec88b93c96d967a5f490eb05b93e6b","modified":1555931143711},{"_id":"public/2016/11/23/question-for-git/index.html","hash":"298a5d931da53ab6c75e39292b417f81de2b6cbf","modified":1555931143711},{"_id":"public/2016/04/19/nfs-file-sharing/index.html","hash":"3b13322e982baa7c6736138b57c665ba9c9abf04","modified":1555931143712},{"_id":"public/2015/10/03/crontab-run-error-time/index.html","hash":"510497c853dd5d8cc18705140583c972e3f367b6","modified":1555931143712},{"_id":"public/2015/03/09/php-preg_match_all/index.html","hash":"39c539deeb0606bf543f3ba6457e9411091ecbe2","modified":1555931143712},{"_id":"public/index.html","hash":"6a24906567badc22339f97904f069d4dcf962766","modified":1555931143712},{"_id":"public/page/2/index.html","hash":"2f140e92d017a11078db2a4acc649251874fbb9e","modified":1555931143719},{"_id":"public/categories/mysql/index.html","hash":"37384007324ca5e497fbe3d427d40f4d8ec84343","modified":1555931143719},{"_id":"public/categories/linux/index.html","hash":"263b6019436e57fa72e53e497f3fcc91cf4c814e","modified":1555931143720},{"_id":"public/categories/php/index.html","hash":"a55d5030ac137d80c39572c2bf722bcbd1a7eb29","modified":1555931143720},{"_id":"public/categories/git/index.html","hash":"04ad92a89d56fd494b1e3d6b0ead82943ccc8281","modified":1555931143720},{"_id":"public/categories/并发/index.html","hash":"438ec027bd5469ff979a889588296f8f1b39d83e","modified":1555931143720},{"_id":"public/categories/面试题/index.html","hash":"c52652729aac171b322648c9dee624da704cc9be","modified":1555931143720},{"_id":"public/categories/面试题/算法/index.html","hash":"6c13ab8462264c8d606c879ea827903c77ecb662","modified":1555931143720},{"_id":"public/categories/数据结构/index.html","hash":"65c9bcf3ac9cc8572a798662e097e09aedf727fb","modified":1555931143720},{"_id":"public/categories/nginx/index.html","hash":"14bc71ca3934ff3e5df915a9b4323f1baf9f11f4","modified":1555931143720},{"_id":"public/categories/消息队列/index.html","hash":"263cc5655dd79ca1d5e29915877fd8611a0d21e8","modified":1555931143720},{"_id":"public/archives/index.html","hash":"4ef8b5fda116bff5e919eae18e387a9c50e8eaa2","modified":1555931143721},{"_id":"public/archives/page/2/index.html","hash":"6a6cda9c8d801abca14a356b37fd333fe9145130","modified":1555931143721},{"_id":"public/archives/2015/index.html","hash":"a86a0f59843d2c4d3726f1e91bf1aa798185705f","modified":1555931143721},{"_id":"public/archives/2015/03/index.html","hash":"c527be0c89dfc4e7a125eecd9f032ce857e70509","modified":1555931143721},{"_id":"public/archives/2015/10/index.html","hash":"df2a07dce042828e31141b4b9fea1983b7efad69","modified":1555931143721},{"_id":"public/archives/2016/index.html","hash":"3090bb4c98f3a3500ab849c707d298151d5fa10d","modified":1555931143721},{"_id":"public/archives/2016/04/index.html","hash":"7cc8dce4a482f2f7c42be2f429176a020c903206","modified":1555931143721},{"_id":"public/archives/2016/11/index.html","hash":"56b02d24b10c56c7ce349ad92134f2bc2922aad9","modified":1555931143721},{"_id":"public/archives/2017/index.html","hash":"aca00164d0b5a8e818885969b70f7df0fe5a2fff","modified":1555931143721},{"_id":"public/archives/2017/01/index.html","hash":"4afd7452dfe259e5ef3e4f4567cbd1a5f63afeb8","modified":1555931143721},{"_id":"public/archives/2017/09/index.html","hash":"36a7c9c8579e0e68dbb1310c9a96272dad8eae1b","modified":1555931143722},{"_id":"public/archives/2018/index.html","hash":"6eb3c56897d463a4e4ad4ee59fb0b43c64f3d6e6","modified":1555931143722},{"_id":"public/archives/2018/01/index.html","hash":"c7031619487cbe0612d57bd4c46a7e8f41bddf65","modified":1555931143722},{"_id":"public/archives/2018/07/index.html","hash":"3a0bdd2bffca16c6ae0f63c0db9b5cd8cb1cc26d","modified":1555931143722},{"_id":"public/archives/2018/08/index.html","hash":"2b9d6245c50d033be6a37cceb7bef4efab78f00e","modified":1555931143722},{"_id":"public/archives/2018/09/index.html","hash":"0c0b88b917705cdaa96ede458267e0c19547d4f4","modified":1555931143722},{"_id":"public/archives/2018/10/index.html","hash":"d903dfd9dfd67f007a78d9e6a222d52f9c6534e0","modified":1555931143722},{"_id":"public/archives/2019/index.html","hash":"dad2c766d9faeb14ca8bbad0ecf30ab104ad524e","modified":1555931143722},{"_id":"public/archives/2019/03/index.html","hash":"d4f234dc508e77ad7f3ca95b4de3b9a3672cb05c","modified":1555931143722},{"_id":"public/tags/mysql/index.html","hash":"3f1b7055d44f58cc6a38f09c6cad9b0fe1be046d","modified":1555931143723},{"_id":"public/tags/crond/index.html","hash":"d868c84e427140ba8dd3faf577e2884f7ceff1a3","modified":1555931143723},{"_id":"public/tags/禅道/index.html","hash":"494cbfce8dd5a4e2067a11fc1b535f337394d8e8","modified":1555931143723},{"_id":"public/tags/mac/index.html","hash":"a15eac11dac04b5b927572ba74a4a9f06a6f6074","modified":1555931143723},{"_id":"public/tags/php/index.html","hash":"9322410719f4a0e95401cffe4c4b6355f1e3e031","modified":1555931143723},{"_id":"public/tags/yaf/index.html","hash":"0cec6f8a37471b76f016dd7f4651cae62f1f6602","modified":1555931143723},{"_id":"public/tags/nfs/index.html","hash":"56990c280ab6777a13bd684d2260992066b8ddcc","modified":1555931143723},{"_id":"public/tags/单向链表/index.html","hash":"077470f2002503f3d29db061e1094806cdaa8563","modified":1555931143723},{"_id":"public/tags/双链表/index.html","hash":"3508c43681a0c8168210f49e9abdc3007adaadea","modified":1555931143723},{"_id":"public/tags/循环链/index.html","hash":"e184b0cd27827c67d06394e9c131a63d95054942","modified":1555931143724},{"_id":"public/tags/调优/index.html","hash":"e7c31debe83cdf9ba54dba335075cdeaa0ff6e34","modified":1555931143724},{"_id":"public/tags/php-fpm/index.html","hash":"3d3ca99290e1418a8b7e934d2b92e471512b5a89","modified":1555931143724},{"_id":"public/tags/rabbitmq/index.html","hash":"abba9eb62dff918d05955571a556b88d9c6bd156","modified":1555931143724},{"_id":"public/tags/linux/index.html","hash":"04229167fd7a376ec9cb1ef499430a720b244e26","modified":1555931143724},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555931143739},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555931143739},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555931143739},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555931143739},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555931143739},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555931143739},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555931143739},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555931143739},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555931143739},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555931143739},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555931143740},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555931143740},{"_id":"public/images/go-float.png","hash":"6fbfd0e4c0ba05d467b9bf73664264b26418bbb7","modified":1555931143740},{"_id":"public/images/go_basis_list.png","hash":"3b851fd2fae935a087dc2dc21a4c08eeb24ddf73","modified":1555931143740},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555931143740},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555931143740},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555931143740},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555931143740},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555931143740},{"_id":"public/images/weixin.png","hash":"66fbe50c3231e81c01782081f95d27f11d6c9c9c","modified":1555931143740},{"_id":"public/images/zhifubao.png","hash":"726623ccb90eaedfac2b24e68e88af22d4dbd1a1","modified":1555931143740},{"_id":"public/images/xhprof2.png","hash":"62ddb8f33f445df635fcbdc80e00e488d9cb0f25","modified":1555931143740},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1555931143740},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555931143740},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555931143740},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555931143740},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555931143740},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555931143740},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555931143740},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555931143740},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555931143741},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555931143741},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555931143741},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555931143741},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555931143741},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555931143741},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555931143741},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1555931143741},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1555931143741},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1555931143741},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555931144273},{"_id":"public/images/go-init.png","hash":"0add38ab440c639f00934dde8a1080ab94ae1bc9","modified":1555931144280},{"_id":"public/images/xhprof1.png","hash":"d78b4e63db59abc836b7c8c53012e4c0a08b0635","modified":1555931144282},{"_id":"public/images/php-in-array.png","hash":"2158481b84b54ea86231e693bd4b8afe1c763d4e","modified":1555931144282},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555931144282},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555931144282},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555931144288},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1555931144288},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1555931144289},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555931144289},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555931144289},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1555931144289},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1555931144289},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555931144289},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555931144289},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555931144289},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555931144289},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555931144290},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555931144290},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1555931144290},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555931144290},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1555931144290},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1555931144290},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1555931144291},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555931144291},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1555931144291},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1555931144291},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1555931144291},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555931144291},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555931144291},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555931144291},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1555931144291},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555931144291},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555931144291},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555931144291},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555931144291},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555931144291},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555931144291},{"_id":"public/404.html","hash":"1019e643c86d0d43a205d2c9e6aceff7c99a28a8","modified":1555931144291},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1555931144291},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1555931144291},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1555931144291},{"_id":"public/css/main.css","hash":"8d810362b4864b7c6e50ab846efd0d0fb18764ce","modified":1555931144291},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555931144291},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555931144297},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555931144298},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1555931144298},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555931144298},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1555931144298},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1555931144298},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555931144298},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555931144298},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555931144298},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555931144299},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1555931144303},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555931144303},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555931144306},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555931144306},{"_id":"public/images/demo.png","hash":"8f0a443492078e557c7e642a15dbcab44a6da9a7","modified":1555931144309},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1555931144317},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1555931144318},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555931144319},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1555931144319},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555931144319},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555931144320},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1555931144320},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1555931144327},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555931144327},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1555931144328},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1555931144330},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1555931144337},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1555931144339},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555931144352},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555931144361},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1555931144385},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1555931144389}],"Category":[{"name":"mysql","_id":"cjus987h100020641okz0k0w1"},{"name":"linux","_id":"cjus987h600070641x5umy0be"},{"name":"php","_id":"cjus987he000i06411ot0kr4l"},{"name":"git","_id":"cjus987hf000n0641vknpvsht"},{"name":"并发","_id":"cjus987hh000s0641u6iysyoz"},{"name":"面试题","_id":"cjus987hj000y0641zxghs9sq"},{"name":"算法","parent":"cjus987hj000y0641zxghs9sq","_id":"cjus987hl0016064186nogffj"},{"name":"数据结构","_id":"cjus987lk001h064173nkas8h"},{"name":"nginx","_id":"cjus987lo001r064154d0y5ai"},{"name":"消息队列","_id":"cjus987lp001v06413cl48se6"}],"Data":[],"Page":[{"title":"categories","date":"2018-07-31T06:16:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-31 14:16:06\ntype: categories\n---\n","updated":"2019-03-25T07:43:34.762Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjus987lh001d0641nggitxt1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-31T06:20:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-31 14:20:51\ntype: tags\n---\n","updated":"2019-03-25T07:43:34.763Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjus987lj001f06412jl7tmms","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Row size too large (> 8126) for mysql","date":"2018-09-11T03:14:07.000Z","_content":"\n### 问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (> 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.\n\n### 错误分析\n根据报错信息，mysql提示是行的数据过大，应该将一些字段类型声明为TEXT或者BLOB，再或者将ROW_FORMAT(行格式)设置为DYNAMIC或者COMPRESSED。根据这个信息，我们查看一下mysql数据库的一些变量参数信息：\n```\n# 查看所有表的状态\nshow table status;\n+--------+--------+---------+------------+------+----------------+-------------+\n| Name   | Engine | Version | Row_format | Rows | Avg_row_length | Data_length |\n+--------+--------+---------+------------+------+----------------+-------------+\n| t_test | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |\n+--------+--------+---------+------------+------+----------------+-------------+\n\n# 查看当前数据库innodb引擎的文件格式\nshow variables like '%innodb_file_format%';\n+--------------------------+-----------+\n| Variable_name            | Value     |\n+--------------------------+-----------+\n| innodb_file_format       | Barracuda |\n| innodb_file_format_check | ON        |\n| innodb_file_format_max   | Barracuda |\n+--------------------------+-----------+\n```\n<!--more-->\n> mysql的innodb引擎存储blob/text类型字段的行为，取决于三个因素：字段大小、整行(row)大小、innodb行格式。\n\n\n**innodb引擎支持的文件格式包括Antelope(羚羊)、Barracuda(梭子鱼):**\n  - Antelope提供Redundant（冗长）、Compact（紧凑）文件格式\n  - Barracuda除此之外提供Dynamic(动态)和 Compressed(压缩)\n  \nAntelope格式的innodb引擎会尽可能地将整行数据存储在一个innodb page上，并且一个InnoDB page存储多行数据(至少是2行)，一个innodb page大约是16k，所以行大小限制为(16k - page header- page trailer) / 2。如果行中有可变长度字段(blob/text/varchar)，并且整行大小超过行大小限制，InnoDB会将字段其余数据页外存储(off-page)。这种情况下(Redundant或Compact)，每个可变长度字段(blob/text/varchar)的前768字节存储在innodb page内的行中，其余部分存储在页外。\n\n> 导致innodb的1118错误的原因：1、多个可变长度字段；2、每个字段的值超过768(不是定义的字段大小，而是字段值的大小)；3、innodb引擎不是在定义表的时候判断，而是每次插入操作的时候判断。\n\nBarracuda格式的innodb引擎，当ROW_FORMAT设置为DYNAMIC只使用一个20字节的指针作为可变长度类型，并且优先选择较小的字段存储在innodb page上。并且可以给blob增加前缀索引(prefix index)，将前缀索引建立在page外的blob上而不是page内。ROW_FORMAT设置为COMPRESSED时，innodb引擎的对可变长度字段的存储策略类似，并且总是压缩不在page内的数据，即使没有设置KEY_BLOCK_SIZE，也没有启用正常数据和索引的压缩。\n\ninnodb在存储blob时，page内部和外部的blob其实时不共享的。每个blob在页外都有16k分配，即使blob只有1个字节大小。如果每行有多个blob，可能会导致数据库效率比较低。所以最好是一行只定义一个blob来组合数据，并且压缩改数据，text类型同理\n\n==解决方案==\n\n### 解决方案1 – Dynamic\n将innodb引擎的文件格式设置为Barracuda，并且将行格式设置为DYNAMIC。\n\n```\nSET GLOBAL innodb_file_format=Barracuda;\n\nALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=DYNAMIC;\n\n```\n\n\n### 解决方案2 – Compressed\n将innodb引擎的文件格式设置为Barracuda，将行格式设置为COMPRESSED，并且设置缓冲池索引块大小。一般压缩效果明显，压缩率在30%-40%左右，但是会影响存储效率。\n\n```\nSET GLOBAL innodb_file_format=Barracuda;\n\nALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8，\n\n```\n\n### 解决方案3 – 单表一文件\n每张表一个文件，不建议使用。对于单行多可变长度字段的表，效果可以，但是对于其他表浪费存储空间。\n```\ninnodb_file_format=Barracuda\n\ninnodb_file_per_table=1\n```","source":"_posts/Row-size-too-large-8126-for-mysql.md","raw":"---\ntitle: 'Row size too large (> 8126) for mysql'\ndate: 2018-09-11 11:14:07\ntags:\n - mysql\ncategories:\n - mysql\n---\n\n### 问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (> 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.\n\n### 错误分析\n根据报错信息，mysql提示是行的数据过大，应该将一些字段类型声明为TEXT或者BLOB，再或者将ROW_FORMAT(行格式)设置为DYNAMIC或者COMPRESSED。根据这个信息，我们查看一下mysql数据库的一些变量参数信息：\n```\n# 查看所有表的状态\nshow table status;\n+--------+--------+---------+------------+------+----------------+-------------+\n| Name   | Engine | Version | Row_format | Rows | Avg_row_length | Data_length |\n+--------+--------+---------+------------+------+----------------+-------------+\n| t_test | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |\n+--------+--------+---------+------------+------+----------------+-------------+\n\n# 查看当前数据库innodb引擎的文件格式\nshow variables like '%innodb_file_format%';\n+--------------------------+-----------+\n| Variable_name            | Value     |\n+--------------------------+-----------+\n| innodb_file_format       | Barracuda |\n| innodb_file_format_check | ON        |\n| innodb_file_format_max   | Barracuda |\n+--------------------------+-----------+\n```\n<!--more-->\n> mysql的innodb引擎存储blob/text类型字段的行为，取决于三个因素：字段大小、整行(row)大小、innodb行格式。\n\n\n**innodb引擎支持的文件格式包括Antelope(羚羊)、Barracuda(梭子鱼):**\n  - Antelope提供Redundant（冗长）、Compact（紧凑）文件格式\n  - Barracuda除此之外提供Dynamic(动态)和 Compressed(压缩)\n  \nAntelope格式的innodb引擎会尽可能地将整行数据存储在一个innodb page上，并且一个InnoDB page存储多行数据(至少是2行)，一个innodb page大约是16k，所以行大小限制为(16k - page header- page trailer) / 2。如果行中有可变长度字段(blob/text/varchar)，并且整行大小超过行大小限制，InnoDB会将字段其余数据页外存储(off-page)。这种情况下(Redundant或Compact)，每个可变长度字段(blob/text/varchar)的前768字节存储在innodb page内的行中，其余部分存储在页外。\n\n> 导致innodb的1118错误的原因：1、多个可变长度字段；2、每个字段的值超过768(不是定义的字段大小，而是字段值的大小)；3、innodb引擎不是在定义表的时候判断，而是每次插入操作的时候判断。\n\nBarracuda格式的innodb引擎，当ROW_FORMAT设置为DYNAMIC只使用一个20字节的指针作为可变长度类型，并且优先选择较小的字段存储在innodb page上。并且可以给blob增加前缀索引(prefix index)，将前缀索引建立在page外的blob上而不是page内。ROW_FORMAT设置为COMPRESSED时，innodb引擎的对可变长度字段的存储策略类似，并且总是压缩不在page内的数据，即使没有设置KEY_BLOCK_SIZE，也没有启用正常数据和索引的压缩。\n\ninnodb在存储blob时，page内部和外部的blob其实时不共享的。每个blob在页外都有16k分配，即使blob只有1个字节大小。如果每行有多个blob，可能会导致数据库效率比较低。所以最好是一行只定义一个blob来组合数据，并且压缩改数据，text类型同理\n\n==解决方案==\n\n### 解决方案1 – Dynamic\n将innodb引擎的文件格式设置为Barracuda，并且将行格式设置为DYNAMIC。\n\n```\nSET GLOBAL innodb_file_format=Barracuda;\n\nALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=DYNAMIC;\n\n```\n\n\n### 解决方案2 – Compressed\n将innodb引擎的文件格式设置为Barracuda，将行格式设置为COMPRESSED，并且设置缓冲池索引块大小。一般压缩效果明显，压缩率在30%-40%左右，但是会影响存储效率。\n\n```\nSET GLOBAL innodb_file_format=Barracuda;\n\nALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8，\n\n```\n\n### 解决方案3 – 单表一文件\n每张表一个文件，不建议使用。对于单行多可变长度字段的表，效果可以，但是对于其他表浪费存储空间。\n```\ninnodb_file_format=Barracuda\n\ninnodb_file_per_table=1\n```","slug":"Row-size-too-large-8126-for-mysql","published":1,"updated":"2019-03-25T07:43:34.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987gq0000064170vloj58","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"问题：SQLSTATE-42000-Syntax-error-or-access-violation-1118-Row-size-too-large-gt-8126-Changing-some-columns-to-TEXT-or-BLOB-or-using-ROW-FORMAT-DYNAMIC-or-ROW-FORMAT-COMPRESSED-may-help-In-current-row-format-BLOB-prefix-of-768-bytes-is-stored-inline\"><a href=\"#问题：SQLSTATE-42000-Syntax-error-or-access-violation-1118-Row-size-too-large-gt-8126-Changing-some-columns-to-TEXT-or-BLOB-or-using-ROW-FORMAT-DYNAMIC-or-ROW-FORMAT-COMPRESSED-may-help-In-current-row-format-BLOB-prefix-of-768-bytes-is-stored-inline\" class=\"headerlink\" title=\"问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.\"></a>问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.</h3><h3 id=\"错误分析\"><a href=\"#错误分析\" class=\"headerlink\" title=\"错误分析\"></a>错误分析</h3><p>根据报错信息，mysql提示是行的数据过大，应该将一些字段类型声明为TEXT或者BLOB，再或者将ROW_FORMAT(行格式)设置为DYNAMIC或者COMPRESSED。根据这个信息，我们查看一下mysql数据库的一些变量参数信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有表的状态</span><br><span class=\"line\">show table status;</span><br><span class=\"line\">+--------+--------+---------+------------+------+----------------+-------------+</span><br><span class=\"line\">| Name   | Engine | Version | Row_format | Rows | Avg_row_length | Data_length |</span><br><span class=\"line\">+--------+--------+---------+------------+------+----------------+-------------+</span><br><span class=\"line\">| t_test | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |</span><br><span class=\"line\">+--------+--------+---------+------------+------+----------------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前数据库innodb引擎的文件格式</span><br><span class=\"line\">show variables like &apos;%innodb_file_format%&apos;;</span><br><span class=\"line\">+--------------------------+-----------+</span><br><span class=\"line\">| Variable_name            | Value     |</span><br><span class=\"line\">+--------------------------+-----------+</span><br><span class=\"line\">| innodb_file_format       | Barracuda |</span><br><span class=\"line\">| innodb_file_format_check | ON        |</span><br><span class=\"line\">| innodb_file_format_max   | Barracuda |</span><br><span class=\"line\">+--------------------------+-----------+</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>mysql的innodb引擎存储blob/text类型字段的行为，取决于三个因素：字段大小、整行(row)大小、innodb行格式。</p>\n</blockquote>\n<p><strong>innodb引擎支持的文件格式包括Antelope(羚羊)、Barracuda(梭子鱼):</strong></p>\n<ul>\n<li>Antelope提供Redundant（冗长）、Compact（紧凑）文件格式</li>\n<li>Barracuda除此之外提供Dynamic(动态)和 Compressed(压缩)</li>\n</ul>\n<p>Antelope格式的innodb引擎会尽可能地将整行数据存储在一个innodb page上，并且一个InnoDB page存储多行数据(至少是2行)，一个innodb page大约是16k，所以行大小限制为(16k - page header- page trailer) / 2。如果行中有可变长度字段(blob/text/varchar)，并且整行大小超过行大小限制，InnoDB会将字段其余数据页外存储(off-page)。这种情况下(Redundant或Compact)，每个可变长度字段(blob/text/varchar)的前768字节存储在innodb page内的行中，其余部分存储在页外。</p>\n<blockquote>\n<p>导致innodb的1118错误的原因：1、多个可变长度字段；2、每个字段的值超过768(不是定义的字段大小，而是字段值的大小)；3、innodb引擎不是在定义表的时候判断，而是每次插入操作的时候判断。</p>\n</blockquote>\n<p>Barracuda格式的innodb引擎，当ROW_FORMAT设置为DYNAMIC只使用一个20字节的指针作为可变长度类型，并且优先选择较小的字段存储在innodb page上。并且可以给blob增加前缀索引(prefix index)，将前缀索引建立在page外的blob上而不是page内。ROW_FORMAT设置为COMPRESSED时，innodb引擎的对可变长度字段的存储策略类似，并且总是压缩不在page内的数据，即使没有设置KEY_BLOCK_SIZE，也没有启用正常数据和索引的压缩。</p>\n<p>innodb在存储blob时，page内部和外部的blob其实时不共享的。每个blob在页外都有16k分配，即使blob只有1个字节大小。如果每行有多个blob，可能会导致数据库效率比较低。所以最好是一行只定义一个blob来组合数据，并且压缩改数据，text类型同理</p>\n<p>==解决方案==</p>\n<h3 id=\"解决方案1-–-Dynamic\"><a href=\"#解决方案1-–-Dynamic\" class=\"headerlink\" title=\"解决方案1 – Dynamic\"></a>解决方案1 – Dynamic</h3><p>将innodb引擎的文件格式设置为Barracuda，并且将行格式设置为DYNAMIC。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_file_format=Barracuda;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案2-–-Compressed\"><a href=\"#解决方案2-–-Compressed\" class=\"headerlink\" title=\"解决方案2 – Compressed\"></a>解决方案2 – Compressed</h3><p>将innodb引擎的文件格式设置为Barracuda，将行格式设置为COMPRESSED，并且设置缓冲池索引块大小。一般压缩效果明显，压缩率在30%-40%左右，但是会影响存储效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_file_format=Barracuda;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8，</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案3-–-单表一文件\"><a href=\"#解决方案3-–-单表一文件\" class=\"headerlink\" title=\"解决方案3 – 单表一文件\"></a>解决方案3 – 单表一文件</h3><p>每张表一个文件，不建议使用。对于单行多可变长度字段的表，效果可以，但是对于其他表浪费存储空间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">innodb_file_format=Barracuda</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_file_per_table=1</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题：SQLSTATE-42000-Syntax-error-or-access-violation-1118-Row-size-too-large-gt-8126-Changing-some-columns-to-TEXT-or-BLOB-or-using-ROW-FORMAT-DYNAMIC-or-ROW-FORMAT-COMPRESSED-may-help-In-current-row-format-BLOB-prefix-of-768-bytes-is-stored-inline\"><a href=\"#问题：SQLSTATE-42000-Syntax-error-or-access-violation-1118-Row-size-too-large-gt-8126-Changing-some-columns-to-TEXT-or-BLOB-or-using-ROW-FORMAT-DYNAMIC-or-ROW-FORMAT-COMPRESSED-may-help-In-current-row-format-BLOB-prefix-of-768-bytes-is-stored-inline\" class=\"headerlink\" title=\"问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.\"></a>问题：SQLSTATE[42000]: Syntax error or access violation: 1118 Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.</h3><h3 id=\"错误分析\"><a href=\"#错误分析\" class=\"headerlink\" title=\"错误分析\"></a>错误分析</h3><p>根据报错信息，mysql提示是行的数据过大，应该将一些字段类型声明为TEXT或者BLOB，再或者将ROW_FORMAT(行格式)设置为DYNAMIC或者COMPRESSED。根据这个信息，我们查看一下mysql数据库的一些变量参数信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有表的状态</span><br><span class=\"line\">show table status;</span><br><span class=\"line\">+--------+--------+---------+------------+------+----------------+-------------+</span><br><span class=\"line\">| Name   | Engine | Version | Row_format | Rows | Avg_row_length | Data_length |</span><br><span class=\"line\">+--------+--------+---------+------------+------+----------------+-------------+</span><br><span class=\"line\">| t_test | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |</span><br><span class=\"line\">+--------+--------+---------+------------+------+----------------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前数据库innodb引擎的文件格式</span><br><span class=\"line\">show variables like &apos;%innodb_file_format%&apos;;</span><br><span class=\"line\">+--------------------------+-----------+</span><br><span class=\"line\">| Variable_name            | Value     |</span><br><span class=\"line\">+--------------------------+-----------+</span><br><span class=\"line\">| innodb_file_format       | Barracuda |</span><br><span class=\"line\">| innodb_file_format_check | ON        |</span><br><span class=\"line\">| innodb_file_format_max   | Barracuda |</span><br><span class=\"line\">+--------------------------+-----------+</span><br></pre></td></tr></table></figure></p>","more":"<blockquote>\n<p>mysql的innodb引擎存储blob/text类型字段的行为，取决于三个因素：字段大小、整行(row)大小、innodb行格式。</p>\n</blockquote>\n<p><strong>innodb引擎支持的文件格式包括Antelope(羚羊)、Barracuda(梭子鱼):</strong></p>\n<ul>\n<li>Antelope提供Redundant（冗长）、Compact（紧凑）文件格式</li>\n<li>Barracuda除此之外提供Dynamic(动态)和 Compressed(压缩)</li>\n</ul>\n<p>Antelope格式的innodb引擎会尽可能地将整行数据存储在一个innodb page上，并且一个InnoDB page存储多行数据(至少是2行)，一个innodb page大约是16k，所以行大小限制为(16k - page header- page trailer) / 2。如果行中有可变长度字段(blob/text/varchar)，并且整行大小超过行大小限制，InnoDB会将字段其余数据页外存储(off-page)。这种情况下(Redundant或Compact)，每个可变长度字段(blob/text/varchar)的前768字节存储在innodb page内的行中，其余部分存储在页外。</p>\n<blockquote>\n<p>导致innodb的1118错误的原因：1、多个可变长度字段；2、每个字段的值超过768(不是定义的字段大小，而是字段值的大小)；3、innodb引擎不是在定义表的时候判断，而是每次插入操作的时候判断。</p>\n</blockquote>\n<p>Barracuda格式的innodb引擎，当ROW_FORMAT设置为DYNAMIC只使用一个20字节的指针作为可变长度类型，并且优先选择较小的字段存储在innodb page上。并且可以给blob增加前缀索引(prefix index)，将前缀索引建立在page外的blob上而不是page内。ROW_FORMAT设置为COMPRESSED时，innodb引擎的对可变长度字段的存储策略类似，并且总是压缩不在page内的数据，即使没有设置KEY_BLOCK_SIZE，也没有启用正常数据和索引的压缩。</p>\n<p>innodb在存储blob时，page内部和外部的blob其实时不共享的。每个blob在页外都有16k分配，即使blob只有1个字节大小。如果每行有多个blob，可能会导致数据库效率比较低。所以最好是一行只定义一个blob来组合数据，并且压缩改数据，text类型同理</p>\n<p>==解决方案==</p>\n<h3 id=\"解决方案1-–-Dynamic\"><a href=\"#解决方案1-–-Dynamic\" class=\"headerlink\" title=\"解决方案1 – Dynamic\"></a>解决方案1 – Dynamic</h3><p>将innodb引擎的文件格式设置为Barracuda，并且将行格式设置为DYNAMIC。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_file_format=Barracuda;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案2-–-Compressed\"><a href=\"#解决方案2-–-Compressed\" class=\"headerlink\" title=\"解决方案2 – Compressed\"></a>解决方案2 – Compressed</h3><p>将innodb引擎的文件格式设置为Barracuda，将行格式设置为COMPRESSED，并且设置缓冲池索引块大小。一般压缩效果明显，压缩率在30%-40%左右，但是会影响存储效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_file_format=Barracuda;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE [tableName] ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8，</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案3-–-单表一文件\"><a href=\"#解决方案3-–-单表一文件\" class=\"headerlink\" title=\"解决方案3 – 单表一文件\"></a>解决方案3 – 单表一文件</h3><p>每张表一个文件，不建议使用。对于单行多可变长度字段的表，效果可以，但是对于其他表浪费存储空间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">innodb_file_format=Barracuda</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_file_per_table=1</span><br></pre></td></tr></table></figure></p>"},{"title":"crontab 无运行日志文件或不按时执行","date":"2015-10-03T03:42:44.000Z","_content":"\n### Centos7 crontab 没有按时执行任务，并且在/var/log/ 没有cron日志文件\n\n\n- 1.没有日志文件解决方法：\n```$xslt\n# yum install rsyslog \n```\n\n\n- 2.没有按时执行解决方法：\n```$xslt\n\n# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n//然后重启下面服务 \n\n# service crond restart\n# service rsyslog restart\n\n```\n\n","source":"_posts/crontab-run-error-time.md","raw":"---\ntitle: crontab 无运行日志文件或不按时执行\ndate: 2015-10-03 11:42:44\ntags:\n  - crond\ncategories:\n  - linux\n---\n\n### Centos7 crontab 没有按时执行任务，并且在/var/log/ 没有cron日志文件\n\n\n- 1.没有日志文件解决方法：\n```$xslt\n# yum install rsyslog \n```\n\n\n- 2.没有按时执行解决方法：\n```$xslt\n\n# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n//然后重启下面服务 \n\n# service crond restart\n# service rsyslog restart\n\n```\n\n","slug":"crontab-run-error-time","published":1,"updated":"2019-03-29T10:32:44.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987gz00010641xcudnch1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"Centos7-crontab-没有按时执行任务，并且在-var-log-没有cron日志文件\"><a href=\"#Centos7-crontab-没有按时执行任务，并且在-var-log-没有cron日志文件\" class=\"headerlink\" title=\"Centos7 crontab 没有按时执行任务，并且在/var/log/ 没有cron日志文件\"></a>Centos7 crontab 没有按时执行任务，并且在/var/log/ 没有cron日志文件</h3><ul>\n<li><p>1.没有日志文件解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install rsyslog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.没有按时执行解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\">//然后重启下面服务 </span><br><span class=\"line\"></span><br><span class=\"line\"># service crond restart</span><br><span class=\"line\"># service rsyslog restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Centos7-crontab-没有按时执行任务，并且在-var-log-没有cron日志文件\"><a href=\"#Centos7-crontab-没有按时执行任务，并且在-var-log-没有cron日志文件\" class=\"headerlink\" title=\"Centos7 crontab 没有按时执行任务，并且在/var/log/ 没有cron日志文件\"></a>Centos7 crontab 没有按时执行任务，并且在/var/log/ 没有cron日志文件</h3><ul>\n<li><p>1.没有日志文件解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install rsyslog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.没有按时执行解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\">//然后重启下面服务 </span><br><span class=\"line\"></span><br><span class=\"line\"># service crond restart</span><br><span class=\"line\"># service rsyslog restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Linux docker 搭建禅道","date":"2017-01-13T16:00:00.000Z","_content":"\n### 一、下载地址\n\n禅道开源版：http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip\n\n数据库用户名：root,默认密码： 123456。运行时，可以设置 MYSQL_ROOT_PASSWORD变量来更改密码。\n\n可挂载目录\n\n/app/zentaopms:该目录为禅道目录，里面包含禅道代码及附件上传目录。\n\n/var/lib/mysql:该目录为数据库的数据目录。\n\n### 二、安装使用\n<span style=\"color:red\">注意：需要关闭下selinux </span>\n<!--more-->\n1、构建镜像\n\n下载安装包，解压缩。 进入docker_zentao目录，执行命令 docker build -t [镜像名称] [Dockerfile所在目录]\n```$xslt\ndocker build -t zentao ./\n```\n2、运行镜像\n```$xslt\ndocker run --name [容器名称] -p [主机端口]:80 -v [主机代码目录]:/app/zentaopms -v [主机数据目录]:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=[数据库密码] -d [镜像名]:latest\n```\n例如\n创建 /data/www /data/data 目录。\n\n执行命令：\n```$xslt\ndocker run --name zentao -p 80:80 -v /data/www:/app/zentaopms -v /data/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d zentao:latest\n运行成功\n```\n\n3、安装禅道\n\n浏览器访问 http://ip，显示禅道安装页面，安装禅道。\n\n[原文参考](https://www.zentao.net/download/80098.html)","source":"_posts/Linux-docker-chandao.md","raw":"---\ntitle: Linux docker 搭建禅道\ndate: 2017-01-14\ntags:\n - 禅道\ncategories:\n - linux\n\n \n---\n\n### 一、下载地址\n\n禅道开源版：http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip\n\n数据库用户名：root,默认密码： 123456。运行时，可以设置 MYSQL_ROOT_PASSWORD变量来更改密码。\n\n可挂载目录\n\n/app/zentaopms:该目录为禅道目录，里面包含禅道代码及附件上传目录。\n\n/var/lib/mysql:该目录为数据库的数据目录。\n\n### 二、安装使用\n<span style=\"color:red\">注意：需要关闭下selinux </span>\n<!--more-->\n1、构建镜像\n\n下载安装包，解压缩。 进入docker_zentao目录，执行命令 docker build -t [镜像名称] [Dockerfile所在目录]\n```$xslt\ndocker build -t zentao ./\n```\n2、运行镜像\n```$xslt\ndocker run --name [容器名称] -p [主机端口]:80 -v [主机代码目录]:/app/zentaopms -v [主机数据目录]:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=[数据库密码] -d [镜像名]:latest\n```\n例如\n创建 /data/www /data/data 目录。\n\n执行命令：\n```$xslt\ndocker run --name zentao -p 80:80 -v /data/www:/app/zentaopms -v /data/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d zentao:latest\n运行成功\n```\n\n3、安装禅道\n\n浏览器访问 http://ip，显示禅道安装页面，安装禅道。\n\n[原文参考](https://www.zentao.net/download/80098.html)","slug":"Linux-docker-chandao","published":1,"updated":"2019-03-25T11:45:57.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987h300040641bkch2uiw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"一、下载地址\"><a href=\"#一、下载地址\" class=\"headerlink\" title=\"一、下载地址\"></a>一、下载地址</h3><p>禅道开源版：<a href=\"http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip\" target=\"_blank\" rel=\"noopener\">http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip</a></p>\n<p>数据库用户名：root,默认密码： 123456。运行时，可以设置 MYSQL_ROOT_PASSWORD变量来更改密码。</p>\n<p>可挂载目录</p>\n<p>/app/zentaopms:该目录为禅道目录，里面包含禅道代码及附件上传目录。</p>\n<p>/var/lib/mysql:该目录为数据库的数据目录。</p>\n<h3 id=\"二、安装使用\"><a href=\"#二、安装使用\" class=\"headerlink\" title=\"二、安装使用\"></a>二、安装使用</h3><p><span style=\"color:red\">注意：需要关闭下selinux </span><br><a id=\"more\"></a><br>1、构建镜像</p>\n<p>下载安装包，解压缩。 进入docker_zentao目录，执行命令 docker build -t [镜像名称] [Dockerfile所在目录]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t zentao ./</span><br></pre></td></tr></table></figure></p>\n<p>2、运行镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name [容器名称] -p [主机端口]:80 -v [主机代码目录]:/app/zentaopms -v [主机数据目录]:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=[数据库密码] -d [镜像名]:latest</span><br></pre></td></tr></table></figure></p>\n<p>例如<br>创建 /data/www /data/data 目录。</p>\n<p>执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name zentao -p 80:80 -v /data/www:/app/zentaopms -v /data/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d zentao:latest</span><br><span class=\"line\">运行成功</span><br></pre></td></tr></table></figure></p>\n<p>3、安装禅道</p>\n<p>浏览器访问 <a href=\"http://ip，显示禅道安装页面，安装禅道。\" target=\"_blank\" rel=\"noopener\">http://ip，显示禅道安装页面，安装禅道。</a></p>\n<p><a href=\"https://www.zentao.net/download/80098.html\" target=\"_blank\" rel=\"noopener\">原文参考</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、下载地址\"><a href=\"#一、下载地址\" class=\"headerlink\" title=\"一、下载地址\"></a>一、下载地址</h3><p>禅道开源版：<a href=\"http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip\" target=\"_blank\" rel=\"noopener\">http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip</a></p>\n<p>数据库用户名：root,默认密码： 123456。运行时，可以设置 MYSQL_ROOT_PASSWORD变量来更改密码。</p>\n<p>可挂载目录</p>\n<p>/app/zentaopms:该目录为禅道目录，里面包含禅道代码及附件上传目录。</p>\n<p>/var/lib/mysql:该目录为数据库的数据目录。</p>\n<h3 id=\"二、安装使用\"><a href=\"#二、安装使用\" class=\"headerlink\" title=\"二、安装使用\"></a>二、安装使用</h3><p><span style=\"color:red\">注意：需要关闭下selinux </span><br>","more":"<br>1、构建镜像</p>\n<p>下载安装包，解压缩。 进入docker_zentao目录，执行命令 docker build -t [镜像名称] [Dockerfile所在目录]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t zentao ./</span><br></pre></td></tr></table></figure></p>\n<p>2、运行镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name [容器名称] -p [主机端口]:80 -v [主机代码目录]:/app/zentaopms -v [主机数据目录]:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=[数据库密码] -d [镜像名]:latest</span><br></pre></td></tr></table></figure></p>\n<p>例如<br>创建 /data/www /data/data 目录。</p>\n<p>执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name zentao -p 80:80 -v /data/www:/app/zentaopms -v /data/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d zentao:latest</span><br><span class=\"line\">运行成功</span><br></pre></td></tr></table></figure></p>\n<p>3、安装禅道</p>\n<p>浏览器访问 <a href=\"http://ip，显示禅道安装页面，安装禅道。\" target=\"_blank\" rel=\"noopener\">http://ip，显示禅道安装页面，安装禅道。</a></p>\n<p><a href=\"https://www.zentao.net/download/80098.html\" target=\"_blank\" rel=\"noopener\">原文参考</a></p>"},{"title":"MacBook brew yaf error: unknown type name 'HASHKIT_API'","date":"2018-07-31T11:47:18.000Z","_content":"\n问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name 'HASHKIT_API'\n\n<!--more-->\n```$xslt\n\\h:\\W \\u$ brew install php70-yaf\n==> Installing php70-yaf from homebrew/php\n==> Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gz\nAlready downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz\n==> /usr/local/opt/php70/bin/phpize\n==> ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config\n==> make\nLast 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:\n/usr/local/include/string.h:56:1: error: unknown type name 'HASHKIT_API'\nHASHKIT_API\n^\n/usr/local/include/string.h:57:1: error: expected identifier or '('\nconst char *hashkit_string_c_str(const hashkit_string_st* self);\n^\n6 errors generated.\nmake: *** [yaf_bootstrap.lo] Error 1\nmake: *** Waiting for unfinished jobs....\n6 errors generated.\nmake: *** [yaf.lo] Error 1\n6 errors generated.\nmake: *** [yaf_application.lo] Error 1\n6 errors generated.\nmake: *** [yaf_dispatcher.lo] Error 1\n\n```\n\n====> 解决方法：\n找到/usr/local/include/string.h 注释调和'HASHKIT_API有关的代码；\n\n```$xslt\n/*=============================20180314 解决yaf 装不上的问题，注释\n#HASHKIT_API\nvoid hashkit_string_free(hashkit_string_st *ptr);\n\n#HASHKIT_API\nsize_t hashkit_string_length(const hashkit_string_st *self);\n\n#HASHKIT_API\nconst char *hashkit_string_c_str(const hashkit_string_st* self);\n\n#================================================================\n*/\n```\n\n\n补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错；\n\n\n```$xslt\n>>> nginx 报错：\n     2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: \"GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"www.cloudins.com\"\n\n>>>php-fpm报错:\n\n[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593\n[16-Mar-2018 12:21:27] NOTICE: ready to handle connections\n[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start\n[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started\n[16-Mar-2018 14:10:02] NOTICE: Finishing ...\n[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye!\n\n```\n\n后来发现不只是安装yaf会保这个错，安装一些其他的服务也会报这个错，\n##### 解决方法：\n``` \n把/usr/local/include 临时改为 :/usr/local/include_bak\n```\n\n\n\n结论：\n```\n这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；\n后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;\n我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；\n\n```\n\n","source":"_posts/brew-yaf-error-unknown-type-name-HASHKIT-API.md","raw":"---\ntitle: 'MacBook brew yaf error: unknown type name ''HASHKIT_API'''\ndate: 2018-07-31 19:47:18\ntags:\n - mac\ncategories:\n - php \n \n---\n\n问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name 'HASHKIT_API'\n\n<!--more-->\n```$xslt\n\\h:\\W \\u$ brew install php70-yaf\n==> Installing php70-yaf from homebrew/php\n==> Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gz\nAlready downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz\n==> /usr/local/opt/php70/bin/phpize\n==> ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config\n==> make\nLast 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:\n/usr/local/include/string.h:56:1: error: unknown type name 'HASHKIT_API'\nHASHKIT_API\n^\n/usr/local/include/string.h:57:1: error: expected identifier or '('\nconst char *hashkit_string_c_str(const hashkit_string_st* self);\n^\n6 errors generated.\nmake: *** [yaf_bootstrap.lo] Error 1\nmake: *** Waiting for unfinished jobs....\n6 errors generated.\nmake: *** [yaf.lo] Error 1\n6 errors generated.\nmake: *** [yaf_application.lo] Error 1\n6 errors generated.\nmake: *** [yaf_dispatcher.lo] Error 1\n\n```\n\n====> 解决方法：\n找到/usr/local/include/string.h 注释调和'HASHKIT_API有关的代码；\n\n```$xslt\n/*=============================20180314 解决yaf 装不上的问题，注释\n#HASHKIT_API\nvoid hashkit_string_free(hashkit_string_st *ptr);\n\n#HASHKIT_API\nsize_t hashkit_string_length(const hashkit_string_st *self);\n\n#HASHKIT_API\nconst char *hashkit_string_c_str(const hashkit_string_st* self);\n\n#================================================================\n*/\n```\n\n\n补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错；\n\n\n```$xslt\n>>> nginx 报错：\n     2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: \"GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"www.cloudins.com\"\n\n>>>php-fpm报错:\n\n[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593\n[16-Mar-2018 12:21:27] NOTICE: ready to handle connections\n[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start\n[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started\n[16-Mar-2018 14:10:02] NOTICE: Finishing ...\n[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye!\n\n```\n\n后来发现不只是安装yaf会保这个错，安装一些其他的服务也会报这个错，\n##### 解决方法：\n``` \n把/usr/local/include 临时改为 :/usr/local/include_bak\n```\n\n\n\n结论：\n```\n这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；\n后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;\n我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；\n\n```\n\n","slug":"brew-yaf-error-unknown-type-name-HASHKIT-API","published":1,"updated":"2019-03-25T11:45:57.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987h500050641lyr6u5a1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name ‘HASHKIT_API’</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\h:\\W \\u$ brew install php70-yaf</span><br><span class=\"line\">==&gt; Installing php70-yaf from homebrew/php</span><br><span class=\"line\">==&gt; Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gz</span><br><span class=\"line\">Already downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz</span><br><span class=\"line\">==&gt; /usr/local/opt/php70/bin/phpize</span><br><span class=\"line\">==&gt; ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config</span><br><span class=\"line\">==&gt; make</span><br><span class=\"line\">Last 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:</span><br><span class=\"line\">/usr/local/include/string.h:56:1: error: unknown type name &apos;HASHKIT_API&apos;</span><br><span class=\"line\">HASHKIT_API</span><br><span class=\"line\">^</span><br><span class=\"line\">/usr/local/include/string.h:57:1: error: expected identifier or &apos;(&apos;</span><br><span class=\"line\">const char *hashkit_string_c_str(const hashkit_string_st* self);</span><br><span class=\"line\">^</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf_bootstrap.lo] Error 1</span><br><span class=\"line\">make: *** Waiting for unfinished jobs....</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf.lo] Error 1</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf_application.lo] Error 1</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf_dispatcher.lo] Error 1</span><br></pre></td></tr></table></figure>\n<p>====&gt; 解决方法：<br>找到/usr/local/include/string.h 注释调和’HASHKIT_API有关的代码；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*=============================20180314 解决yaf 装不上的问题，注释</span><br><span class=\"line\">#HASHKIT_API</span><br><span class=\"line\">void hashkit_string_free(hashkit_string_st *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">#HASHKIT_API</span><br><span class=\"line\">size_t hashkit_string_length(const hashkit_string_st *self);</span><br><span class=\"line\"></span><br><span class=\"line\">#HASHKIT_API</span><br><span class=\"line\">const char *hashkit_string_c_str(const hashkit_string_st* self);</span><br><span class=\"line\"></span><br><span class=\"line\">#================================================================</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; nginx 报错：</span><br><span class=\"line\">     2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: &quot;GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;, host: &quot;www.cloudins.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;php-fpm报错:</span><br><span class=\"line\"></span><br><span class=\"line\">[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593</span><br><span class=\"line\">[16-Mar-2018 12:21:27] NOTICE: ready to handle connections</span><br><span class=\"line\">[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start</span><br><span class=\"line\">[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started</span><br><span class=\"line\">[16-Mar-2018 14:10:02] NOTICE: Finishing ...</span><br><span class=\"line\">[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye!</span><br></pre></td></tr></table></figure>\n<p>后来发现不只是安装yaf会保这个错，安装一些其他的服务也会报这个错，</p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把/usr/local/include 临时改为 :/usr/local/include_bak</span><br></pre></td></tr></table></figure>\n<p>结论：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；</span><br><span class=\"line\">后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;</span><br><span class=\"line\">我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>问题：在 mac 系统中安装 PHP yaf 扩展时，总是失败；报错：error: unknown type name ‘HASHKIT_API’</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\h:\\W \\u$ brew install php70-yaf</span><br><span class=\"line\">==&gt; Installing php70-yaf from homebrew/php</span><br><span class=\"line\">==&gt; Downloading https://github.com/laruence/yaf/archive/yaf-3.0.3.tar.gz</span><br><span class=\"line\">Already downloaded: /Users/liuqh/Library/Caches/Homebrew/php70-yaf-3.0.3.tar.gz</span><br><span class=\"line\">==&gt; /usr/local/opt/php70/bin/phpize</span><br><span class=\"line\">==&gt; ./configure --prefix=/usr/local/Cellar/php70-yaf/3.0.3 --with-php-config=/usr/local/opt/php70/bin/php-config</span><br><span class=\"line\">==&gt; make</span><br><span class=\"line\">Last 15 lines from /Users/liuqh/Library/Logs/Homebrew/php70-yaf/03.make:</span><br><span class=\"line\">/usr/local/include/string.h:56:1: error: unknown type name &apos;HASHKIT_API&apos;</span><br><span class=\"line\">HASHKIT_API</span><br><span class=\"line\">^</span><br><span class=\"line\">/usr/local/include/string.h:57:1: error: expected identifier or &apos;(&apos;</span><br><span class=\"line\">const char *hashkit_string_c_str(const hashkit_string_st* self);</span><br><span class=\"line\">^</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf_bootstrap.lo] Error 1</span><br><span class=\"line\">make: *** Waiting for unfinished jobs....</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf.lo] Error 1</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf_application.lo] Error 1</span><br><span class=\"line\">6 errors generated.</span><br><span class=\"line\">make: *** [yaf_dispatcher.lo] Error 1</span><br></pre></td></tr></table></figure>\n<p>====&gt; 解决方法：<br>找到/usr/local/include/string.h 注释调和’HASHKIT_API有关的代码；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*=============================20180314 解决yaf 装不上的问题，注释</span><br><span class=\"line\">#HASHKIT_API</span><br><span class=\"line\">void hashkit_string_free(hashkit_string_st *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">#HASHKIT_API</span><br><span class=\"line\">size_t hashkit_string_length(const hashkit_string_st *self);</span><br><span class=\"line\"></span><br><span class=\"line\">#HASHKIT_API</span><br><span class=\"line\">const char *hashkit_string_c_str(const hashkit_string_st* self);</span><br><span class=\"line\"></span><br><span class=\"line\">#================================================================</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>补充：以上的解决方法有问题，虽然 phpinfo 能显示 yaf 扩展；但是实际使用中会报错；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; nginx 报错：</span><br><span class=\"line\">     2018/03/16 12:01:44 [error] 4965#0: *25 kevent() reported about an closed connection (54: Connection reset by peer) while reading response header from upstream, client: 127.0.0.1, server: 127.0.0.1, request: &quot;GET /test/lqh/test?XDEBUG_SESSION_START=19833 HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;, host: &quot;www.cloudins.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;php-fpm报错:</span><br><span class=\"line\"></span><br><span class=\"line\">[16-Mar-2018 12:21:27] NOTICE: fpm is running, pid 6593</span><br><span class=\"line\">[16-Mar-2018 12:21:27] NOTICE: ready to handle connections</span><br><span class=\"line\">[16-Mar-2018 12:22:01] WARNING: [pool www] child 6594 exited on signal 11 (SIGSEGV) after 34.532384 seconds from start</span><br><span class=\"line\">[16-Mar-2018 12:22:01] NOTICE: [pool www] child 6602 started</span><br><span class=\"line\">[16-Mar-2018 14:10:02] NOTICE: Finishing ...</span><br><span class=\"line\">[16-Mar-2018 14:10:02] NOTICE: exiting, bye-bye!</span><br></pre></td></tr></table></figure>\n<p>后来发现不只是安装yaf会保这个错，安装一些其他的服务也会报这个错，</p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把/usr/local/include 临时改为 :/usr/local/include_bak</span><br></pre></td></tr></table></figure>\n<p>结论：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些错误信息各种 google，都没有对应的解决方案，只是遇到同样问题的人；</span><br><span class=\"line\">后来最后的解决方法是从同事电脑 （MacBook Pro）brew安装好的包直接引入;</span><br><span class=\"line\">我的电脑是（MacBook），个人猜测是电脑系统（/usr/local/include）中文件的问题，因为我发现MacBook Pro该目录中没有这些文件；</span><br></pre></td></tr></table></figure></p>"},{"title":"fatal: Pathspec 'xxx' is in submodule for php yaf vendor","date":"2018-08-13T03:33:58.000Z","_content":"### 使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。\n\n\n使用git status查看，没有任何提交，后手动删除重新copy了文件，再次使用git status：\n\n```\nmodified: vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php (modified content)\n```\n\ngit add后只增加了文件夹，但是没有文件。\n手动Add: \n```\ngit vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php\n\n报出错误信息： \nfatal: Pathspec 'xxx' is in submodule\n\n```\n<!--more-->\n### 解决方法\n- 发现vendor/phpgangsta/googleauthenticator/PHPGangsta/下 有.git文件 \n-  所以使用下面命令： \n```\ngit rm -rf --cached vendor/phpgangsta/googleauthenticator/PHPGangsta\ngit add vendor/phpgangsta/*\n```\n然后正常提交。","source":"_posts/fatal-Pathspec-xxx-is-in-submodule-for-php-yaf-vendor.md","raw":"---\ntitle: 'fatal: Pathspec ''xxx'' is in submodule for php yaf vendor'\ndate: 2018-08-13 11:33:58\ntags:\n - php\n - yaf\ncategories:\n - git\n---\n### 使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。\n\n\n使用git status查看，没有任何提交，后手动删除重新copy了文件，再次使用git status：\n\n```\nmodified: vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php (modified content)\n```\n\ngit add后只增加了文件夹，但是没有文件。\n手动Add: \n```\ngit vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php\n\n报出错误信息： \nfatal: Pathspec 'xxx' is in submodule\n\n```\n<!--more-->\n### 解决方法\n- 发现vendor/phpgangsta/googleauthenticator/PHPGangsta/下 有.git文件 \n-  所以使用下面命令： \n```\ngit rm -rf --cached vendor/phpgangsta/googleauthenticator/PHPGangsta\ngit add vendor/phpgangsta/*\n```\n然后正常提交。","slug":"fatal-Pathspec-xxx-is-in-submodule-for-php-yaf-vendor","published":1,"updated":"2019-03-25T11:45:57.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987h6000606415v64fw7f","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git-add。\"><a href=\"#使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git-add。\" class=\"headerlink\" title=\"使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。\"></a>使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。</h3><p>使用git status查看，没有任何提交，后手动删除重新copy了文件，再次使用git status：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modified: vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php (modified content)</span><br></pre></td></tr></table></figure>\n<p>git add后只增加了文件夹，但是没有文件。<br>手动Add:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php</span><br><span class=\"line\"></span><br><span class=\"line\">报出错误信息： </span><br><span class=\"line\">fatal: Pathspec &apos;xxx&apos; is in submodule</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>发现vendor/phpgangsta/googleauthenticator/PHPGangsta/下 有.git文件 </li>\n<li>所以使用下面命令： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -rf --cached vendor/phpgangsta/googleauthenticator/PHPGangsta</span><br><span class=\"line\">git add vendor/phpgangsta/*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后正常提交。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git-add。\"><a href=\"#使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git-add。\" class=\"headerlink\" title=\"使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。\"></a>使用YAF进行项目开发，在手动更新vendor的时候发现更新以后无法git add。</h3><p>使用git status查看，没有任何提交，后手动删除重新copy了文件，再次使用git status：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modified: vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php (modified content)</span><br></pre></td></tr></table></figure>\n<p>git add后只增加了文件夹，但是没有文件。<br>手动Add:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git vendor/phpgangsta/googleauthenticator/PHPGangsta/GoogleAuthenticator.php</span><br><span class=\"line\"></span><br><span class=\"line\">报出错误信息： </span><br><span class=\"line\">fatal: Pathspec &apos;xxx&apos; is in submodule</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>发现vendor/phpgangsta/googleauthenticator/PHPGangsta/下 有.git文件 </li>\n<li>所以使用下面命令： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -rf --cached vendor/phpgangsta/googleauthenticator/PHPGangsta</span><br><span class=\"line\">git add vendor/phpgangsta/*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后正常提交。</p>"},{"title":"PHP并发请求","date":"2019-03-22T04:19:23.000Z","_content":"\n> <front color=\"red\">进程是资源分配的最小单位，线程是CPU调度的最小单位</front>\n\n## 1. 多线程并发:通过cURL并发请求  \n### 1.1 通过curl_multi实现\n[PHP cURL所有函数列表](https://secure.php.net/manual/zh/ref.curl.php)\n\n**并发中用的curl_multi_\\*相关函数**\n- [curl_multi_add_handle](https://php.net/manual/zh/function.curl-multi-add-handle.php)— 向curl批处理会话中添加单独的curl句柄\n- [curl_multi_close](https://secure.php.net/manual/zh/function.curl-multi-close.php) — 关闭一组cURL句柄\n- [curl_multi_exec](https://secure.php.net/manual/zh/function.curl-multi-exec.php) — 运行当前 cURL 句柄的子连接\n- [curl_multi_getcontent](https://secure.php.net/manual/zh/function.curl-multi-getcontent.php) — 如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流\n- [curl_multi_info_read](https://secure.php.net/manual/zh/function.curl-multi-info-read.php) — 获取当前解析的cURL的相关传输信息\n- [curl_multi_init](https://secure.php.net/manual/zh/function.curl-multi-init.php) — 返回一个新cURL批处理句柄\n- [curl_multi_remove_handle](curl_multi_remove_handle) — 移除curl批处理句柄资源中的某个句柄资源\n- [curl_multi_select](https://secure.php.net/manual/zh/function.curl-multi-select.php) — 等待所有cURL批处理中的活动连接\n- [curl_multi_setopt](https://secure.php.net/manual/zh/function.curl-multi-setopt.php) — 为 cURL 并行处理设置一个选项\n- [curl_multi_strerror](https://php.net/manual/zh/function.curl-multi-strerror.php) — 返回字符串描述的错误代码\n<!--more-->\n\n### 1.2 PHP curl_multi 实现并发请求步骤\n\n1. 调用 curl_multi_init，初始化一个批处理handle\n2. 循环调用 curl_multi_add_handle，往1中的批处理handle 添加curl_init来的子handle\n3. 持续调用 curl_multi_exec，直到所有子handle执行完毕。\n4. 根据需要循环调用 curl_multi_getcontent 获取结果\n5. 调用 curl_multi_remove_handle，并为每个字handle调用curl_close\n6. 调用 curl_multi_close\n\n### 1.3 PHP curl_multi 实现代码\n```php\n<?php\n\n    /**\n     *  Functional description : \n     *  Programmer : Mr.Liu\n     * @param array $urls\n     *  $urls = [\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n      ];\n     * @return array\n     */\n    function multiGetRequest(array $urls):array \n    {\n\n        //1、初始化一个批处理handle\n        $mh = curl_multi_init();\n\n        //2、往批处理handle 添加curl_init来的子handle\n        foreach ($urls as $i => $url) {\n            $connect[$i] = curl_init($url);\n            curl_setopt($connect[$i], CURLOPT_HEADER, 0);\n            curl_setopt($connect[$i], CURLOPT_CONNECTTIMEOUT, 60);\n            curl_setopt($connect[$i], CURLOPT_RETURNTRANSFER, true);\n            curl_multi_add_handle($mh, $connect[$i]);\n        }\n\n        //3、并发执行，直到全部结束。\n        do {\n            curl_multi_exec($mh, $active);\n        } while ($active);\n\n        //4、获取结果\n        $return=[];\n        foreach ($urls as $i => $url) {\n            $return[] = curl_multi_getcontent($connect[$i]);\n\n        }\n        //5、移除子handle，并close子handle\n        foreach ($urls as $i => $url) {\n            curl_multi_remove_handle($mh, $connect[$i]);\n            curl_close($connect[$i]);\n        }\n\n        //6、关闭批处理handle\n        curl_multi_close($mh);\n        return $return;\n    }\n```\n\n## 2. 多进程并发：通过swoole_process实现\n[查看文档](https://wiki.swoole.com/wiki/page/214.html)\n\n### 2.1 示例代码\n```php\n<?php\n\n$start_time = microtime(true);\n$urls       = [\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n];\n\n//遍历任务创建子进程\nforeach ($urls as $url) {\n    /**\n     * 创建子进程，并调用方法 my_process\n     */\n    $process = new swoole_process(\"my_process\", true);\n\n    /**\n     * 1.执行fork系统调用，启动进程;\n     * 创建成功返回子进程的PID，创建失败返回false\n     */\n    $process->start();\n    /**\n     * 通过管道发数据到子进程。\n     * 管道是单向的：发出的数据必须由另一端读取。不能读取自己发出去的\n     */\n    $process->write($url);\n\n    /**\n     * 保存进程,循环结算后统一调取返回数数据：\n     */\n    $process_list[] = $process;\n\n}\n//读取结果\nforeach ($process_list as $process){\n    //从管道中读取数据。\n    echo $rec = $process->read();\n}\n\n/**\n * 子进程结束必须要执行wait进行回收，否则子进程会变成僵尸进程\n * $ret 是个数组其数据结构：\n   array(3) {\n    'pid' =>\n    int(461)\n    'code' =>\n    int(0)\n    'signal' =>\n    int(0)\n }\n*/\nwhile ($ret = swoole_process::wait()) {\n    $pid = $ret['pid'];\n    echo PHP_EOL . \"Worker Exit, PID=\" . $pid . PHP_EOL;\n}\n\n\n//子进程创建成功后要执行的函数\nfunction my_process(swoole_process $worker)\n{\n    sleep(1);//暂停1s\n    $url    = $worker->read();\n    //---- 执行具体业务程序开始-----\n    $ch = curl_init();\n    // 设置URL和相应的选项\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    // 抓取URL并把它传递给浏览器\n    $return =  curl_exec($ch);\n    // 关闭cURL资源，并且释放系统资源\n    curl_close($ch);\n    //---- 执行具体业务程序结束-----\n    $worker->write($return);//写入数据到管道\n}\n$end_time = microtime(true);\necho sprintf(\"use time:%.3f s\\n\", $end_time - $start_time);\n\n```\n\n\n## 3. 多进程和多线程的区别？如何选择\n### 3.1 不同的维度的对比\n\n| 对比维度 | 多进程 | 多线程 |总结|\n| ------ | ------ | ------ | ------ |\n| 数据共享、同步 | 数据共享复杂，需要用IPC；数据是分开的，同步简单 | 因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂 | 各有优势|\n| 内存、CPU | 占用内存多，切换复杂，CPU利用率低 | 占用内存少，切换简单，CPU利用率高 |线程占优|\n| 创建销毁、切换 | 创建销毁、切换复杂，速度慢 | 创建销毁、切换简单，速度很快 |线程占优|\n| 编程、调试 | 编程简单，调试简单 | 编程复杂，调试复杂 |进程占优|\n| 可靠性 | 进程间不会互相影响 | 一个线程挂掉将导致整个进程挂掉 |进程占优|\n| 分布式 | 适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单 | 适应于多核分布式 |进程占优|\n\n[如何选择?](https://blog.csdn.net/lishenglong666/article/details/8557215)","source":"_posts/multiRequest.md","raw":"---\ntitle: PHP并发请求\ndate: 2019-03-22 12:19:23\ntags:\n - php\ncategories:\n - 并发\n---\n\n> <front color=\"red\">进程是资源分配的最小单位，线程是CPU调度的最小单位</front>\n\n## 1. 多线程并发:通过cURL并发请求  \n### 1.1 通过curl_multi实现\n[PHP cURL所有函数列表](https://secure.php.net/manual/zh/ref.curl.php)\n\n**并发中用的curl_multi_\\*相关函数**\n- [curl_multi_add_handle](https://php.net/manual/zh/function.curl-multi-add-handle.php)— 向curl批处理会话中添加单独的curl句柄\n- [curl_multi_close](https://secure.php.net/manual/zh/function.curl-multi-close.php) — 关闭一组cURL句柄\n- [curl_multi_exec](https://secure.php.net/manual/zh/function.curl-multi-exec.php) — 运行当前 cURL 句柄的子连接\n- [curl_multi_getcontent](https://secure.php.net/manual/zh/function.curl-multi-getcontent.php) — 如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流\n- [curl_multi_info_read](https://secure.php.net/manual/zh/function.curl-multi-info-read.php) — 获取当前解析的cURL的相关传输信息\n- [curl_multi_init](https://secure.php.net/manual/zh/function.curl-multi-init.php) — 返回一个新cURL批处理句柄\n- [curl_multi_remove_handle](curl_multi_remove_handle) — 移除curl批处理句柄资源中的某个句柄资源\n- [curl_multi_select](https://secure.php.net/manual/zh/function.curl-multi-select.php) — 等待所有cURL批处理中的活动连接\n- [curl_multi_setopt](https://secure.php.net/manual/zh/function.curl-multi-setopt.php) — 为 cURL 并行处理设置一个选项\n- [curl_multi_strerror](https://php.net/manual/zh/function.curl-multi-strerror.php) — 返回字符串描述的错误代码\n<!--more-->\n\n### 1.2 PHP curl_multi 实现并发请求步骤\n\n1. 调用 curl_multi_init，初始化一个批处理handle\n2. 循环调用 curl_multi_add_handle，往1中的批处理handle 添加curl_init来的子handle\n3. 持续调用 curl_multi_exec，直到所有子handle执行完毕。\n4. 根据需要循环调用 curl_multi_getcontent 获取结果\n5. 调用 curl_multi_remove_handle，并为每个字handle调用curl_close\n6. 调用 curl_multi_close\n\n### 1.3 PHP curl_multi 实现代码\n```php\n<?php\n\n    /**\n     *  Functional description : \n     *  Programmer : Mr.Liu\n     * @param array $urls\n     *  $urls = [\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n            'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n      ];\n     * @return array\n     */\n    function multiGetRequest(array $urls):array \n    {\n\n        //1、初始化一个批处理handle\n        $mh = curl_multi_init();\n\n        //2、往批处理handle 添加curl_init来的子handle\n        foreach ($urls as $i => $url) {\n            $connect[$i] = curl_init($url);\n            curl_setopt($connect[$i], CURLOPT_HEADER, 0);\n            curl_setopt($connect[$i], CURLOPT_CONNECTTIMEOUT, 60);\n            curl_setopt($connect[$i], CURLOPT_RETURNTRANSFER, true);\n            curl_multi_add_handle($mh, $connect[$i]);\n        }\n\n        //3、并发执行，直到全部结束。\n        do {\n            curl_multi_exec($mh, $active);\n        } while ($active);\n\n        //4、获取结果\n        $return=[];\n        foreach ($urls as $i => $url) {\n            $return[] = curl_multi_getcontent($connect[$i]);\n\n        }\n        //5、移除子handle，并close子handle\n        foreach ($urls as $i => $url) {\n            curl_multi_remove_handle($mh, $connect[$i]);\n            curl_close($connect[$i]);\n        }\n\n        //6、关闭批处理handle\n        curl_multi_close($mh);\n        return $return;\n    }\n```\n\n## 2. 多进程并发：通过swoole_process实现\n[查看文档](https://wiki.swoole.com/wiki/page/214.html)\n\n### 2.1 示例代码\n```php\n<?php\n\n$start_time = microtime(true);\n$urls       = [\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n    'http://liuqinghui.dev.lywf.me/test/libin/ttt',\n];\n\n//遍历任务创建子进程\nforeach ($urls as $url) {\n    /**\n     * 创建子进程，并调用方法 my_process\n     */\n    $process = new swoole_process(\"my_process\", true);\n\n    /**\n     * 1.执行fork系统调用，启动进程;\n     * 创建成功返回子进程的PID，创建失败返回false\n     */\n    $process->start();\n    /**\n     * 通过管道发数据到子进程。\n     * 管道是单向的：发出的数据必须由另一端读取。不能读取自己发出去的\n     */\n    $process->write($url);\n\n    /**\n     * 保存进程,循环结算后统一调取返回数数据：\n     */\n    $process_list[] = $process;\n\n}\n//读取结果\nforeach ($process_list as $process){\n    //从管道中读取数据。\n    echo $rec = $process->read();\n}\n\n/**\n * 子进程结束必须要执行wait进行回收，否则子进程会变成僵尸进程\n * $ret 是个数组其数据结构：\n   array(3) {\n    'pid' =>\n    int(461)\n    'code' =>\n    int(0)\n    'signal' =>\n    int(0)\n }\n*/\nwhile ($ret = swoole_process::wait()) {\n    $pid = $ret['pid'];\n    echo PHP_EOL . \"Worker Exit, PID=\" . $pid . PHP_EOL;\n}\n\n\n//子进程创建成功后要执行的函数\nfunction my_process(swoole_process $worker)\n{\n    sleep(1);//暂停1s\n    $url    = $worker->read();\n    //---- 执行具体业务程序开始-----\n    $ch = curl_init();\n    // 设置URL和相应的选项\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    // 抓取URL并把它传递给浏览器\n    $return =  curl_exec($ch);\n    // 关闭cURL资源，并且释放系统资源\n    curl_close($ch);\n    //---- 执行具体业务程序结束-----\n    $worker->write($return);//写入数据到管道\n}\n$end_time = microtime(true);\necho sprintf(\"use time:%.3f s\\n\", $end_time - $start_time);\n\n```\n\n\n## 3. 多进程和多线程的区别？如何选择\n### 3.1 不同的维度的对比\n\n| 对比维度 | 多进程 | 多线程 |总结|\n| ------ | ------ | ------ | ------ |\n| 数据共享、同步 | 数据共享复杂，需要用IPC；数据是分开的，同步简单 | 因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂 | 各有优势|\n| 内存、CPU | 占用内存多，切换复杂，CPU利用率低 | 占用内存少，切换简单，CPU利用率高 |线程占优|\n| 创建销毁、切换 | 创建销毁、切换复杂，速度慢 | 创建销毁、切换简单，速度很快 |线程占优|\n| 编程、调试 | 编程简单，调试简单 | 编程复杂，调试复杂 |进程占优|\n| 可靠性 | 进程间不会互相影响 | 一个线程挂掉将导致整个进程挂掉 |进程占优|\n| 分布式 | 适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单 | 适应于多核分布式 |进程占优|\n\n[如何选择?](https://blog.csdn.net/lishenglong666/article/details/8557215)","slug":"multiRequest","published":1,"updated":"2019-03-25T11:45:57.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987h8000a064181ogb4b1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<front color=\"red\">进程是资源分配的最小单位，线程是CPU调度的最小单位</front>\n</blockquote>\n<h2 id=\"1-多线程并发-通过cURL并发请求\"><a href=\"#1-多线程并发-通过cURL并发请求\" class=\"headerlink\" title=\"1. 多线程并发:通过cURL并发请求\"></a>1. 多线程并发:通过cURL并发请求</h2><h3 id=\"1-1-通过curl-multi实现\"><a href=\"#1-1-通过curl-multi实现\" class=\"headerlink\" title=\"1.1 通过curl_multi实现\"></a>1.1 通过curl_multi实现</h3><p><a href=\"https://secure.php.net/manual/zh/ref.curl.php\" target=\"_blank\" rel=\"noopener\">PHP cURL所有函数列表</a></p>\n<p><strong>并发中用的curl_multi_*相关函数</strong></p>\n<ul>\n<li><a href=\"https://php.net/manual/zh/function.curl-multi-add-handle.php\" target=\"_blank\" rel=\"noopener\">curl_multi_add_handle</a>— 向curl批处理会话中添加单独的curl句柄</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-close.php\" target=\"_blank\" rel=\"noopener\">curl_multi_close</a> — 关闭一组cURL句柄</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-exec.php\" target=\"_blank\" rel=\"noopener\">curl_multi_exec</a> — 运行当前 cURL 句柄的子连接</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-getcontent.php\" target=\"_blank\" rel=\"noopener\">curl_multi_getcontent</a> — 如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-info-read.php\" target=\"_blank\" rel=\"noopener\">curl_multi_info_read</a> — 获取当前解析的cURL的相关传输信息</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-init.php\" target=\"_blank\" rel=\"noopener\">curl_multi_init</a> — 返回一个新cURL批处理句柄</li>\n<li><a href=\"curl_multi_remove_handle\">curl_multi_remove_handle</a> — 移除curl批处理句柄资源中的某个句柄资源</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-select.php\" target=\"_blank\" rel=\"noopener\">curl_multi_select</a> — 等待所有cURL批处理中的活动连接</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-setopt.php\" target=\"_blank\" rel=\"noopener\">curl_multi_setopt</a> — 为 cURL 并行处理设置一个选项</li>\n<li><a href=\"https://php.net/manual/zh/function.curl-multi-strerror.php\" target=\"_blank\" rel=\"noopener\">curl_multi_strerror</a> — 返回字符串描述的错误代码<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"1-2-PHP-curl-multi-实现并发请求步骤\"><a href=\"#1-2-PHP-curl-multi-实现并发请求步骤\" class=\"headerlink\" title=\"1.2 PHP curl_multi 实现并发请求步骤\"></a>1.2 PHP curl_multi 实现并发请求步骤</h3><ol>\n<li>调用 curl_multi_init，初始化一个批处理handle</li>\n<li>循环调用 curl_multi_add_handle，往1中的批处理handle 添加curl_init来的子handle</li>\n<li>持续调用 curl_multi_exec，直到所有子handle执行完毕。</li>\n<li>根据需要循环调用 curl_multi_getcontent 获取结果</li>\n<li>调用 curl_multi_remove_handle，并为每个字handle调用curl_close</li>\n<li>调用 curl_multi_close</li>\n</ol>\n<h3 id=\"1-3-PHP-curl-multi-实现代码\"><a href=\"#1-3-PHP-curl-multi-实现代码\" class=\"headerlink\" title=\"1.3 PHP curl_multi 实现代码\"></a>1.3 PHP curl_multi 实现代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : </span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $urls</span></span><br><span class=\"line\"><span class=\"comment\">     *  $urls = [</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">      ];</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiGetRequest</span><span class=\"params\">(array $urls)</span>:<span class=\"title\">array</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1、初始化一个批处理handle</span></span><br><span class=\"line\">        $mh = curl_multi_init();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2、往批处理handle 添加curl_init来的子handle</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $i =&gt; $url) &#123;</span><br><span class=\"line\">            $connect[$i] = curl_init($url);</span><br><span class=\"line\">            curl_setopt($connect[$i], CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">            curl_setopt($connect[$i], CURLOPT_CONNECTTIMEOUT, <span class=\"number\">60</span>);</span><br><span class=\"line\">            curl_setopt($connect[$i], CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            curl_multi_add_handle($mh, $connect[$i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3、并发执行，直到全部结束。</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            curl_multi_exec($mh, $active);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ($active);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4、获取结果</span></span><br><span class=\"line\">        $return=[];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $i =&gt; $url) &#123;</span><br><span class=\"line\">            $return[] = curl_multi_getcontent($connect[$i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//5、移除子handle，并close子handle</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $i =&gt; $url) &#123;</span><br><span class=\"line\">            curl_multi_remove_handle($mh, $connect[$i]);</span><br><span class=\"line\">            curl_close($connect[$i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//6、关闭批处理handle</span></span><br><span class=\"line\">        curl_multi_close($mh);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $return;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-多进程并发：通过swoole-process实现\"><a href=\"#2-多进程并发：通过swoole-process实现\" class=\"headerlink\" title=\"2. 多进程并发：通过swoole_process实现\"></a>2. 多进程并发：通过swoole_process实现</h2><p><a href=\"https://wiki.swoole.com/wiki/page/214.html\" target=\"_blank\" rel=\"noopener\">查看文档</a></p>\n<h3 id=\"2-1-示例代码\"><a href=\"#2-1-示例代码\" class=\"headerlink\" title=\"2.1 示例代码\"></a>2.1 示例代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$start_time = microtime(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">$urls       = [</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历任务创建子进程</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $url) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建子进程，并调用方法 my_process</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process = <span class=\"keyword\">new</span> swoole_process(<span class=\"string\">\"my_process\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.执行fork系统调用，启动进程;</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建成功返回子进程的PID，创建失败返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process-&gt;start();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过管道发数据到子进程。</span></span><br><span class=\"line\"><span class=\"comment\">     * 管道是单向的：发出的数据必须由另一端读取。不能读取自己发出去的</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process-&gt;write($url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存进程,循环结算后统一调取返回数数据：</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process_list[] = $process;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取结果</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($process_list <span class=\"keyword\">as</span> $process)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从管道中读取数据。</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $rec = $process-&gt;read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子进程结束必须要执行wait进行回收，否则子进程会变成僵尸进程</span></span><br><span class=\"line\"><span class=\"comment\"> * $ret 是个数组其数据结构：</span></span><br><span class=\"line\"><span class=\"comment\">   array(3) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    'pid' =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    int(461)</span></span><br><span class=\"line\"><span class=\"comment\">    'code' =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    int(0)</span></span><br><span class=\"line\"><span class=\"comment\">    'signal' =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    int(0)</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($ret = swoole_process::wait()) &#123;</span><br><span class=\"line\">    $pid = $ret[<span class=\"string\">'pid'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> PHP_EOL . <span class=\"string\">\"Worker Exit, PID=\"</span> . $pid . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子进程创建成功后要执行的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_process</span><span class=\"params\">(swoole_process $worker)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);<span class=\"comment\">//暂停1s</span></span><br><span class=\"line\">    $url    = $worker-&gt;read();</span><br><span class=\"line\">    <span class=\"comment\">//---- 执行具体业务程序开始-----</span></span><br><span class=\"line\">    $ch = curl_init();</span><br><span class=\"line\">    <span class=\"comment\">// 设置URL和相应的选项</span></span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 抓取URL并把它传递给浏览器</span></span><br><span class=\"line\">    $return =  curl_exec($ch);</span><br><span class=\"line\">    <span class=\"comment\">// 关闭cURL资源，并且释放系统资源</span></span><br><span class=\"line\">    curl_close($ch);</span><br><span class=\"line\">    <span class=\"comment\">//---- 执行具体业务程序结束-----</span></span><br><span class=\"line\">    $worker-&gt;write($return);<span class=\"comment\">//写入数据到管道</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$end_time = microtime(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> sprintf(<span class=\"string\">\"use time:%.3f s\\n\"</span>, $end_time - $start_time);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-多进程和多线程的区别？如何选择\"><a href=\"#3-多进程和多线程的区别？如何选择\" class=\"headerlink\" title=\"3. 多进程和多线程的区别？如何选择\"></a>3. 多进程和多线程的区别？如何选择</h2><h3 id=\"3-1-不同的维度的对比\"><a href=\"#3-1-不同的维度的对比\" class=\"headerlink\" title=\"3.1 不同的维度的对比\"></a>3.1 不同的维度的对比</h3><table>\n<thead>\n<tr>\n<th>对比维度</th>\n<th>多进程</th>\n<th>多线程</th>\n<th>总结</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据共享、同步</td>\n<td>数据共享复杂，需要用IPC；数据是分开的，同步简单</td>\n<td>因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂</td>\n<td>各有优势</td>\n</tr>\n<tr>\n<td>内存、CPU</td>\n<td>占用内存多，切换复杂，CPU利用率低</td>\n<td>占用内存少，切换简单，CPU利用率高</td>\n<td>线程占优</td>\n</tr>\n<tr>\n<td>创建销毁、切换</td>\n<td>创建销毁、切换复杂，速度慢</td>\n<td>创建销毁、切换简单，速度很快</td>\n<td>线程占优</td>\n</tr>\n<tr>\n<td>编程、调试</td>\n<td>编程简单，调试简单</td>\n<td>编程复杂，调试复杂</td>\n<td>进程占优</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>进程间不会互相影响</td>\n<td>一个线程挂掉将导致整个进程挂掉</td>\n<td>进程占优</td>\n</tr>\n<tr>\n<td>分布式</td>\n<td>适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单</td>\n<td>适应于多核分布式</td>\n<td>进程占优</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://blog.csdn.net/lishenglong666/article/details/8557215\" target=\"_blank\" rel=\"noopener\">如何选择?</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<front color=\"red\">进程是资源分配的最小单位，线程是CPU调度的最小单位</front>\n</blockquote>\n<h2 id=\"1-多线程并发-通过cURL并发请求\"><a href=\"#1-多线程并发-通过cURL并发请求\" class=\"headerlink\" title=\"1. 多线程并发:通过cURL并发请求\"></a>1. 多线程并发:通过cURL并发请求</h2><h3 id=\"1-1-通过curl-multi实现\"><a href=\"#1-1-通过curl-multi实现\" class=\"headerlink\" title=\"1.1 通过curl_multi实现\"></a>1.1 通过curl_multi实现</h3><p><a href=\"https://secure.php.net/manual/zh/ref.curl.php\" target=\"_blank\" rel=\"noopener\">PHP cURL所有函数列表</a></p>\n<p><strong>并发中用的curl_multi_*相关函数</strong></p>\n<ul>\n<li><a href=\"https://php.net/manual/zh/function.curl-multi-add-handle.php\" target=\"_blank\" rel=\"noopener\">curl_multi_add_handle</a>— 向curl批处理会话中添加单独的curl句柄</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-close.php\" target=\"_blank\" rel=\"noopener\">curl_multi_close</a> — 关闭一组cURL句柄</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-exec.php\" target=\"_blank\" rel=\"noopener\">curl_multi_exec</a> — 运行当前 cURL 句柄的子连接</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-getcontent.php\" target=\"_blank\" rel=\"noopener\">curl_multi_getcontent</a> — 如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-info-read.php\" target=\"_blank\" rel=\"noopener\">curl_multi_info_read</a> — 获取当前解析的cURL的相关传输信息</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-init.php\" target=\"_blank\" rel=\"noopener\">curl_multi_init</a> — 返回一个新cURL批处理句柄</li>\n<li><a href=\"curl_multi_remove_handle\">curl_multi_remove_handle</a> — 移除curl批处理句柄资源中的某个句柄资源</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-select.php\" target=\"_blank\" rel=\"noopener\">curl_multi_select</a> — 等待所有cURL批处理中的活动连接</li>\n<li><a href=\"https://secure.php.net/manual/zh/function.curl-multi-setopt.php\" target=\"_blank\" rel=\"noopener\">curl_multi_setopt</a> — 为 cURL 并行处理设置一个选项</li>\n<li><a href=\"https://php.net/manual/zh/function.curl-multi-strerror.php\" target=\"_blank\" rel=\"noopener\">curl_multi_strerror</a> — 返回字符串描述的错误代码","more":"</li>\n</ul>\n<h3 id=\"1-2-PHP-curl-multi-实现并发请求步骤\"><a href=\"#1-2-PHP-curl-multi-实现并发请求步骤\" class=\"headerlink\" title=\"1.2 PHP curl_multi 实现并发请求步骤\"></a>1.2 PHP curl_multi 实现并发请求步骤</h3><ol>\n<li>调用 curl_multi_init，初始化一个批处理handle</li>\n<li>循环调用 curl_multi_add_handle，往1中的批处理handle 添加curl_init来的子handle</li>\n<li>持续调用 curl_multi_exec，直到所有子handle执行完毕。</li>\n<li>根据需要循环调用 curl_multi_getcontent 获取结果</li>\n<li>调用 curl_multi_remove_handle，并为每个字handle调用curl_close</li>\n<li>调用 curl_multi_close</li>\n</ol>\n<h3 id=\"1-3-PHP-curl-multi-实现代码\"><a href=\"#1-3-PHP-curl-multi-实现代码\" class=\"headerlink\" title=\"1.3 PHP curl_multi 实现代码\"></a>1.3 PHP curl_multi 实现代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : </span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $urls</span></span><br><span class=\"line\"><span class=\"comment\">     *  $urls = [</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">            'http://liuqinghui.dev.lywf.me/test/libin/ttt',</span></span><br><span class=\"line\"><span class=\"comment\">      ];</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiGetRequest</span><span class=\"params\">(array $urls)</span>:<span class=\"title\">array</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1、初始化一个批处理handle</span></span><br><span class=\"line\">        $mh = curl_multi_init();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2、往批处理handle 添加curl_init来的子handle</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $i =&gt; $url) &#123;</span><br><span class=\"line\">            $connect[$i] = curl_init($url);</span><br><span class=\"line\">            curl_setopt($connect[$i], CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">            curl_setopt($connect[$i], CURLOPT_CONNECTTIMEOUT, <span class=\"number\">60</span>);</span><br><span class=\"line\">            curl_setopt($connect[$i], CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            curl_multi_add_handle($mh, $connect[$i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3、并发执行，直到全部结束。</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            curl_multi_exec($mh, $active);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ($active);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4、获取结果</span></span><br><span class=\"line\">        $return=[];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $i =&gt; $url) &#123;</span><br><span class=\"line\">            $return[] = curl_multi_getcontent($connect[$i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//5、移除子handle，并close子handle</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $i =&gt; $url) &#123;</span><br><span class=\"line\">            curl_multi_remove_handle($mh, $connect[$i]);</span><br><span class=\"line\">            curl_close($connect[$i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//6、关闭批处理handle</span></span><br><span class=\"line\">        curl_multi_close($mh);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $return;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-多进程并发：通过swoole-process实现\"><a href=\"#2-多进程并发：通过swoole-process实现\" class=\"headerlink\" title=\"2. 多进程并发：通过swoole_process实现\"></a>2. 多进程并发：通过swoole_process实现</h2><p><a href=\"https://wiki.swoole.com/wiki/page/214.html\" target=\"_blank\" rel=\"noopener\">查看文档</a></p>\n<h3 id=\"2-1-示例代码\"><a href=\"#2-1-示例代码\" class=\"headerlink\" title=\"2.1 示例代码\"></a>2.1 示例代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$start_time = microtime(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">$urls       = [</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://liuqinghui.dev.lywf.me/test/libin/ttt'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历任务创建子进程</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($urls <span class=\"keyword\">as</span> $url) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建子进程，并调用方法 my_process</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process = <span class=\"keyword\">new</span> swoole_process(<span class=\"string\">\"my_process\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.执行fork系统调用，启动进程;</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建成功返回子进程的PID，创建失败返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process-&gt;start();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过管道发数据到子进程。</span></span><br><span class=\"line\"><span class=\"comment\">     * 管道是单向的：发出的数据必须由另一端读取。不能读取自己发出去的</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process-&gt;write($url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存进程,循环结算后统一调取返回数数据：</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $process_list[] = $process;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取结果</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($process_list <span class=\"keyword\">as</span> $process)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从管道中读取数据。</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $rec = $process-&gt;read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子进程结束必须要执行wait进行回收，否则子进程会变成僵尸进程</span></span><br><span class=\"line\"><span class=\"comment\"> * $ret 是个数组其数据结构：</span></span><br><span class=\"line\"><span class=\"comment\">   array(3) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    'pid' =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    int(461)</span></span><br><span class=\"line\"><span class=\"comment\">    'code' =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    int(0)</span></span><br><span class=\"line\"><span class=\"comment\">    'signal' =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    int(0)</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($ret = swoole_process::wait()) &#123;</span><br><span class=\"line\">    $pid = $ret[<span class=\"string\">'pid'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> PHP_EOL . <span class=\"string\">\"Worker Exit, PID=\"</span> . $pid . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子进程创建成功后要执行的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_process</span><span class=\"params\">(swoole_process $worker)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);<span class=\"comment\">//暂停1s</span></span><br><span class=\"line\">    $url    = $worker-&gt;read();</span><br><span class=\"line\">    <span class=\"comment\">//---- 执行具体业务程序开始-----</span></span><br><span class=\"line\">    $ch = curl_init();</span><br><span class=\"line\">    <span class=\"comment\">// 设置URL和相应的选项</span></span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 抓取URL并把它传递给浏览器</span></span><br><span class=\"line\">    $return =  curl_exec($ch);</span><br><span class=\"line\">    <span class=\"comment\">// 关闭cURL资源，并且释放系统资源</span></span><br><span class=\"line\">    curl_close($ch);</span><br><span class=\"line\">    <span class=\"comment\">//---- 执行具体业务程序结束-----</span></span><br><span class=\"line\">    $worker-&gt;write($return);<span class=\"comment\">//写入数据到管道</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$end_time = microtime(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> sprintf(<span class=\"string\">\"use time:%.3f s\\n\"</span>, $end_time - $start_time);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-多进程和多线程的区别？如何选择\"><a href=\"#3-多进程和多线程的区别？如何选择\" class=\"headerlink\" title=\"3. 多进程和多线程的区别？如何选择\"></a>3. 多进程和多线程的区别？如何选择</h2><h3 id=\"3-1-不同的维度的对比\"><a href=\"#3-1-不同的维度的对比\" class=\"headerlink\" title=\"3.1 不同的维度的对比\"></a>3.1 不同的维度的对比</h3><table>\n<thead>\n<tr>\n<th>对比维度</th>\n<th>多进程</th>\n<th>多线程</th>\n<th>总结</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据共享、同步</td>\n<td>数据共享复杂，需要用IPC；数据是分开的，同步简单</td>\n<td>因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂</td>\n<td>各有优势</td>\n</tr>\n<tr>\n<td>内存、CPU</td>\n<td>占用内存多，切换复杂，CPU利用率低</td>\n<td>占用内存少，切换简单，CPU利用率高</td>\n<td>线程占优</td>\n</tr>\n<tr>\n<td>创建销毁、切换</td>\n<td>创建销毁、切换复杂，速度慢</td>\n<td>创建销毁、切换简单，速度很快</td>\n<td>线程占优</td>\n</tr>\n<tr>\n<td>编程、调试</td>\n<td>编程简单，调试简单</td>\n<td>编程复杂，调试复杂</td>\n<td>进程占优</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>进程间不会互相影响</td>\n<td>一个线程挂掉将导致整个进程挂掉</td>\n<td>进程占优</td>\n</tr>\n<tr>\n<td>分布式</td>\n<td>适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单</td>\n<td>适应于多核分布式</td>\n<td>进程占优</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://blog.csdn.net/lishenglong666/article/details/8557215\" target=\"_blank\" rel=\"noopener\">如何选择?</a></p>"},{"title":"php 正则去掉字符串中非汉字字符串","date":"2015-03-09T02:05:37.000Z","_content":"\n直接上代码示例：\n\n```$xslt\n\n$str='2016，北京欢迎您 from around you..';\n \npreg_match_all('/[\\x{4e00}-\\x{9fff}]+/u', $str, $matches);\n \n$str = join('', $matches[0]);\n \n```\n\n输出\n \n```$xslt\n北京欢迎您\n```\n","source":"_posts/php-preg_match_all.md","raw":"---\ntitle: php 正则去掉字符串中非汉字字符串\ndate: 2015-03-09 10:05:37\ntags:\n - php\ncategories:\n - php \n---\n\n直接上代码示例：\n\n```$xslt\n\n$str='2016，北京欢迎您 from around you..';\n \npreg_match_all('/[\\x{4e00}-\\x{9fff}]+/u', $str, $matches);\n \n$str = join('', $matches[0]);\n \n```\n\n输出\n \n```$xslt\n北京欢迎您\n```\n","slug":"php-preg_match_all","published":1,"updated":"2019-03-29T10:38:24.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987h9000b0641d2up52zd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>直接上代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$str=&apos;2016，北京欢迎您 from around you..&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">preg_match_all(&apos;/[\\x&#123;4e00&#125;-\\x&#123;9fff&#125;]+/u&apos;, $str, $matches);</span><br><span class=\"line\"> </span><br><span class=\"line\">$str = join(&apos;&apos;, $matches[0]);</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京欢迎您</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>直接上代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$str=&apos;2016，北京欢迎您 from around you..&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">preg_match_all(&apos;/[\\x&#123;4e00&#125;-\\x&#123;9fff&#125;]+/u&apos;, $str, $matches);</span><br><span class=\"line\"> </span><br><span class=\"line\">$str = join(&apos;&apos;, $matches[0]);</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京欢迎您</span><br></pre></td></tr></table></figure>\n"},{"title":"php排序算法汇总","date":"2018-01-12T02:12:07.000Z","_content":"\n\n### 1.1 插入排序 \n基本思想：每次将一个待排序的数据元素，插入到前面已经排好序的数列中的适当位置，使数列依然有序；直到待排序数据元素全部插入完为止。\n```php\n<?php\n/*\n 示例：\n[初始关键字] [49] 38 65 97 76 13 27 49\nJ=2(38) [38 49] 65 97 76 13 27 49\nJ=3(65) [38 49 65] 97 76 13 27 49\nJ=4(97) [38 49 65 97] 76 13 27 49\nJ=5(76) [38 49 65 76 97] 13 27 49\nJ=6(13) [13 38 49 65 76 97] 27 49\nJ=7(27) [13 27 38 49 65 76 97] 49\nJ=8(49) [13 27 38 49 49 65 76 97]\n*/\n\nfunction insert_sort($arr)\n{\n    $count = count($arr);\n    //i=1 是从第二个开始与第一个比较\n    for ($i = 1; $i < $count; $i++) {\n        $tmp = $array[$i];\n        $j   = $i - 1;\n        while ($array[$j] > $tmp) {\n            //前面的值大于后面的值时，互调位置,\n            //直到满足:$array[$j] > $tmp\n            $array[$j + 1] = $array[$j];\n            $array[$j]     = $tmp;\n            $j--;\n        }\n    }\n    return $arr;\n}\n```\n<!--more-->\n### 1.2 选择排序\n基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。\n```php\n<?php\n/*\n初始关键字] [49 38 65 97 76 13 27 49]\n第一趟排序后 13 ［38 65 97 76 49 27 49]\n第二趟排序后 13 27 ［65 97 76 49 38 49]\n第三趟排序后 13 27 38 [97 76 49 65 49]\n第四趟排序后 13 27 38 49 [49 97 65 76]\n第五趟排序后 13 27 38 49 49 [97 97 76]\n第六趟排序后 13 27 38 49 49 76 [76 97]\n第七趟排序后 13 27 38 49 49 76 76 [ 97]\n最后排序结果 13 27 38 49 49 76 76 97\n*/\n\nfunction select_sort($arr)\n{\n    /*\n     * 基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，\n     直到全部待排序的数据元素排完\n     * */\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $k = $i;\n        for ($j = $i + 1; $j < $count; $j++) {\n            if ($arr[$k] > $arr[$j]) {\n                //每次找出最小的值，并把最小值的索引赋值给$k,然后索引 $k 与 $i 值比较，\n                $k = $j;\n            }\n        }\n        //当最小值索引 $k与$i不同时， 索引$k与$i值互换位置,\n        if ($k != $i) {\n            $tmp     = $arr[$i];\n            $arr[$i] = $arr[$k];\n            $arr[$k] = $tmp;\n        }\n    }\n    return $arr;\n}\n```\n \n### 1.3 冒泡排序 \n基本思想：两两比较待排序数据元素的大小，发现两个数据元素的次序相反时即进行交换，直到没有反序的数据元素为止。 排序过程：设想被排序的数组R［1..N］垂直竖立，将每个数据元素看作有重量的气泡，根据轻气泡不能在重气泡之下的原则(正序)， 从下往上扫描数组R，凡扫描到违反本原则的轻气泡，就使其向上”漂浮”，如此反复进行，直至最后任何两个气泡都是轻者在上，重者在下为止。 \n\n```php\n<?php\n/*\n示例：\n\n49 13 13 13 13 13 13 13\n38 49 27 27 27 27 27 27\n65 38 49 38 38 38 38 38\n97 65 38 49 49 49 49 49\n76 97 65 49 49 49 49 49\n13 76 97 65 65 65 65 65\n27 27 76 97 76 76 76 76\n49 49 49 76 97 97 97 97\n*/\n\nfunction bubble_sort($array){\n   $count = count($array);\n   if ($count <= 0) return false;\n   for($i=0; $i<$count; $i++){\n       for($j=$count-1; $j>$i; $j--){\n           if ($array[$j]<$array[$j-1]){\n               $tmp = $array[$j];\n               $array[$j] = $array[$j-1];\n               $array[$j-1] = $tmp;\n           }\n       }\n   }\n   return $array;\n}\n```\n\n### 1.4 快速排序 \n基本思想：在当前无序区R[1..H]中任取一个数据元素作为比较的”基准”(不妨记为X)， 用此基准将当前无序区划分为左右两个较小的无序区：R[1..I-1]和R[I 1..H]，且左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素，而基准X则位于最终排序的位置上，即R[1..I-1]≤X.Key≤RI 1..H， 当 R[1..I-1]和R[I 1..H]均非空时，分别对它们进行上述的划分过程，直至所有无序子区中的数据元素均已排序为止。\n\n\n```php\n<?php\n/*\n初始关键字 [49 38 65 97 76 13 27 49］\n第一次交换后 ［27 38 65 97 76 13 49 49］\n第二次交换后 ［27 38 49 97 76 13 65 49］\nJ向左扫描，位置不变，第三次交换后 ［27 38 13 97 76 49 65 49］\nI向右扫描，位置不变，第四次交换后 ［27 38 13 49 76 97 65 49］\nJ向左扫描 ［27 38 13 49 76 97 65 49］\n（一次划分过程）\n初始关键字 ［49 38 65 97 76 13 27 49］\n一趟排序之后 ［27 38 13］ 49 ［76 97 65 49］\n二趟排序之后 ［13］ 27 ［38］ 49 ［49 65］76 ［97］\n三趟排序之后 13 27 38 49 49 ［65］76 97\n最后的排序结果 13 27 38 49 49 65 76 97\n*/\n\nfunction quick_sort(&$array)\n{\n    //在当前无序区中任取一个数据元素作为比较的”基准”， 用此基准将当前无序区划分为左右两个较小的无序区\n    if (count($array) > 1) {\n        $standard = $array[0];\n        //左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素\n        $left  = [];\n        $right = [];\n        $_size = count($array);\n        for ($i = 1; $i < $_size; $i++) {\n            if ($array[$i] <= $standard) {\n                $left[] = $array[$i];\n            } elseif ($array[$i] > $standard) {\n                $right[] = $array[$i];\n            }\n        }\n        $left  = $this->quick_sort($left);\n        $right = $this->quick_sort($right);\n        return array_merge($left, array($standard), $right);\n    }\n    return $array;\n\n}\n```\n### 1.5 希尔排序\n基本思想：希尔排序是将待排序的数组元素 按下标的一定增量分组 ，分成多个子序列，然后对各个子序列进行直接插入排序算法排序；然后依次缩减增量再进行排序，直到增量为1时，进行最后一次直接插入排序，排序结束。\n```php\n<?php\nfunction shell_sort(&$arr){\n    if(!is_array($arr))return;$n=count($arr);\n    for($gap=floor($n/2);$gap>0;$gap=floor($gap/=2)){\n        for($i=$gap;$i<$n;++$i){\n            for($j=$i-$gap;$j>=0&&$arr[$j+$gap]<$arr[$j];$j-=$gap){\n                $temp=$arr[$j];\n                $arr[$j]=$arr[$j+$gap];\n                $arr[$j+$gap]=$temp;\n            }\n        }\n    }\n}\n```\n","source":"_posts/php-sort.md","raw":"---\ntitle: 'php排序算法汇总'\ndate: 2018-01-12 10:12:07\ntags:\n - php\ncategories:\n - 面试题\n - 算法\n---\n\n\n### 1.1 插入排序 \n基本思想：每次将一个待排序的数据元素，插入到前面已经排好序的数列中的适当位置，使数列依然有序；直到待排序数据元素全部插入完为止。\n```php\n<?php\n/*\n 示例：\n[初始关键字] [49] 38 65 97 76 13 27 49\nJ=2(38) [38 49] 65 97 76 13 27 49\nJ=3(65) [38 49 65] 97 76 13 27 49\nJ=4(97) [38 49 65 97] 76 13 27 49\nJ=5(76) [38 49 65 76 97] 13 27 49\nJ=6(13) [13 38 49 65 76 97] 27 49\nJ=7(27) [13 27 38 49 65 76 97] 49\nJ=8(49) [13 27 38 49 49 65 76 97]\n*/\n\nfunction insert_sort($arr)\n{\n    $count = count($arr);\n    //i=1 是从第二个开始与第一个比较\n    for ($i = 1; $i < $count; $i++) {\n        $tmp = $array[$i];\n        $j   = $i - 1;\n        while ($array[$j] > $tmp) {\n            //前面的值大于后面的值时，互调位置,\n            //直到满足:$array[$j] > $tmp\n            $array[$j + 1] = $array[$j];\n            $array[$j]     = $tmp;\n            $j--;\n        }\n    }\n    return $arr;\n}\n```\n<!--more-->\n### 1.2 选择排序\n基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。\n```php\n<?php\n/*\n初始关键字] [49 38 65 97 76 13 27 49]\n第一趟排序后 13 ［38 65 97 76 49 27 49]\n第二趟排序后 13 27 ［65 97 76 49 38 49]\n第三趟排序后 13 27 38 [97 76 49 65 49]\n第四趟排序后 13 27 38 49 [49 97 65 76]\n第五趟排序后 13 27 38 49 49 [97 97 76]\n第六趟排序后 13 27 38 49 49 76 [76 97]\n第七趟排序后 13 27 38 49 49 76 76 [ 97]\n最后排序结果 13 27 38 49 49 76 76 97\n*/\n\nfunction select_sort($arr)\n{\n    /*\n     * 基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，\n     直到全部待排序的数据元素排完\n     * */\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $k = $i;\n        for ($j = $i + 1; $j < $count; $j++) {\n            if ($arr[$k] > $arr[$j]) {\n                //每次找出最小的值，并把最小值的索引赋值给$k,然后索引 $k 与 $i 值比较，\n                $k = $j;\n            }\n        }\n        //当最小值索引 $k与$i不同时， 索引$k与$i值互换位置,\n        if ($k != $i) {\n            $tmp     = $arr[$i];\n            $arr[$i] = $arr[$k];\n            $arr[$k] = $tmp;\n        }\n    }\n    return $arr;\n}\n```\n \n### 1.3 冒泡排序 \n基本思想：两两比较待排序数据元素的大小，发现两个数据元素的次序相反时即进行交换，直到没有反序的数据元素为止。 排序过程：设想被排序的数组R［1..N］垂直竖立，将每个数据元素看作有重量的气泡，根据轻气泡不能在重气泡之下的原则(正序)， 从下往上扫描数组R，凡扫描到违反本原则的轻气泡，就使其向上”漂浮”，如此反复进行，直至最后任何两个气泡都是轻者在上，重者在下为止。 \n\n```php\n<?php\n/*\n示例：\n\n49 13 13 13 13 13 13 13\n38 49 27 27 27 27 27 27\n65 38 49 38 38 38 38 38\n97 65 38 49 49 49 49 49\n76 97 65 49 49 49 49 49\n13 76 97 65 65 65 65 65\n27 27 76 97 76 76 76 76\n49 49 49 76 97 97 97 97\n*/\n\nfunction bubble_sort($array){\n   $count = count($array);\n   if ($count <= 0) return false;\n   for($i=0; $i<$count; $i++){\n       for($j=$count-1; $j>$i; $j--){\n           if ($array[$j]<$array[$j-1]){\n               $tmp = $array[$j];\n               $array[$j] = $array[$j-1];\n               $array[$j-1] = $tmp;\n           }\n       }\n   }\n   return $array;\n}\n```\n\n### 1.4 快速排序 \n基本思想：在当前无序区R[1..H]中任取一个数据元素作为比较的”基准”(不妨记为X)， 用此基准将当前无序区划分为左右两个较小的无序区：R[1..I-1]和R[I 1..H]，且左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素，而基准X则位于最终排序的位置上，即R[1..I-1]≤X.Key≤RI 1..H， 当 R[1..I-1]和R[I 1..H]均非空时，分别对它们进行上述的划分过程，直至所有无序子区中的数据元素均已排序为止。\n\n\n```php\n<?php\n/*\n初始关键字 [49 38 65 97 76 13 27 49］\n第一次交换后 ［27 38 65 97 76 13 49 49］\n第二次交换后 ［27 38 49 97 76 13 65 49］\nJ向左扫描，位置不变，第三次交换后 ［27 38 13 97 76 49 65 49］\nI向右扫描，位置不变，第四次交换后 ［27 38 13 49 76 97 65 49］\nJ向左扫描 ［27 38 13 49 76 97 65 49］\n（一次划分过程）\n初始关键字 ［49 38 65 97 76 13 27 49］\n一趟排序之后 ［27 38 13］ 49 ［76 97 65 49］\n二趟排序之后 ［13］ 27 ［38］ 49 ［49 65］76 ［97］\n三趟排序之后 13 27 38 49 49 ［65］76 97\n最后的排序结果 13 27 38 49 49 65 76 97\n*/\n\nfunction quick_sort(&$array)\n{\n    //在当前无序区中任取一个数据元素作为比较的”基准”， 用此基准将当前无序区划分为左右两个较小的无序区\n    if (count($array) > 1) {\n        $standard = $array[0];\n        //左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素\n        $left  = [];\n        $right = [];\n        $_size = count($array);\n        for ($i = 1; $i < $_size; $i++) {\n            if ($array[$i] <= $standard) {\n                $left[] = $array[$i];\n            } elseif ($array[$i] > $standard) {\n                $right[] = $array[$i];\n            }\n        }\n        $left  = $this->quick_sort($left);\n        $right = $this->quick_sort($right);\n        return array_merge($left, array($standard), $right);\n    }\n    return $array;\n\n}\n```\n### 1.5 希尔排序\n基本思想：希尔排序是将待排序的数组元素 按下标的一定增量分组 ，分成多个子序列，然后对各个子序列进行直接插入排序算法排序；然后依次缩减增量再进行排序，直到增量为1时，进行最后一次直接插入排序，排序结束。\n```php\n<?php\nfunction shell_sort(&$arr){\n    if(!is_array($arr))return;$n=count($arr);\n    for($gap=floor($n/2);$gap>0;$gap=floor($gap/=2)){\n        for($i=$gap;$i<$n;++$i){\n            for($j=$i-$gap;$j>=0&&$arr[$j+$gap]<$arr[$j];$j-=$gap){\n                $temp=$arr[$j];\n                $arr[$j]=$arr[$j+$gap];\n                $arr[$j+$gap]=$temp;\n            }\n        }\n    }\n}\n```\n","slug":"php-sort","published":1,"updated":"2019-03-25T11:45:57.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987hb000f0641yhw6dzlo","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"1-1-插入排序\"><a href=\"#1-1-插入排序\" class=\"headerlink\" title=\"1.1 插入排序\"></a>1.1 插入排序</h3><p>基本思想：每次将一个待排序的数据元素，插入到前面已经排好序的数列中的适当位置，使数列依然有序；直到待排序数据元素全部插入完为止。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 示例：</span></span><br><span class=\"line\"><span class=\"comment\">[初始关键字] [49] 38 65 97 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=2(38) [38 49] 65 97 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=3(65) [38 49 65] 97 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=4(97) [38 49 65 97] 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=5(76) [38 49 65 76 97] 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=6(13) [13 38 49 65 76 97] 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=7(27) [13 27 38 49 65 76 97] 49</span></span><br><span class=\"line\"><span class=\"comment\">J=8(49) [13 27 38 49 49 65 76 97]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert_sort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $count = count($arr);</span><br><span class=\"line\">    <span class=\"comment\">//i=1 是从第二个开始与第一个比较</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; $count; $i++) &#123;</span><br><span class=\"line\">        $tmp = $array[$i];</span><br><span class=\"line\">        $j   = $i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($array[$j] &gt; $tmp) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//前面的值大于后面的值时，互调位置,</span></span><br><span class=\"line\">            <span class=\"comment\">//直到满足:$array[$j] &gt; $tmp</span></span><br><span class=\"line\">            $array[$j + <span class=\"number\">1</span>] = $array[$j];</span><br><span class=\"line\">            $array[$j]     = $tmp;</span><br><span class=\"line\">            $j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"1-2-选择排序\"><a href=\"#1-2-选择排序\" class=\"headerlink\" title=\"1.2 选择排序\"></a>1.2 选择排序</h3><p>基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">初始关键字] [49 38 65 97 76 13 27 49]</span></span><br><span class=\"line\"><span class=\"comment\">第一趟排序后 13 ［38 65 97 76 49 27 49]</span></span><br><span class=\"line\"><span class=\"comment\">第二趟排序后 13 27 ［65 97 76 49 38 49]</span></span><br><span class=\"line\"><span class=\"comment\">第三趟排序后 13 27 38 [97 76 49 65 49]</span></span><br><span class=\"line\"><span class=\"comment\">第四趟排序后 13 27 38 49 [49 97 65 76]</span></span><br><span class=\"line\"><span class=\"comment\">第五趟排序后 13 27 38 49 49 [97 97 76]</span></span><br><span class=\"line\"><span class=\"comment\">第六趟排序后 13 27 38 49 49 76 [76 97]</span></span><br><span class=\"line\"><span class=\"comment\">第七趟排序后 13 27 38 49 49 76 76 [ 97]</span></span><br><span class=\"line\"><span class=\"comment\">最后排序结果 13 27 38 49 49 76 76 97</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select_sort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，</span></span><br><span class=\"line\"><span class=\"comment\">     直到全部待排序的数据元素排完</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    $count = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $count; $i++) &#123;</span><br><span class=\"line\">        $k = $i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j = $i + <span class=\"number\">1</span>; $j &lt; $count; $j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($arr[$k] &gt; $arr[$j]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//每次找出最小的值，并把最小值的索引赋值给$k,然后索引 $k 与 $i 值比较，</span></span><br><span class=\"line\">                $k = $j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当最小值索引 $k与$i不同时， 索引$k与$i值互换位置,</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($k != $i) &#123;</span><br><span class=\"line\">            $tmp     = $arr[$i];</span><br><span class=\"line\">            $arr[$i] = $arr[$k];</span><br><span class=\"line\">            $arr[$k] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-冒泡排序\"><a href=\"#1-3-冒泡排序\" class=\"headerlink\" title=\"1.3 冒泡排序\"></a>1.3 冒泡排序</h3><p>基本思想：两两比较待排序数据元素的大小，发现两个数据元素的次序相反时即进行交换，直到没有反序的数据元素为止。 排序过程：设想被排序的数组R［1..N］垂直竖立，将每个数据元素看作有重量的气泡，根据轻气泡不能在重气泡之下的原则(正序)， 从下往上扫描数组R，凡扫描到违反本原则的轻气泡，就使其向上”漂浮”，如此反复进行，直至最后任何两个气泡都是轻者在上，重者在下为止。 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">示例：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">49 13 13 13 13 13 13 13</span></span><br><span class=\"line\"><span class=\"comment\">38 49 27 27 27 27 27 27</span></span><br><span class=\"line\"><span class=\"comment\">65 38 49 38 38 38 38 38</span></span><br><span class=\"line\"><span class=\"comment\">97 65 38 49 49 49 49 49</span></span><br><span class=\"line\"><span class=\"comment\">76 97 65 49 49 49 49 49</span></span><br><span class=\"line\"><span class=\"comment\">13 76 97 65 65 65 65 65</span></span><br><span class=\"line\"><span class=\"comment\">27 27 76 97 76 76 76 76</span></span><br><span class=\"line\"><span class=\"comment\">49 49 49 76 97 97 97 97</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubble_sort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">   $count = count($array);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ($count &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>; $i&lt;$count; $i++)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>($j=$count<span class=\"number\">-1</span>; $j&gt;$i; $j--)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ($array[$j]&lt;$array[$j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">               $tmp = $array[$j];</span><br><span class=\"line\">               $array[$j] = $array[$j<span class=\"number\">-1</span>];</span><br><span class=\"line\">               $array[$j<span class=\"number\">-1</span>] = $tmp;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-快速排序\"><a href=\"#1-4-快速排序\" class=\"headerlink\" title=\"1.4 快速排序\"></a>1.4 快速排序</h3><p>基本思想：在当前无序区R[1..H]中任取一个数据元素作为比较的”基准”(不妨记为X)， 用此基准将当前无序区划分为左右两个较小的无序区：R[1..I-1]和R[I 1..H]，且左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素，而基准X则位于最终排序的位置上，即R[1..I-1]≤X.Key≤RI 1..H， 当 R[1..I-1]和R[I 1..H]均非空时，分别对它们进行上述的划分过程，直至所有无序子区中的数据元素均已排序为止。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">初始关键字 [49 38 65 97 76 13 27 49］</span></span><br><span class=\"line\"><span class=\"comment\">第一次交换后 ［27 38 65 97 76 13 49 49］</span></span><br><span class=\"line\"><span class=\"comment\">第二次交换后 ［27 38 49 97 76 13 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">J向左扫描，位置不变，第三次交换后 ［27 38 13 97 76 49 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">I向右扫描，位置不变，第四次交换后 ［27 38 13 49 76 97 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">J向左扫描 ［27 38 13 49 76 97 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">（一次划分过程）</span></span><br><span class=\"line\"><span class=\"comment\">初始关键字 ［49 38 65 97 76 13 27 49］</span></span><br><span class=\"line\"><span class=\"comment\">一趟排序之后 ［27 38 13］ 49 ［76 97 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">二趟排序之后 ［13］ 27 ［38］ 49 ［49 65］76 ［97］</span></span><br><span class=\"line\"><span class=\"comment\">三趟排序之后 13 27 38 49 49 ［65］76 97</span></span><br><span class=\"line\"><span class=\"comment\">最后的排序结果 13 27 38 49 49 65 76 97</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick_sort</span><span class=\"params\">(&amp;$array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在当前无序区中任取一个数据元素作为比较的”基准”， 用此基准将当前无序区划分为左右两个较小的无序区</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count($array) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        $standard = $array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">//左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素</span></span><br><span class=\"line\">        $left  = [];</span><br><span class=\"line\">        $right = [];</span><br><span class=\"line\">        $_size = count($array);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; $_size; $i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($array[$i] &lt;= $standard) &#123;</span><br><span class=\"line\">                $left[] = $array[$i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">elseif</span> ($array[$i] &gt; $standard) &#123;</span><br><span class=\"line\">                $right[] = $array[$i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $left  = <span class=\"keyword\">$this</span>-&gt;quick_sort($left);</span><br><span class=\"line\">        $right = <span class=\"keyword\">$this</span>-&gt;quick_sort($right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_merge($left, <span class=\"keyword\">array</span>($standard), $right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-希尔排序\"><a href=\"#1-5-希尔排序\" class=\"headerlink\" title=\"1.5 希尔排序\"></a>1.5 希尔排序</h3><p>基本思想：希尔排序是将待排序的数组元素 按下标的一定增量分组 ，分成多个子序列，然后对各个子序列进行直接插入排序算法排序；然后依次缩减增量再进行排序，直到增量为1时，进行最后一次直接插入排序，排序结束。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shell_sort</span><span class=\"params\">(&amp;$arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!is_array($arr))<span class=\"keyword\">return</span>;$n=count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($gap=floor($n/<span class=\"number\">2</span>);$gap&gt;<span class=\"number\">0</span>;$gap=floor($gap/=<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>($i=$gap;$i&lt;$n;++$i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>($j=$i-$gap;$j&gt;=<span class=\"number\">0</span>&amp;&amp;$arr[$j+$gap]&lt;$arr[$j];$j-=$gap)&#123;</span><br><span class=\"line\">                $temp=$arr[$j];</span><br><span class=\"line\">                $arr[$j]=$arr[$j+$gap];</span><br><span class=\"line\">                $arr[$j+$gap]=$temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-1-插入排序\"><a href=\"#1-1-插入排序\" class=\"headerlink\" title=\"1.1 插入排序\"></a>1.1 插入排序</h3><p>基本思想：每次将一个待排序的数据元素，插入到前面已经排好序的数列中的适当位置，使数列依然有序；直到待排序数据元素全部插入完为止。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 示例：</span></span><br><span class=\"line\"><span class=\"comment\">[初始关键字] [49] 38 65 97 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=2(38) [38 49] 65 97 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=3(65) [38 49 65] 97 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=4(97) [38 49 65 97] 76 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=5(76) [38 49 65 76 97] 13 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=6(13) [13 38 49 65 76 97] 27 49</span></span><br><span class=\"line\"><span class=\"comment\">J=7(27) [13 27 38 49 65 76 97] 49</span></span><br><span class=\"line\"><span class=\"comment\">J=8(49) [13 27 38 49 49 65 76 97]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert_sort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $count = count($arr);</span><br><span class=\"line\">    <span class=\"comment\">//i=1 是从第二个开始与第一个比较</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; $count; $i++) &#123;</span><br><span class=\"line\">        $tmp = $array[$i];</span><br><span class=\"line\">        $j   = $i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($array[$j] &gt; $tmp) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//前面的值大于后面的值时，互调位置,</span></span><br><span class=\"line\">            <span class=\"comment\">//直到满足:$array[$j] &gt; $tmp</span></span><br><span class=\"line\">            $array[$j + <span class=\"number\">1</span>] = $array[$j];</span><br><span class=\"line\">            $array[$j]     = $tmp;</span><br><span class=\"line\">            $j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"1-2-选择排序\"><a href=\"#1-2-选择排序\" class=\"headerlink\" title=\"1.2 选择排序\"></a>1.2 选择排序</h3><p>基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">初始关键字] [49 38 65 97 76 13 27 49]</span></span><br><span class=\"line\"><span class=\"comment\">第一趟排序后 13 ［38 65 97 76 49 27 49]</span></span><br><span class=\"line\"><span class=\"comment\">第二趟排序后 13 27 ［65 97 76 49 38 49]</span></span><br><span class=\"line\"><span class=\"comment\">第三趟排序后 13 27 38 [97 76 49 65 49]</span></span><br><span class=\"line\"><span class=\"comment\">第四趟排序后 13 27 38 49 [49 97 65 76]</span></span><br><span class=\"line\"><span class=\"comment\">第五趟排序后 13 27 38 49 49 [97 97 76]</span></span><br><span class=\"line\"><span class=\"comment\">第六趟排序后 13 27 38 49 49 76 [76 97]</span></span><br><span class=\"line\"><span class=\"comment\">第七趟排序后 13 27 38 49 49 76 76 [ 97]</span></span><br><span class=\"line\"><span class=\"comment\">最后排序结果 13 27 38 49 49 76 76 97</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select_sort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 基本思想：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，顺序放在已排好序的数列的最后，</span></span><br><span class=\"line\"><span class=\"comment\">     直到全部待排序的数据元素排完</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    $count = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $count; $i++) &#123;</span><br><span class=\"line\">        $k = $i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j = $i + <span class=\"number\">1</span>; $j &lt; $count; $j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($arr[$k] &gt; $arr[$j]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//每次找出最小的值，并把最小值的索引赋值给$k,然后索引 $k 与 $i 值比较，</span></span><br><span class=\"line\">                $k = $j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当最小值索引 $k与$i不同时， 索引$k与$i值互换位置,</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($k != $i) &#123;</span><br><span class=\"line\">            $tmp     = $arr[$i];</span><br><span class=\"line\">            $arr[$i] = $arr[$k];</span><br><span class=\"line\">            $arr[$k] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-冒泡排序\"><a href=\"#1-3-冒泡排序\" class=\"headerlink\" title=\"1.3 冒泡排序\"></a>1.3 冒泡排序</h3><p>基本思想：两两比较待排序数据元素的大小，发现两个数据元素的次序相反时即进行交换，直到没有反序的数据元素为止。 排序过程：设想被排序的数组R［1..N］垂直竖立，将每个数据元素看作有重量的气泡，根据轻气泡不能在重气泡之下的原则(正序)， 从下往上扫描数组R，凡扫描到违反本原则的轻气泡，就使其向上”漂浮”，如此反复进行，直至最后任何两个气泡都是轻者在上，重者在下为止。 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">示例：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">49 13 13 13 13 13 13 13</span></span><br><span class=\"line\"><span class=\"comment\">38 49 27 27 27 27 27 27</span></span><br><span class=\"line\"><span class=\"comment\">65 38 49 38 38 38 38 38</span></span><br><span class=\"line\"><span class=\"comment\">97 65 38 49 49 49 49 49</span></span><br><span class=\"line\"><span class=\"comment\">76 97 65 49 49 49 49 49</span></span><br><span class=\"line\"><span class=\"comment\">13 76 97 65 65 65 65 65</span></span><br><span class=\"line\"><span class=\"comment\">27 27 76 97 76 76 76 76</span></span><br><span class=\"line\"><span class=\"comment\">49 49 49 76 97 97 97 97</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubble_sort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">   $count = count($array);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ($count &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>; $i&lt;$count; $i++)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>($j=$count<span class=\"number\">-1</span>; $j&gt;$i; $j--)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ($array[$j]&lt;$array[$j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">               $tmp = $array[$j];</span><br><span class=\"line\">               $array[$j] = $array[$j<span class=\"number\">-1</span>];</span><br><span class=\"line\">               $array[$j<span class=\"number\">-1</span>] = $tmp;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-快速排序\"><a href=\"#1-4-快速排序\" class=\"headerlink\" title=\"1.4 快速排序\"></a>1.4 快速排序</h3><p>基本思想：在当前无序区R[1..H]中任取一个数据元素作为比较的”基准”(不妨记为X)， 用此基准将当前无序区划分为左右两个较小的无序区：R[1..I-1]和R[I 1..H]，且左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素，而基准X则位于最终排序的位置上，即R[1..I-1]≤X.Key≤RI 1..H， 当 R[1..I-1]和R[I 1..H]均非空时，分别对它们进行上述的划分过程，直至所有无序子区中的数据元素均已排序为止。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">初始关键字 [49 38 65 97 76 13 27 49］</span></span><br><span class=\"line\"><span class=\"comment\">第一次交换后 ［27 38 65 97 76 13 49 49］</span></span><br><span class=\"line\"><span class=\"comment\">第二次交换后 ［27 38 49 97 76 13 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">J向左扫描，位置不变，第三次交换后 ［27 38 13 97 76 49 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">I向右扫描，位置不变，第四次交换后 ［27 38 13 49 76 97 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">J向左扫描 ［27 38 13 49 76 97 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">（一次划分过程）</span></span><br><span class=\"line\"><span class=\"comment\">初始关键字 ［49 38 65 97 76 13 27 49］</span></span><br><span class=\"line\"><span class=\"comment\">一趟排序之后 ［27 38 13］ 49 ［76 97 65 49］</span></span><br><span class=\"line\"><span class=\"comment\">二趟排序之后 ［13］ 27 ［38］ 49 ［49 65］76 ［97］</span></span><br><span class=\"line\"><span class=\"comment\">三趟排序之后 13 27 38 49 49 ［65］76 97</span></span><br><span class=\"line\"><span class=\"comment\">最后的排序结果 13 27 38 49 49 65 76 97</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick_sort</span><span class=\"params\">(&amp;$array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在当前无序区中任取一个数据元素作为比较的”基准”， 用此基准将当前无序区划分为左右两个较小的无序区</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count($array) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        $standard = $array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">//左边的无序子区中数据元素均小于等于基准元素， 右边的无序子区中数据元素均大于等于基准元素</span></span><br><span class=\"line\">        $left  = [];</span><br><span class=\"line\">        $right = [];</span><br><span class=\"line\">        $_size = count($array);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; $_size; $i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($array[$i] &lt;= $standard) &#123;</span><br><span class=\"line\">                $left[] = $array[$i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">elseif</span> ($array[$i] &gt; $standard) &#123;</span><br><span class=\"line\">                $right[] = $array[$i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $left  = <span class=\"keyword\">$this</span>-&gt;quick_sort($left);</span><br><span class=\"line\">        $right = <span class=\"keyword\">$this</span>-&gt;quick_sort($right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_merge($left, <span class=\"keyword\">array</span>($standard), $right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-希尔排序\"><a href=\"#1-5-希尔排序\" class=\"headerlink\" title=\"1.5 希尔排序\"></a>1.5 希尔排序</h3><p>基本思想：希尔排序是将待排序的数组元素 按下标的一定增量分组 ，分成多个子序列，然后对各个子序列进行直接插入排序算法排序；然后依次缩减增量再进行排序，直到增量为1时，进行最后一次直接插入排序，排序结束。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shell_sort</span><span class=\"params\">(&amp;$arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!is_array($arr))<span class=\"keyword\">return</span>;$n=count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($gap=floor($n/<span class=\"number\">2</span>);$gap&gt;<span class=\"number\">0</span>;$gap=floor($gap/=<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>($i=$gap;$i&lt;$n;++$i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>($j=$i-$gap;$j&gt;=<span class=\"number\">0</span>&amp;&amp;$arr[$j+$gap]&lt;$arr[$j];$j-=$gap)&#123;</span><br><span class=\"line\">                $temp=$arr[$j];</span><br><span class=\"line\">                $arr[$j]=$arr[$j+$gap];</span><br><span class=\"line\">                $arr[$j+$gap]=$temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Linux 搭建nfs文件共享","date":"2016-04-19T10:41:53.000Z","_content":"### 1.测试节点\n```\nNFS服务器主机名：server.unixmen.local \nNFS服务器IP地址：192.168.1.101/24\n\nNFS客户端主机名：client.unixmen.local \nNFS客户端IP地址：192.168.1.102/24\n```\n\n### 2.服务器端配置\n#### 2.1 安装NFS软件包\n```\n//使用以下命令在Server系统中安装NFS软件包：\n\n# yum install nfs-utils nfs-utils-lib\n\n# systemctl enable rpcbind \n\n# systemctl enable nfs-server \n\n# systemctl enable nfs-lock \n\n# ystemctl enable nfs-idmap\n\n# systemctl start rpcbind \n\n# systemctl start nfs-server \n\n# systemctl start nfs-lock \n\n# systemctl start nfs-idmap\n```\n#### 2.2 创建共享目录\n\n`现在，让我们在服务器中创建一些共享目录。`\n\n在服务器中创建名为/var/unixmen_share的共享目录，让客户端用户读取和写入该目录中的文件。\n```\n# mkdir /var/unixmen_share \n# chmod 777 /var/unixmen_share\n```\n#### 2.3 导出共享目录\n`在NFS服务器上导出共享目录：编辑文件/etc/exports，`\n添加以下行：\n```\n# /var/unixmen_share/  192.168.1.0/24(rw,sync,no_root_squash,no_all_squash）\n\n<1> /var/unixmen_share - 共享目录\n<2> 192.168.1.0/24 - 客户端的IP地址范围\n<3> rw  - 共享文件夹同步的可写权限\n<4> sync - 同步共享目录\n<5> no_root_squash - 启用root权限\n<6> no_all_squash - 启用用户权限\n```\n#### 2.4 重启NFS服务：\n```\n# systemctl restart nfs-server\n```\n\n\n\n---\n### 3.客户端\n#### 3.1 安装NFS软件包\n使用以下命令在客户端系统中安装NFS软件包：\n\n```\n# yum install nfs-utils nfs-utils-lib\n```\n#### 3.2 启用并启动NFS服务\n```\n# systemctl enable rpcbind \n# systemctl enable nfs-server \n# systemctl enable nfs-lock \n# systemctl enable nfs-idmap\n\n# systemctl start rpcbind \n# systemctl start nfs-server \n# systemctl start nfs-lock \n# systemctl start nfs-idmap\n```\n\n###4.在客户端上挂载NFS共享\n`创建一个挂载点以挂载我们之前在服务器中创建的共享文件夹'/var/unixmen_share'`。\n\n```\n# mkdir /var/nfs_share\n```\n####4.1 共享服务​​器目录\n`将共享从服务​​器挂载到客户端，如下所示`\n```\n// 挂载\n# mount -t nfs 192.168.1.101：/var/unixmen_share  /var/nfs_share \n\n//强制卸载\numount -lf /var/nfs_share\n```\n","source":"_posts/nfs-file-sharing.md","raw":"---\ntitle: Linux 搭建nfs文件共享\ndate: 2016-04-19 18:41:53\ntags:\n - nfs\ncategories:\n - linux\n---\n### 1.测试节点\n```\nNFS服务器主机名：server.unixmen.local \nNFS服务器IP地址：192.168.1.101/24\n\nNFS客户端主机名：client.unixmen.local \nNFS客户端IP地址：192.168.1.102/24\n```\n\n### 2.服务器端配置\n#### 2.1 安装NFS软件包\n```\n//使用以下命令在Server系统中安装NFS软件包：\n\n# yum install nfs-utils nfs-utils-lib\n\n# systemctl enable rpcbind \n\n# systemctl enable nfs-server \n\n# systemctl enable nfs-lock \n\n# ystemctl enable nfs-idmap\n\n# systemctl start rpcbind \n\n# systemctl start nfs-server \n\n# systemctl start nfs-lock \n\n# systemctl start nfs-idmap\n```\n#### 2.2 创建共享目录\n\n`现在，让我们在服务器中创建一些共享目录。`\n\n在服务器中创建名为/var/unixmen_share的共享目录，让客户端用户读取和写入该目录中的文件。\n```\n# mkdir /var/unixmen_share \n# chmod 777 /var/unixmen_share\n```\n#### 2.3 导出共享目录\n`在NFS服务器上导出共享目录：编辑文件/etc/exports，`\n添加以下行：\n```\n# /var/unixmen_share/  192.168.1.0/24(rw,sync,no_root_squash,no_all_squash）\n\n<1> /var/unixmen_share - 共享目录\n<2> 192.168.1.0/24 - 客户端的IP地址范围\n<3> rw  - 共享文件夹同步的可写权限\n<4> sync - 同步共享目录\n<5> no_root_squash - 启用root权限\n<6> no_all_squash - 启用用户权限\n```\n#### 2.4 重启NFS服务：\n```\n# systemctl restart nfs-server\n```\n\n\n\n---\n### 3.客户端\n#### 3.1 安装NFS软件包\n使用以下命令在客户端系统中安装NFS软件包：\n\n```\n# yum install nfs-utils nfs-utils-lib\n```\n#### 3.2 启用并启动NFS服务\n```\n# systemctl enable rpcbind \n# systemctl enable nfs-server \n# systemctl enable nfs-lock \n# systemctl enable nfs-idmap\n\n# systemctl start rpcbind \n# systemctl start nfs-server \n# systemctl start nfs-lock \n# systemctl start nfs-idmap\n```\n\n###4.在客户端上挂载NFS共享\n`创建一个挂载点以挂载我们之前在服务器中创建的共享文件夹'/var/unixmen_share'`。\n\n```\n# mkdir /var/nfs_share\n```\n####4.1 共享服务​​器目录\n`将共享从服务​​器挂载到客户端，如下所示`\n```\n// 挂载\n# mount -t nfs 192.168.1.101：/var/unixmen_share  /var/nfs_share \n\n//强制卸载\numount -lf /var/nfs_share\n```\n","slug":"nfs-file-sharing","published":1,"updated":"2019-04-03T11:17:20.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987hd000h0641r021pygv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"1-测试节点\"><a href=\"#1-测试节点\" class=\"headerlink\" title=\"1.测试节点\"></a>1.测试节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NFS服务器主机名：server.unixmen.local </span><br><span class=\"line\">NFS服务器IP地址：192.168.1.101/24</span><br><span class=\"line\"></span><br><span class=\"line\">NFS客户端主机名：client.unixmen.local </span><br><span class=\"line\">NFS客户端IP地址：192.168.1.102/24</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-服务器端配置\"><a href=\"#2-服务器端配置\" class=\"headerlink\" title=\"2.服务器端配置\"></a>2.服务器端配置</h3><h4 id=\"2-1-安装NFS软件包\"><a href=\"#2-1-安装NFS软件包\" class=\"headerlink\" title=\"2.1 安装NFS软件包\"></a>2.1 安装NFS软件包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用以下命令在Server系统中安装NFS软件包：</span><br><span class=\"line\"></span><br><span class=\"line\"># yum install nfs-utils nfs-utils-lib</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl enable rpcbind </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl enable nfs-server </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl enable nfs-lock </span><br><span class=\"line\"></span><br><span class=\"line\"># ystemctl enable nfs-idmap</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start rpcbind </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start nfs-server </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start nfs-lock </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start nfs-idmap</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-创建共享目录\"><a href=\"#2-2-创建共享目录\" class=\"headerlink\" title=\"2.2 创建共享目录\"></a>2.2 创建共享目录</h4><p><code>现在，让我们在服务器中创建一些共享目录。</code></p>\n<p>在服务器中创建名为/var/unixmen_share的共享目录，让客户端用户读取和写入该目录中的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /var/unixmen_share </span><br><span class=\"line\"># chmod 777 /var/unixmen_share</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-导出共享目录\"><a href=\"#2-3-导出共享目录\" class=\"headerlink\" title=\"2.3 导出共享目录\"></a>2.3 导出共享目录</h4><p><code>在NFS服务器上导出共享目录：编辑文件/etc/exports，</code><br>添加以下行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /var/unixmen_share/  192.168.1.0/24(rw,sync,no_root_squash,no_all_squash）</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;1&gt; /var/unixmen_share - 共享目录</span><br><span class=\"line\">&lt;2&gt; 192.168.1.0/24 - 客户端的IP地址范围</span><br><span class=\"line\">&lt;3&gt; rw  - 共享文件夹同步的可写权限</span><br><span class=\"line\">&lt;4&gt; sync - 同步共享目录</span><br><span class=\"line\">&lt;5&gt; no_root_squash - 启用root权限</span><br><span class=\"line\">&lt;6&gt; no_all_squash - 启用用户权限</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-4-重启NFS服务：\"><a href=\"#2-4-重启NFS服务：\" class=\"headerlink\" title=\"2.4 重启NFS服务：\"></a>2.4 重启NFS服务：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl restart nfs-server</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-客户端\"><a href=\"#3-客户端\" class=\"headerlink\" title=\"3.客户端\"></a>3.客户端</h3><h4 id=\"3-1-安装NFS软件包\"><a href=\"#3-1-安装NFS软件包\" class=\"headerlink\" title=\"3.1 安装NFS软件包\"></a>3.1 安装NFS软件包</h4><p>使用以下命令在客户端系统中安装NFS软件包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install nfs-utils nfs-utils-lib</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-启用并启动NFS服务\"><a href=\"#3-2-启用并启动NFS服务\" class=\"headerlink\" title=\"3.2 启用并启动NFS服务\"></a>3.2 启用并启动NFS服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl enable rpcbind </span><br><span class=\"line\"># systemctl enable nfs-server </span><br><span class=\"line\"># systemctl enable nfs-lock </span><br><span class=\"line\"># systemctl enable nfs-idmap</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start rpcbind </span><br><span class=\"line\"># systemctl start nfs-server </span><br><span class=\"line\"># systemctl start nfs-lock </span><br><span class=\"line\"># systemctl start nfs-idmap</span><br></pre></td></tr></table></figure>\n<p>###4.在客户端上挂载NFS共享<br><code>创建一个挂载点以挂载我们之前在服务器中创建的共享文件夹&#39;/var/unixmen_share&#39;</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /var/nfs_share</span><br></pre></td></tr></table></figure>\n<p>####4.1 共享服务​​器目录<br><code>将共享从服务​​器挂载到客户端，如下所示</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 挂载</span><br><span class=\"line\"># mount -t nfs 192.168.1.101：/var/unixmen_share  /var/nfs_share </span><br><span class=\"line\"></span><br><span class=\"line\">//强制卸载</span><br><span class=\"line\">umount -lf /var/nfs_share</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-测试节点\"><a href=\"#1-测试节点\" class=\"headerlink\" title=\"1.测试节点\"></a>1.测试节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NFS服务器主机名：server.unixmen.local </span><br><span class=\"line\">NFS服务器IP地址：192.168.1.101/24</span><br><span class=\"line\"></span><br><span class=\"line\">NFS客户端主机名：client.unixmen.local </span><br><span class=\"line\">NFS客户端IP地址：192.168.1.102/24</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-服务器端配置\"><a href=\"#2-服务器端配置\" class=\"headerlink\" title=\"2.服务器端配置\"></a>2.服务器端配置</h3><h4 id=\"2-1-安装NFS软件包\"><a href=\"#2-1-安装NFS软件包\" class=\"headerlink\" title=\"2.1 安装NFS软件包\"></a>2.1 安装NFS软件包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用以下命令在Server系统中安装NFS软件包：</span><br><span class=\"line\"></span><br><span class=\"line\"># yum install nfs-utils nfs-utils-lib</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl enable rpcbind </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl enable nfs-server </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl enable nfs-lock </span><br><span class=\"line\"></span><br><span class=\"line\"># ystemctl enable nfs-idmap</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start rpcbind </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start nfs-server </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start nfs-lock </span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start nfs-idmap</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-创建共享目录\"><a href=\"#2-2-创建共享目录\" class=\"headerlink\" title=\"2.2 创建共享目录\"></a>2.2 创建共享目录</h4><p><code>现在，让我们在服务器中创建一些共享目录。</code></p>\n<p>在服务器中创建名为/var/unixmen_share的共享目录，让客户端用户读取和写入该目录中的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /var/unixmen_share </span><br><span class=\"line\"># chmod 777 /var/unixmen_share</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-导出共享目录\"><a href=\"#2-3-导出共享目录\" class=\"headerlink\" title=\"2.3 导出共享目录\"></a>2.3 导出共享目录</h4><p><code>在NFS服务器上导出共享目录：编辑文件/etc/exports，</code><br>添加以下行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /var/unixmen_share/  192.168.1.0/24(rw,sync,no_root_squash,no_all_squash）</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;1&gt; /var/unixmen_share - 共享目录</span><br><span class=\"line\">&lt;2&gt; 192.168.1.0/24 - 客户端的IP地址范围</span><br><span class=\"line\">&lt;3&gt; rw  - 共享文件夹同步的可写权限</span><br><span class=\"line\">&lt;4&gt; sync - 同步共享目录</span><br><span class=\"line\">&lt;5&gt; no_root_squash - 启用root权限</span><br><span class=\"line\">&lt;6&gt; no_all_squash - 启用用户权限</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-4-重启NFS服务：\"><a href=\"#2-4-重启NFS服务：\" class=\"headerlink\" title=\"2.4 重启NFS服务：\"></a>2.4 重启NFS服务：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl restart nfs-server</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-客户端\"><a href=\"#3-客户端\" class=\"headerlink\" title=\"3.客户端\"></a>3.客户端</h3><h4 id=\"3-1-安装NFS软件包\"><a href=\"#3-1-安装NFS软件包\" class=\"headerlink\" title=\"3.1 安装NFS软件包\"></a>3.1 安装NFS软件包</h4><p>使用以下命令在客户端系统中安装NFS软件包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install nfs-utils nfs-utils-lib</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-启用并启动NFS服务\"><a href=\"#3-2-启用并启动NFS服务\" class=\"headerlink\" title=\"3.2 启用并启动NFS服务\"></a>3.2 启用并启动NFS服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># systemctl enable rpcbind </span><br><span class=\"line\"># systemctl enable nfs-server </span><br><span class=\"line\"># systemctl enable nfs-lock </span><br><span class=\"line\"># systemctl enable nfs-idmap</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl start rpcbind </span><br><span class=\"line\"># systemctl start nfs-server </span><br><span class=\"line\"># systemctl start nfs-lock </span><br><span class=\"line\"># systemctl start nfs-idmap</span><br></pre></td></tr></table></figure>\n<p>###4.在客户端上挂载NFS共享<br><code>创建一个挂载点以挂载我们之前在服务器中创建的共享文件夹&#39;/var/unixmen_share&#39;</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /var/nfs_share</span><br></pre></td></tr></table></figure>\n<p>####4.1 共享服务​​器目录<br><code>将共享从服务​​器挂载到客户端，如下所示</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 挂载</span><br><span class=\"line\"># mount -t nfs 192.168.1.101：/var/unixmen_share  /var/nfs_share </span><br><span class=\"line\"></span><br><span class=\"line\">//强制卸载</span><br><span class=\"line\">umount -lf /var/nfs_share</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Git相关的问题","date":"2016-11-22T16:00:00.000Z","_content":"\n### Q1 解决git pull/push每次都需要输入密码问题\n\n解决办法:\n- 进入你的项目目录，输入：\n- > git config --global credential.helper store\n\n### Q2 git无法pull仓库refusing to merge unrelated histories\n> 解决方法: git pull --allow-unrelated-histories\n\n### Q3  error: cannot lock ref 'refs/remotes/origin/..': ref refs/remotes/origin/.. is at 1907...927a1c but expected 8a5b...04b8\n\n解决方法:\n``` \n# rm .git/refs/remotes/origin/dev\n# git fetch\n\n```","source":"_posts/question-for-git.md","raw":"---\ntitle: Git相关的问题\ndate: 2016-11-23\ncategories:\n - git\n---\n\n### Q1 解决git pull/push每次都需要输入密码问题\n\n解决办法:\n- 进入你的项目目录，输入：\n- > git config --global credential.helper store\n\n### Q2 git无法pull仓库refusing to merge unrelated histories\n> 解决方法: git pull --allow-unrelated-histories\n\n### Q3  error: cannot lock ref 'refs/remotes/origin/..': ref refs/remotes/origin/.. is at 1907...927a1c but expected 8a5b...04b8\n\n解决方法:\n``` \n# rm .git/refs/remotes/origin/dev\n# git fetch\n\n```","slug":"question-for-git","published":1,"updated":"2019-03-25T11:45:57.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987lg001c06415iz4zfr3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"Q1-解决git-pull-push每次都需要输入密码问题\"><a href=\"#Q1-解决git-pull-push每次都需要输入密码问题\" class=\"headerlink\" title=\"Q1 解决git pull/push每次都需要输入密码问题\"></a>Q1 解决git pull/push每次都需要输入密码问题</h3><p>解决办法:</p>\n<ul>\n<li>进入你的项目目录，输入：</li>\n<li><blockquote>\n<p>git config –global credential.helper store</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Q2-git无法pull仓库refusing-to-merge-unrelated-histories\"><a href=\"#Q2-git无法pull仓库refusing-to-merge-unrelated-histories\" class=\"headerlink\" title=\"Q2 git无法pull仓库refusing to merge unrelated histories\"></a>Q2 git无法pull仓库refusing to merge unrelated histories</h3><blockquote>\n<p>解决方法: git pull –allow-unrelated-histories</p>\n</blockquote>\n<h3 id=\"Q3-error-cannot-lock-ref-‘refs-remotes-origin-’-ref-refs-remotes-origin-is-at-1907…927a1c-but-expected-8a5b…04b8\"><a href=\"#Q3-error-cannot-lock-ref-‘refs-remotes-origin-’-ref-refs-remotes-origin-is-at-1907…927a1c-but-expected-8a5b…04b8\" class=\"headerlink\" title=\"Q3  error: cannot lock ref ‘refs/remotes/origin/..’: ref refs/remotes/origin/.. is at 1907…927a1c but expected 8a5b…04b8\"></a>Q3  error: cannot lock ref ‘refs/remotes/origin/..’: ref refs/remotes/origin/.. is at 1907…927a1c but expected 8a5b…04b8</h3><p>解决方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rm .git/refs/remotes/origin/dev</span><br><span class=\"line\"># git fetch</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Q1-解决git-pull-push每次都需要输入密码问题\"><a href=\"#Q1-解决git-pull-push每次都需要输入密码问题\" class=\"headerlink\" title=\"Q1 解决git pull/push每次都需要输入密码问题\"></a>Q1 解决git pull/push每次都需要输入密码问题</h3><p>解决办法:</p>\n<ul>\n<li>进入你的项目目录，输入：</li>\n<li><blockquote>\n<p>git config –global credential.helper store</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Q2-git无法pull仓库refusing-to-merge-unrelated-histories\"><a href=\"#Q2-git无法pull仓库refusing-to-merge-unrelated-histories\" class=\"headerlink\" title=\"Q2 git无法pull仓库refusing to merge unrelated histories\"></a>Q2 git无法pull仓库refusing to merge unrelated histories</h3><blockquote>\n<p>解决方法: git pull –allow-unrelated-histories</p>\n</blockquote>\n<h3 id=\"Q3-error-cannot-lock-ref-‘refs-remotes-origin-’-ref-refs-remotes-origin-is-at-1907…927a1c-but-expected-8a5b…04b8\"><a href=\"#Q3-error-cannot-lock-ref-‘refs-remotes-origin-’-ref-refs-remotes-origin-is-at-1907…927a1c-but-expected-8a5b…04b8\" class=\"headerlink\" title=\"Q3  error: cannot lock ref ‘refs/remotes/origin/..’: ref refs/remotes/origin/.. is at 1907…927a1c but expected 8a5b…04b8\"></a>Q3  error: cannot lock ref ‘refs/remotes/origin/..’: ref refs/remotes/origin/.. is at 1907…927a1c but expected 8a5b…04b8</h3><p>解决方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rm .git/refs/remotes/origin/dev</span><br><span class=\"line\"># git fetch</span><br></pre></td></tr></table></figure></p>\n"},{"title":"单向链表","date":"2019-03-25T11:15:35.000Z","_content":"\n### 1. 什么是链表?\n>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表[顺序表](https://zh.wikipedia.org/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8)快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。\n\n\n### 2. 链表的组成部分\n> 链表通常由一连串节点组成，每个节点包含任意的实例数据（信息域 ）和一或两个用来指向上一个/或下一个节点的位置的链接（链域）\n\n<!--more-->\n\n### 3. 数组和链\n- 链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理\n\n\n### 4. 数组与链表的优缺点\n1. 存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；\n2. 存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　\n3. 存储空间上，链表由于带有指针域，存储密度不如数组大；　\n4. 按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；　\n5. 按值查找时，若数组无序，数组和链表时间复杂度均为O(n)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；\n6. 插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；\n7. 空间分配方面：\n> 数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败； \n  　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效； \n8. 经典数据结构涵盖了多种抽象数据类型（ADT），其中包括栈、队列、有序列表、排序表、哈希表及分散表、树、优先队列、集合和图等。对于每种情况，都可以选用数组或某一种链表数据结构来实现其抽象数据类型（ADT）。由于数组和链表几乎是建立所有ADT的基础，所以称数组与链表为基本数据结构\n\n### 5. 链表类型\n- 单向链表\n- [双向链表]()\n- [循环链表]()\n\n\n\n### 6. 单向链表\n> 链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。\n\n`一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。`\n\n![单向链表图](https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list.png)\n\n\n### 7. 代码（PHP）实现单向链表\n\n```php\n<?php\n\n/**\n * Class Node\n */\nclass Node\n{\n    /**\n     *\n     * @var\n     */\n    private $Data;//数据集\n    /**\n     *\n     * @var\n     */\n    private $Next;//下一个节点\n\n    /**\n     * Node constructor.\n     * @param $next\n     * @param $data\n     */\n    public function __construct($data, $next)\n    {\n        $this->setData($data);\n        $this->setNext($next);\n\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function setData($data)\n    {\n        $this->Data = $data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getData()\n    {\n        return $this->Data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $next\n     */\n    public function setNext($next)\n    {\n        $this->Next = $next;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getNext()\n    {\n        return $this->Next;\n    }\n\n}\n\n/**\n * Class LinkList\n */\nclass LinkList\n{\n    /**\n     *\n     * @var\n     */\n    private $header;//链表头部信息\n    /**\n     *\n     * @var\n     */\n    private $len;//链表长度\n\n\n    /**\n     * LinkList constructor.\n     */\n    public function __construct()\n    {\n        $this->setHeader(new Node(null, null));\n        $this->len = 0;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param Node $node\n     */\n    public function setHeader(Node $node)\n    {\n        $this->header = $node;\n    }\n\n    /**\n     *  Functional description : 获取当前节点\n     *  Programmer : Mr.Liu\n     * @return Node\n     */\n    public function getHeader()\n    : Node\n    {\n        return $this->header;\n    }\n\n\n    /**\n     *  Functional description : 获取链表长度\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getLen()\n    : int\n    {\n        return $this->len;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function add(string $data)\n    {\n        $node = $this->getHeader();\n        //查找没有子节点的节点\n        while ($node->getNext() != null) {\n            $node = $node->getNext();\n        }\n        //找到后设置其下级节点\n        $node->setNext(new Node($data, null));\n\n        //链表长度递增\n        $this->len++;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param Node $currentNode\n     * @param Node $prevNode\n     *\n     * 示例：A-B-C ==> A-C\n     * @return bool\n     */\n    private function delLink(Node $currentNode, Node $prevNode)\n    {\n        $prevNode->setNext($currentNode->getNext());\n        $this->len--;\n        return true;\n    }\n\n    /**\n     *  Functional description : 根据节点的数据进行删除\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function delByData($data)\n    {\n        $node     = $this->getHeader();\n        $prevNode = $node;\n        //查找没有数据一致的节点\n        while ($node->getData() != $data) {\n            $prevNode = $node;\n            $node     = $node->getNext();\n        }\n        //删除(把要删的节点A下的子节点位置移到A节点，从而删除)\n        $this->delLink($node, $prevNode);\n    }\n\n\n    /**\n     *  Functional description : 删除第一个节点0~N\n     *  Programmer : Mr.Liu\n     * @param int $index\n     * @return bool\n     */\n    public function delByIndex(int $index)\n    {\n        $node = $prevNode = $this->getHeader();\n        $i    = 0;\n        if ($i > $this->getLen() -1 ){\n            //节点超\n            return false;\n        }\n        while ($i != $index) {\n            if ($node->getNext() == null) {\n                return false;\n            }\n            $prevNode = $node;\n            $node     = $node->getNext();\n            $i++;\n        }\n        return $this->delLink($node, $prevNode);\n    }\n\n    /**\n     *  Functional description : 获取链表上所有数据\n     *  Programmer : Mr.Liu\n     * @return array\n     */\n    public function getLinkData()\n    {\n        $node = $this->getHeader();\n        $list = [];\n\n        //根节点处理\n        if ($node->getData() != null) {\n            $list[] = $node->getData();\n        }\n\n        //从下一个节点开始获取数据\n        $node = $node->getNext();\n        if ($node->getData() == null) {\n            return $list;\n        }\n        while ($node->getData() != null && $node->getNext() != null) {\n            $list[] = $node->getData();\n            $node   = $node->getNext();\n        }\n        return $list;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * 添加D到1示例：A-B-C ==> A-D-B-C\n     * @param int $index\n     * @param string $data\n     * @return bool\n     */\n    public function addByIndex(int $index,string $data){\n        $node  = $this->getHeader();\n        $i=0;\n        while ($i != $index){\n            if ($node->getNext() == null) {\n                return false;\n            }\n            $node = $node->getNext();\n            $i++;\n\n        }\n        //进行添加\n        $node->setNext(new Node($data,$node->getNext()));\n        $this->len++;\n        return true;\n    }\n\n}\n```\n\n","source":"_posts/Linked-List.md","raw":"---\ntitle: 单向链表\ndate: 2019-03-25 19:15:35\ntags:\n - 单向链表\ncategories:\n - 数据结构\n---\n\n### 1. 什么是链表?\n>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表[顺序表](https://zh.wikipedia.org/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8)快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。\n\n\n### 2. 链表的组成部分\n> 链表通常由一连串节点组成，每个节点包含任意的实例数据（信息域 ）和一或两个用来指向上一个/或下一个节点的位置的链接（链域）\n\n<!--more-->\n\n### 3. 数组和链\n- 链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理\n\n\n### 4. 数组与链表的优缺点\n1. 存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；\n2. 存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　\n3. 存储空间上，链表由于带有指针域，存储密度不如数组大；　\n4. 按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；　\n5. 按值查找时，若数组无序，数组和链表时间复杂度均为O(n)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；\n6. 插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；\n7. 空间分配方面：\n> 数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败； \n  　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效； \n8. 经典数据结构涵盖了多种抽象数据类型（ADT），其中包括栈、队列、有序列表、排序表、哈希表及分散表、树、优先队列、集合和图等。对于每种情况，都可以选用数组或某一种链表数据结构来实现其抽象数据类型（ADT）。由于数组和链表几乎是建立所有ADT的基础，所以称数组与链表为基本数据结构\n\n### 5. 链表类型\n- 单向链表\n- [双向链表]()\n- [循环链表]()\n\n\n\n### 6. 单向链表\n> 链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。\n\n`一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。`\n\n![单向链表图](https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list.png)\n\n\n### 7. 代码（PHP）实现单向链表\n\n```php\n<?php\n\n/**\n * Class Node\n */\nclass Node\n{\n    /**\n     *\n     * @var\n     */\n    private $Data;//数据集\n    /**\n     *\n     * @var\n     */\n    private $Next;//下一个节点\n\n    /**\n     * Node constructor.\n     * @param $next\n     * @param $data\n     */\n    public function __construct($data, $next)\n    {\n        $this->setData($data);\n        $this->setNext($next);\n\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function setData($data)\n    {\n        $this->Data = $data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getData()\n    {\n        return $this->Data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $next\n     */\n    public function setNext($next)\n    {\n        $this->Next = $next;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getNext()\n    {\n        return $this->Next;\n    }\n\n}\n\n/**\n * Class LinkList\n */\nclass LinkList\n{\n    /**\n     *\n     * @var\n     */\n    private $header;//链表头部信息\n    /**\n     *\n     * @var\n     */\n    private $len;//链表长度\n\n\n    /**\n     * LinkList constructor.\n     */\n    public function __construct()\n    {\n        $this->setHeader(new Node(null, null));\n        $this->len = 0;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param Node $node\n     */\n    public function setHeader(Node $node)\n    {\n        $this->header = $node;\n    }\n\n    /**\n     *  Functional description : 获取当前节点\n     *  Programmer : Mr.Liu\n     * @return Node\n     */\n    public function getHeader()\n    : Node\n    {\n        return $this->header;\n    }\n\n\n    /**\n     *  Functional description : 获取链表长度\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getLen()\n    : int\n    {\n        return $this->len;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function add(string $data)\n    {\n        $node = $this->getHeader();\n        //查找没有子节点的节点\n        while ($node->getNext() != null) {\n            $node = $node->getNext();\n        }\n        //找到后设置其下级节点\n        $node->setNext(new Node($data, null));\n\n        //链表长度递增\n        $this->len++;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param Node $currentNode\n     * @param Node $prevNode\n     *\n     * 示例：A-B-C ==> A-C\n     * @return bool\n     */\n    private function delLink(Node $currentNode, Node $prevNode)\n    {\n        $prevNode->setNext($currentNode->getNext());\n        $this->len--;\n        return true;\n    }\n\n    /**\n     *  Functional description : 根据节点的数据进行删除\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function delByData($data)\n    {\n        $node     = $this->getHeader();\n        $prevNode = $node;\n        //查找没有数据一致的节点\n        while ($node->getData() != $data) {\n            $prevNode = $node;\n            $node     = $node->getNext();\n        }\n        //删除(把要删的节点A下的子节点位置移到A节点，从而删除)\n        $this->delLink($node, $prevNode);\n    }\n\n\n    /**\n     *  Functional description : 删除第一个节点0~N\n     *  Programmer : Mr.Liu\n     * @param int $index\n     * @return bool\n     */\n    public function delByIndex(int $index)\n    {\n        $node = $prevNode = $this->getHeader();\n        $i    = 0;\n        if ($i > $this->getLen() -1 ){\n            //节点超\n            return false;\n        }\n        while ($i != $index) {\n            if ($node->getNext() == null) {\n                return false;\n            }\n            $prevNode = $node;\n            $node     = $node->getNext();\n            $i++;\n        }\n        return $this->delLink($node, $prevNode);\n    }\n\n    /**\n     *  Functional description : 获取链表上所有数据\n     *  Programmer : Mr.Liu\n     * @return array\n     */\n    public function getLinkData()\n    {\n        $node = $this->getHeader();\n        $list = [];\n\n        //根节点处理\n        if ($node->getData() != null) {\n            $list[] = $node->getData();\n        }\n\n        //从下一个节点开始获取数据\n        $node = $node->getNext();\n        if ($node->getData() == null) {\n            return $list;\n        }\n        while ($node->getData() != null && $node->getNext() != null) {\n            $list[] = $node->getData();\n            $node   = $node->getNext();\n        }\n        return $list;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * 添加D到1示例：A-B-C ==> A-D-B-C\n     * @param int $index\n     * @param string $data\n     * @return bool\n     */\n    public function addByIndex(int $index,string $data){\n        $node  = $this->getHeader();\n        $i=0;\n        while ($i != $index){\n            if ($node->getNext() == null) {\n                return false;\n            }\n            $node = $node->getNext();\n            $i++;\n\n        }\n        //进行添加\n        $node->setNext(new Node($data,$node->getNext()));\n        $this->len++;\n        return true;\n    }\n\n}\n```\n\n","slug":"Linked-List","published":1,"updated":"2019-03-27T09:49:34.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987li001e064182hp96rg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"1-什么是链表\"><a href=\"#1-什么是链表\" class=\"headerlink\" title=\"1. 什么是链表?\"></a>1. 什么是链表?</h3><blockquote>\n<p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表<a href=\"https://zh.wikipedia.org/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8\" target=\"_blank\" rel=\"noopener\">顺序表</a>快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p>\n</blockquote>\n<h3 id=\"2-链表的组成部分\"><a href=\"#2-链表的组成部分\" class=\"headerlink\" title=\"2. 链表的组成部分\"></a>2. 链表的组成部分</h3><blockquote>\n<p>链表通常由一连串节点组成，每个节点包含任意的实例数据（信息域 ）和一或两个用来指向上一个/或下一个节点的位置的链接（链域）</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"3-数组和链\"><a href=\"#3-数组和链\" class=\"headerlink\" title=\"3. 数组和链\"></a>3. 数组和链</h3><ul>\n<li>链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理</li>\n</ul>\n<h3 id=\"4-数组与链表的优缺点\"><a href=\"#4-数组与链表的优缺点\" class=\"headerlink\" title=\"4. 数组与链表的优缺点\"></a>4. 数组与链表的优缺点</h3><ol>\n<li>存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；</li>\n<li>存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　</li>\n<li>存储空间上，链表由于带有指针域，存储密度不如数组大；　</li>\n<li>按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；　</li>\n<li>按值查找时，若数组无序，数组和链表时间复杂度均为O(n)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；</li>\n<li>插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；</li>\n<li>空间分配方面：<blockquote>\n<p>数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败；<br>　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效； </p>\n</blockquote>\n</li>\n<li>经典数据结构涵盖了多种抽象数据类型（ADT），其中包括栈、队列、有序列表、排序表、哈希表及分散表、树、优先队列、集合和图等。对于每种情况，都可以选用数组或某一种链表数据结构来实现其抽象数据类型（ADT）。由于数组和链表几乎是建立所有ADT的基础，所以称数组与链表为基本数据结构</li>\n</ol>\n<h3 id=\"5-链表类型\"><a href=\"#5-链表类型\" class=\"headerlink\" title=\"5. 链表类型\"></a>5. 链表类型</h3><ul>\n<li>单向链表</li>\n<li><a href=\"\">双向链表</a></li>\n<li><a href=\"\">循环链表</a></li>\n</ul>\n<h3 id=\"6-单向链表\"><a href=\"#6-单向链表\" class=\"headerlink\" title=\"6. 单向链表\"></a>6. 单向链表</h3><blockquote>\n<p>链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。</p>\n</blockquote>\n<p><code>一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。</code></p>\n<p><img src=\"https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list.png\" alt=\"单向链表图\"></p>\n<h3 id=\"7-代码（PHP）实现单向链表\"><a href=\"#7-代码（PHP）实现单向链表\" class=\"headerlink\" title=\"7. 代码（PHP）实现单向链表\"></a>7. 代码（PHP）实现单向链表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Data;<span class=\"comment\">//数据集</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Next;<span class=\"comment\">//下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($data, $next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setData($data);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setNext($next);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setData</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Data = $data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNext</span><span class=\"params\">($next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Next = $next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNext</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class LinkList</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $header;<span class=\"comment\">//链表头部信息</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $len;<span class=\"comment\">//链表长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * LinkList constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setHeader(<span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeader</span><span class=\"params\">(Node $node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;header = $node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取当前节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeader</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取链表长度</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(string $data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"comment\">//查找没有子节点的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到后设置其下级节点</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data, <span class=\"keyword\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//链表长度递增</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $currentNode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $prevNode</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 示例：A-B-C ==&gt; A-C</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delLink</span><span class=\"params\">(Node $currentNode, Node $prevNode)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $prevNode-&gt;setNext($currentNode-&gt;getNext());</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 根据节点的数据进行删除</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delByData</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node     = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $prevNode = $node;</span><br><span class=\"line\">        <span class=\"comment\">//查找没有数据一致的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getData() != $data) &#123;</span><br><span class=\"line\">            $prevNode = $node;</span><br><span class=\"line\">            $node     = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除(把要删的节点A下的子节点位置移到A节点，从而删除)</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;delLink($node, $prevNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 删除第一个节点0~N</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delByIndex</span><span class=\"params\">(int $index)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = $prevNode = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $i    = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($i &gt; <span class=\"keyword\">$this</span>-&gt;getLen() <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">            <span class=\"comment\">//节点超</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($i != $index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($node-&gt;getNext() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $prevNode = $node;</span><br><span class=\"line\">            $node     = $node-&gt;getNext();</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;delLink($node, $prevNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取链表上所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLinkData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根节点处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($node-&gt;getData() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $list[] = $node-&gt;getData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从下一个节点开始获取数据</span></span><br><span class=\"line\">        $node = $node-&gt;getNext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($node-&gt;getData() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getData() != <span class=\"keyword\">null</span> &amp;&amp; $node-&gt;getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $list[] = $node-&gt;getData();</span><br><span class=\"line\">            $node   = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加D到1示例：A-B-C ==&gt; A-D-B-C</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $data</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addByIndex</span><span class=\"params\">(int $index,string $data)</span></span>&#123;</span><br><span class=\"line\">        $node  = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($i != $index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($node-&gt;getNext() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//进行添加</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data,$node-&gt;getNext()));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-什么是链表\"><a href=\"#1-什么是链表\" class=\"headerlink\" title=\"1. 什么是链表?\"></a>1. 什么是链表?</h3><blockquote>\n<p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表<a href=\"https://zh.wikipedia.org/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8\" target=\"_blank\" rel=\"noopener\">顺序表</a>快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p>\n</blockquote>\n<h3 id=\"2-链表的组成部分\"><a href=\"#2-链表的组成部分\" class=\"headerlink\" title=\"2. 链表的组成部分\"></a>2. 链表的组成部分</h3><blockquote>\n<p>链表通常由一连串节点组成，每个节点包含任意的实例数据（信息域 ）和一或两个用来指向上一个/或下一个节点的位置的链接（链域）</p>\n</blockquote>","more":"<h3 id=\"3-数组和链\"><a href=\"#3-数组和链\" class=\"headerlink\" title=\"3. 数组和链\"></a>3. 数组和链</h3><ul>\n<li>链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理</li>\n</ul>\n<h3 id=\"4-数组与链表的优缺点\"><a href=\"#4-数组与链表的优缺点\" class=\"headerlink\" title=\"4. 数组与链表的优缺点\"></a>4. 数组与链表的优缺点</h3><ol>\n<li>存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；</li>\n<li>存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　</li>\n<li>存储空间上，链表由于带有指针域，存储密度不如数组大；　</li>\n<li>按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；　</li>\n<li>按值查找时，若数组无序，数组和链表时间复杂度均为O(n)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；</li>\n<li>插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；</li>\n<li>空间分配方面：<blockquote>\n<p>数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败；<br>　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效； </p>\n</blockquote>\n</li>\n<li>经典数据结构涵盖了多种抽象数据类型（ADT），其中包括栈、队列、有序列表、排序表、哈希表及分散表、树、优先队列、集合和图等。对于每种情况，都可以选用数组或某一种链表数据结构来实现其抽象数据类型（ADT）。由于数组和链表几乎是建立所有ADT的基础，所以称数组与链表为基本数据结构</li>\n</ol>\n<h3 id=\"5-链表类型\"><a href=\"#5-链表类型\" class=\"headerlink\" title=\"5. 链表类型\"></a>5. 链表类型</h3><ul>\n<li>单向链表</li>\n<li><a href=\"\">双向链表</a></li>\n<li><a href=\"\">循环链表</a></li>\n</ul>\n<h3 id=\"6-单向链表\"><a href=\"#6-单向链表\" class=\"headerlink\" title=\"6. 单向链表\"></a>6. 单向链表</h3><blockquote>\n<p>链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。</p>\n</blockquote>\n<p><code>一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。</code></p>\n<p><img src=\"https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list.png\" alt=\"单向链表图\"></p>\n<h3 id=\"7-代码（PHP）实现单向链表\"><a href=\"#7-代码（PHP）实现单向链表\" class=\"headerlink\" title=\"7. 代码（PHP）实现单向链表\"></a>7. 代码（PHP）实现单向链表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Data;<span class=\"comment\">//数据集</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Next;<span class=\"comment\">//下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($data, $next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setData($data);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setNext($next);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setData</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Data = $data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNext</span><span class=\"params\">($next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Next = $next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNext</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class LinkList</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $header;<span class=\"comment\">//链表头部信息</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $len;<span class=\"comment\">//链表长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * LinkList constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setHeader(<span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeader</span><span class=\"params\">(Node $node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;header = $node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取当前节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeader</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取链表长度</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(string $data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"comment\">//查找没有子节点的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到后设置其下级节点</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data, <span class=\"keyword\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//链表长度递增</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $currentNode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $prevNode</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 示例：A-B-C ==&gt; A-C</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delLink</span><span class=\"params\">(Node $currentNode, Node $prevNode)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $prevNode-&gt;setNext($currentNode-&gt;getNext());</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 根据节点的数据进行删除</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delByData</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node     = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $prevNode = $node;</span><br><span class=\"line\">        <span class=\"comment\">//查找没有数据一致的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getData() != $data) &#123;</span><br><span class=\"line\">            $prevNode = $node;</span><br><span class=\"line\">            $node     = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除(把要删的节点A下的子节点位置移到A节点，从而删除)</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;delLink($node, $prevNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 删除第一个节点0~N</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delByIndex</span><span class=\"params\">(int $index)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = $prevNode = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $i    = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($i &gt; <span class=\"keyword\">$this</span>-&gt;getLen() <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">            <span class=\"comment\">//节点超</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($i != $index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($node-&gt;getNext() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $prevNode = $node;</span><br><span class=\"line\">            $node     = $node-&gt;getNext();</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;delLink($node, $prevNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取链表上所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLinkData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根节点处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($node-&gt;getData() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $list[] = $node-&gt;getData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从下一个节点开始获取数据</span></span><br><span class=\"line\">        $node = $node-&gt;getNext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($node-&gt;getData() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getData() != <span class=\"keyword\">null</span> &amp;&amp; $node-&gt;getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $list[] = $node-&gt;getData();</span><br><span class=\"line\">            $node   = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加D到1示例：A-B-C ==&gt; A-D-B-C</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $data</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addByIndex</span><span class=\"params\">(int $index,string $data)</span></span>&#123;</span><br><span class=\"line\">        $node  = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        $i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($i != $index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($node-&gt;getNext() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//进行添加</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data,$node-&gt;getNext()));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"双向链表、循环链","date":"2019-03-27T09:34:29.000Z","_content":"\n### 1. 什么是双向链表?\n>双向链表(双链表)又叫双面链表,双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。\n\n`由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在数组里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。`\n\n![双向链表图](https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list_two.png)\n\n<!--more-->\n### 2. 什么是循环链表?\n>循环链表指的是首节点和末节点被连接在一起的链表，这种方式在单向和双向链表中皆可实现。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理。\n![循环链表图](https://mrliuqh.github.io/directionsImg/dataStructure/cycle_list.png)\n\n\n### 3. 单向链表与双向链表优缺点\n#### 3.1 单向链表\n**优点：**\n- 单向链表增加删除节点简单。遍历时候不会死循环。（双向也不会死循环，循环链表忘了进行控制的话很容易进入死循环）\n\n**缺点：**\n- 只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。\n\n#### 3.2 双向链表\n**优点：**\n- 可以找到前驱和后继，可进可退。\n\n**缺点：**\n- 增加删除节点复杂（其实就复杂一点点）\n\n### 4. 代码（PHP）实现双向链表\n```php\n<?php\n/**\n * Class Node\n */\nclass Node\n{\n    /**\n     *\n     * @var\n     */\n    private $Data;//数据集\n    /**\n     *\n     * @var\n     */\n    private $Prev;//上一个节点\n    /**\n     *\n     * @var\n     */\n    private $Next;//下一个节点\n\n    /**\n     * Node constructor.\n     * @param $next\n     * @param $data\n     * @param $prev\n     */\n    public function __construct($data, $next,$prev)\n    {\n        $this->setData($data);\n        $this->setNext($next);\n        $this->setPrev($prev);\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function setData($data)\n    {\n        $this->Data = $data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getData()\n    {\n        return $this->Data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $next\n     */\n    public function setNext($next)\n    {\n        $this->Next = $next;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getNext()\n    {\n        return $this->Next;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $prev\n     */\n    public function setPrev($prev)\n    {\n        $this->Prev = $prev;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getPrev()\n    {\n        return $this->Prev;\n    }\n\n}\n\n/**\n * Class LinkList\n */\nclass LinkList\n{\n    /**\n     *\n     * @var\n     */\n    private $header;\n\n    /**\n     *\n     * @var\n     */\n    private $len;//链表长度\n\n\n    /**\n     * LinkList constructor.\n     */\n    public function __construct()\n    {\n        //初始化根节点\n        $this->setHeader(new Node(null, null,null));\n        $this->len = 0;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param Node $node\n     */\n    public function setHeader(Node $node)\n    {\n        $this->header = $node;\n    }\n\n    /**\n     *  Functional description : 获取头部节点\n     *  Programmer : Mr.Liu\n     * @return Node\n     */\n    public function getHeader()\n    : Node\n    {\n        return $this->header;\n    }\n\n\n    /**\n     *  Functional description : 获取链表长度\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getLen()\n    : int\n    {\n        return $this->len;\n    }\n\n\n    /**\n     *  Functional description : 末尾追加\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function append($data)\n    {\n        $node = $this->getHeader();\n        //查找没有子节点的节点\n        while ($node->getNext() != null) {\n            $node = $node->getNext();\n        }\n        //找到后设置其下级节点\n        $node->setNext(new Node($data, null,$node));\n        //链表长度递增\n        $this->len++;\n    }\n\n\n    /**\n     *  Functional description : 头部添加\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function addFirst($data){\n        $rootNode = $this->getHeader();\n        //查找没有子节点的节点(根节点)\n        while ($rootNode->getPrev() != null) {\n            $rootNode = $rootNode->getPrev();\n        }\n        //Root-A-B-C Root-D-A-B-C\n        $oldFirst = $rootNode->getNext();\n        $newFirst = new Node($data,$oldFirst,$rootNode);\n        $oldFirst->setPrev($newFirst);\n        $rootNode->setNext($newFirst);\n        $this->len++;\n    }\n\n    /**\n     *  Functional description : 根据指定位置添加\n     *  Programmer : Mr.Liu\n     * @param int $index\n     * @param $data\n     */\n    public function insertByIndex(int $index,$data){\n        $key = 1;\n        //尾部添加\n        if ($this->getLen() < $index){\n            $this->append($data);\n            return;\n        }\n        //头部添加\n        if ($index == 1){\n            $this->addFirst($data);\n            return;\n        }\n\n        $node = $this->getHeader();\n        while ($key < $index){\n            $node = $node->getNext();\n            $key++;\n        }\n        //中间添加 如：添加D到A和B之间 A-B-C  ---> A-D-B-C\n        $node->setNext(new Node($data,$node->getNext(),$node));\n        $this->len++;\n    }\n\n\n    /**\n     *  Functional description : 删除第一个节点\n     *  Programmer : Mr.Liu\n     */\n    public function delFirst(){\n        $rootNode = $this->getHeader();\n        while ($rootNode->getPrev() !=null){\n            $rootNode = $rootNode->getPrev();\n        }\n        //删除：ROOT-A-B-C  -->  ROOT-B-C\n        $firstNode = $rootNode->getNext();\n        $secondNode = $firstNode->getNext();\n        $rootNode->setNext($secondNode);\n        $secondNode->setPrev($rootNode);\n        $this->len--;\n    }\n\n    /**\n     *  Functional description : 删除最后一个节点\n     *  Programmer : Mr.Liu\n     */\n    public function delLast(){\n        $node = $this->getHeader();\n        while ($node->getNext() !=null){\n            $node = $node->getNext();\n        }\n        //删除：ROOT-A-B-C  -->  ROOT-A-B\n        $newLastNode = $node->getPrev();\n        $newLastNode->setNext(null);\n        $this->len--;\n    }\n\n\n    /**\n     *  Functional description : 反转双向链表\n     *  Programmer : Mr.Liu\n     * @return void\n     */\n    public function reverse(){\n        if ($this->getHeader() != null){\n            return ;\n        }\n\n        //除去根节点后的节点\n        $currentNode = $this->getHeader()->getNext();\n        //后一个节点\n        $next=null;\n        $prev=null;//根节点,当前为null\n        //rootNode->0->1->2->3 -->  3->2->1->0\n        //查找最后一个\n        while ($currentNode != null){\n            //用一个变量暂时存储后一节点，因为一旦前面反转，就断链了\n            $next = $currentNode->getNext();\n            //将前一节点作为当前节点的后一节点，是为反转\n            $currentNode->setNext($prev);\n            $currentNode->setPrev($next);\n\n            #指针后移\n            $prev = $currentNode;\n            $currentNode = $next;\n\n        }\n        return $prev;\n    }\n\n}\n```","source":"_posts/Lisked-List-two.md","raw":"---\ntitle: 双向链表、循环链\ndate: 2019-03-27 17:34:29\ntags:\n - 双链表\n - 循环链\ncategories:\n - 数据结构\n---\n\n### 1. 什么是双向链表?\n>双向链表(双链表)又叫双面链表,双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。\n\n`由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在数组里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。`\n\n![双向链表图](https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list_two.png)\n\n<!--more-->\n### 2. 什么是循环链表?\n>循环链表指的是首节点和末节点被连接在一起的链表，这种方式在单向和双向链表中皆可实现。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理。\n![循环链表图](https://mrliuqh.github.io/directionsImg/dataStructure/cycle_list.png)\n\n\n### 3. 单向链表与双向链表优缺点\n#### 3.1 单向链表\n**优点：**\n- 单向链表增加删除节点简单。遍历时候不会死循环。（双向也不会死循环，循环链表忘了进行控制的话很容易进入死循环）\n\n**缺点：**\n- 只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。\n\n#### 3.2 双向链表\n**优点：**\n- 可以找到前驱和后继，可进可退。\n\n**缺点：**\n- 增加删除节点复杂（其实就复杂一点点）\n\n### 4. 代码（PHP）实现双向链表\n```php\n<?php\n/**\n * Class Node\n */\nclass Node\n{\n    /**\n     *\n     * @var\n     */\n    private $Data;//数据集\n    /**\n     *\n     * @var\n     */\n    private $Prev;//上一个节点\n    /**\n     *\n     * @var\n     */\n    private $Next;//下一个节点\n\n    /**\n     * Node constructor.\n     * @param $next\n     * @param $data\n     * @param $prev\n     */\n    public function __construct($data, $next,$prev)\n    {\n        $this->setData($data);\n        $this->setNext($next);\n        $this->setPrev($prev);\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function setData($data)\n    {\n        $this->Data = $data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getData()\n    {\n        return $this->Data;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $next\n     */\n    public function setNext($next)\n    {\n        $this->Next = $next;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getNext()\n    {\n        return $this->Next;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param $prev\n     */\n    public function setPrev($prev)\n    {\n        $this->Prev = $prev;\n    }\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getPrev()\n    {\n        return $this->Prev;\n    }\n\n}\n\n/**\n * Class LinkList\n */\nclass LinkList\n{\n    /**\n     *\n     * @var\n     */\n    private $header;\n\n    /**\n     *\n     * @var\n     */\n    private $len;//链表长度\n\n\n    /**\n     * LinkList constructor.\n     */\n    public function __construct()\n    {\n        //初始化根节点\n        $this->setHeader(new Node(null, null,null));\n        $this->len = 0;\n    }\n\n\n    /**\n     *  Functional description :\n     *  Programmer : Mr.Liu\n     * @param Node $node\n     */\n    public function setHeader(Node $node)\n    {\n        $this->header = $node;\n    }\n\n    /**\n     *  Functional description : 获取头部节点\n     *  Programmer : Mr.Liu\n     * @return Node\n     */\n    public function getHeader()\n    : Node\n    {\n        return $this->header;\n    }\n\n\n    /**\n     *  Functional description : 获取链表长度\n     *  Programmer : Mr.Liu\n     * @return mixed\n     */\n    public function getLen()\n    : int\n    {\n        return $this->len;\n    }\n\n\n    /**\n     *  Functional description : 末尾追加\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function append($data)\n    {\n        $node = $this->getHeader();\n        //查找没有子节点的节点\n        while ($node->getNext() != null) {\n            $node = $node->getNext();\n        }\n        //找到后设置其下级节点\n        $node->setNext(new Node($data, null,$node));\n        //链表长度递增\n        $this->len++;\n    }\n\n\n    /**\n     *  Functional description : 头部添加\n     *  Programmer : Mr.Liu\n     * @param $data\n     */\n    public function addFirst($data){\n        $rootNode = $this->getHeader();\n        //查找没有子节点的节点(根节点)\n        while ($rootNode->getPrev() != null) {\n            $rootNode = $rootNode->getPrev();\n        }\n        //Root-A-B-C Root-D-A-B-C\n        $oldFirst = $rootNode->getNext();\n        $newFirst = new Node($data,$oldFirst,$rootNode);\n        $oldFirst->setPrev($newFirst);\n        $rootNode->setNext($newFirst);\n        $this->len++;\n    }\n\n    /**\n     *  Functional description : 根据指定位置添加\n     *  Programmer : Mr.Liu\n     * @param int $index\n     * @param $data\n     */\n    public function insertByIndex(int $index,$data){\n        $key = 1;\n        //尾部添加\n        if ($this->getLen() < $index){\n            $this->append($data);\n            return;\n        }\n        //头部添加\n        if ($index == 1){\n            $this->addFirst($data);\n            return;\n        }\n\n        $node = $this->getHeader();\n        while ($key < $index){\n            $node = $node->getNext();\n            $key++;\n        }\n        //中间添加 如：添加D到A和B之间 A-B-C  ---> A-D-B-C\n        $node->setNext(new Node($data,$node->getNext(),$node));\n        $this->len++;\n    }\n\n\n    /**\n     *  Functional description : 删除第一个节点\n     *  Programmer : Mr.Liu\n     */\n    public function delFirst(){\n        $rootNode = $this->getHeader();\n        while ($rootNode->getPrev() !=null){\n            $rootNode = $rootNode->getPrev();\n        }\n        //删除：ROOT-A-B-C  -->  ROOT-B-C\n        $firstNode = $rootNode->getNext();\n        $secondNode = $firstNode->getNext();\n        $rootNode->setNext($secondNode);\n        $secondNode->setPrev($rootNode);\n        $this->len--;\n    }\n\n    /**\n     *  Functional description : 删除最后一个节点\n     *  Programmer : Mr.Liu\n     */\n    public function delLast(){\n        $node = $this->getHeader();\n        while ($node->getNext() !=null){\n            $node = $node->getNext();\n        }\n        //删除：ROOT-A-B-C  -->  ROOT-A-B\n        $newLastNode = $node->getPrev();\n        $newLastNode->setNext(null);\n        $this->len--;\n    }\n\n\n    /**\n     *  Functional description : 反转双向链表\n     *  Programmer : Mr.Liu\n     * @return void\n     */\n    public function reverse(){\n        if ($this->getHeader() != null){\n            return ;\n        }\n\n        //除去根节点后的节点\n        $currentNode = $this->getHeader()->getNext();\n        //后一个节点\n        $next=null;\n        $prev=null;//根节点,当前为null\n        //rootNode->0->1->2->3 -->  3->2->1->0\n        //查找最后一个\n        while ($currentNode != null){\n            //用一个变量暂时存储后一节点，因为一旦前面反转，就断链了\n            $next = $currentNode->getNext();\n            //将前一节点作为当前节点的后一节点，是为反转\n            $currentNode->setNext($prev);\n            $currentNode->setPrev($next);\n\n            #指针后移\n            $prev = $currentNode;\n            $currentNode = $next;\n\n        }\n        return $prev;\n    }\n\n}\n```","slug":"Lisked-List-two","published":1,"updated":"2019-03-27T10:07:02.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987lj001g0641e8dah61d","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"1-什么是双向链表\"><a href=\"#1-什么是双向链表\" class=\"headerlink\" title=\"1. 什么是双向链表?\"></a>1. 什么是双向链表?</h3><blockquote>\n<p>双向链表(双链表)又叫双面链表,双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。</p>\n</blockquote>\n<p><code>由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在数组里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。</code></p>\n<p><img src=\"https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list_two.png\" alt=\"双向链表图\"></p>\n<a id=\"more\"></a>\n<h3 id=\"2-什么是循环链表\"><a href=\"#2-什么是循环链表\" class=\"headerlink\" title=\"2. 什么是循环链表?\"></a>2. 什么是循环链表?</h3><blockquote>\n<p>循环链表指的是首节点和末节点被连接在一起的链表，这种方式在单向和双向链表中皆可实现。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理。<br><img src=\"https://mrliuqh.github.io/directionsImg/dataStructure/cycle_list.png\" alt=\"循环链表图\"></p>\n</blockquote>\n<h3 id=\"3-单向链表与双向链表优缺点\"><a href=\"#3-单向链表与双向链表优缺点\" class=\"headerlink\" title=\"3. 单向链表与双向链表优缺点\"></a>3. 单向链表与双向链表优缺点</h3><h4 id=\"3-1-单向链表\"><a href=\"#3-1-单向链表\" class=\"headerlink\" title=\"3.1 单向链表\"></a>3.1 单向链表</h4><p><strong>优点：</strong></p>\n<ul>\n<li>单向链表增加删除节点简单。遍历时候不会死循环。（双向也不会死循环，循环链表忘了进行控制的话很容易进入死循环）</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。</li>\n</ul>\n<h4 id=\"3-2-双向链表\"><a href=\"#3-2-双向链表\" class=\"headerlink\" title=\"3.2 双向链表\"></a>3.2 双向链表</h4><p><strong>优点：</strong></p>\n<ul>\n<li>可以找到前驱和后继，可进可退。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>增加删除节点复杂（其实就复杂一点点）</li>\n</ul>\n<h3 id=\"4-代码（PHP）实现双向链表\"><a href=\"#4-代码（PHP）实现双向链表\" class=\"headerlink\" title=\"4. 代码（PHP）实现双向链表\"></a>4. 代码（PHP）实现双向链表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Data;<span class=\"comment\">//数据集</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Prev;<span class=\"comment\">//上一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Next;<span class=\"comment\">//下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $prev</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($data, $next,$prev)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setData($data);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setNext($next);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setPrev($prev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setData</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Data = $data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNext</span><span class=\"params\">($next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Next = $next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNext</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $prev</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPrev</span><span class=\"params\">($prev)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Prev = $prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrev</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class LinkList</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $header;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $len;<span class=\"comment\">//链表长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * LinkList constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setHeader(<span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeader</span><span class=\"params\">(Node $node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;header = $node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取头部节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeader</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取链表长度</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 末尾追加</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"comment\">//查找没有子节点的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到后设置其下级节点</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data, <span class=\"keyword\">null</span>,$node));</span><br><span class=\"line\">        <span class=\"comment\">//链表长度递增</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 头部添加</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFirst</span><span class=\"params\">($data)</span></span>&#123;</span><br><span class=\"line\">        $rootNode = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"comment\">//查找没有子节点的节点(根节点)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($rootNode-&gt;getPrev() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $rootNode = $rootNode-&gt;getPrev();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Root-A-B-C Root-D-A-B-C</span></span><br><span class=\"line\">        $oldFirst = $rootNode-&gt;getNext();</span><br><span class=\"line\">        $newFirst = <span class=\"keyword\">new</span> Node($data,$oldFirst,$rootNode);</span><br><span class=\"line\">        $oldFirst-&gt;setPrev($newFirst);</span><br><span class=\"line\">        $rootNode-&gt;setNext($newFirst);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 根据指定位置添加</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertByIndex</span><span class=\"params\">(int $index,$data)</span></span>&#123;</span><br><span class=\"line\">        $key = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//尾部添加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getLen() &lt; $index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;append($data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//头部添加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($index == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;addFirst($data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($key &lt; $index)&#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">            $key++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//中间添加 如：添加D到A和B之间 A-B-C  ---&gt; A-D-B-C</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data,$node-&gt;getNext(),$node));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 删除第一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        $rootNode = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($rootNode-&gt;getPrev() !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            $rootNode = $rootNode-&gt;getPrev();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除：ROOT-A-B-C  --&gt;  ROOT-B-C</span></span><br><span class=\"line\">        $firstNode = $rootNode-&gt;getNext();</span><br><span class=\"line\">        $secondNode = $firstNode-&gt;getNext();</span><br><span class=\"line\">        $rootNode-&gt;setNext($secondNode);</span><br><span class=\"line\">        $secondNode-&gt;setPrev($rootNode);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 删除最后一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delLast</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getNext() !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除：ROOT-A-B-C  --&gt;  ROOT-A-B</span></span><br><span class=\"line\">        $newLastNode = $node-&gt;getPrev();</span><br><span class=\"line\">        $newLastNode-&gt;setNext(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 反转双向链表</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getHeader() != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//除去根节点后的节点</span></span><br><span class=\"line\">        $currentNode = <span class=\"keyword\">$this</span>-&gt;getHeader()-&gt;getNext();</span><br><span class=\"line\">        <span class=\"comment\">//后一个节点</span></span><br><span class=\"line\">        $next=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        $prev=<span class=\"keyword\">null</span>;<span class=\"comment\">//根节点,当前为null</span></span><br><span class=\"line\">        <span class=\"comment\">//rootNode-&gt;0-&gt;1-&gt;2-&gt;3 --&gt;  3-&gt;2-&gt;1-&gt;0</span></span><br><span class=\"line\">        <span class=\"comment\">//查找最后一个</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($currentNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//用一个变量暂时存储后一节点，因为一旦前面反转，就断链了</span></span><br><span class=\"line\">            $next = $currentNode-&gt;getNext();</span><br><span class=\"line\">            <span class=\"comment\">//将前一节点作为当前节点的后一节点，是为反转</span></span><br><span class=\"line\">            $currentNode-&gt;setNext($prev);</span><br><span class=\"line\">            $currentNode-&gt;setPrev($next);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#指针后移</span></span><br><span class=\"line\">            $prev = $currentNode;</span><br><span class=\"line\">            $currentNode = $next;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"1-什么是双向链表\"><a href=\"#1-什么是双向链表\" class=\"headerlink\" title=\"1. 什么是双向链表?\"></a>1. 什么是双向链表?</h3><blockquote>\n<p>双向链表(双链表)又叫双面链表,双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。</p>\n</blockquote>\n<p><code>由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在数组里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。</code></p>\n<p><img src=\"https://mrliuqh.github.io/directionsImg/dataStructure/Unidirectional_linked_list_two.png\" alt=\"双向链表图\"></p>","more":"<h3 id=\"2-什么是循环链表\"><a href=\"#2-什么是循环链表\" class=\"headerlink\" title=\"2. 什么是循环链表?\"></a>2. 什么是循环链表?</h3><blockquote>\n<p>循环链表指的是首节点和末节点被连接在一起的链表，这种方式在单向和双向链表中皆可实现。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理。<br><img src=\"https://mrliuqh.github.io/directionsImg/dataStructure/cycle_list.png\" alt=\"循环链表图\"></p>\n</blockquote>\n<h3 id=\"3-单向链表与双向链表优缺点\"><a href=\"#3-单向链表与双向链表优缺点\" class=\"headerlink\" title=\"3. 单向链表与双向链表优缺点\"></a>3. 单向链表与双向链表优缺点</h3><h4 id=\"3-1-单向链表\"><a href=\"#3-1-单向链表\" class=\"headerlink\" title=\"3.1 单向链表\"></a>3.1 单向链表</h4><p><strong>优点：</strong></p>\n<ul>\n<li>单向链表增加删除节点简单。遍历时候不会死循环。（双向也不会死循环，循环链表忘了进行控制的话很容易进入死循环）</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。</li>\n</ul>\n<h4 id=\"3-2-双向链表\"><a href=\"#3-2-双向链表\" class=\"headerlink\" title=\"3.2 双向链表\"></a>3.2 双向链表</h4><p><strong>优点：</strong></p>\n<ul>\n<li>可以找到前驱和后继，可进可退。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>增加删除节点复杂（其实就复杂一点点）</li>\n</ul>\n<h3 id=\"4-代码（PHP）实现双向链表\"><a href=\"#4-代码（PHP）实现双向链表\" class=\"headerlink\" title=\"4. 代码（PHP）实现双向链表\"></a>4. 代码（PHP）实现双向链表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Data;<span class=\"comment\">//数据集</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Prev;<span class=\"comment\">//上一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $Next;<span class=\"comment\">//下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $prev</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($data, $next,$prev)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setData($data);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setNext($next);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setPrev($prev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setData</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Data = $data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $next</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNext</span><span class=\"params\">($next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Next = $next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNext</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $prev</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPrev</span><span class=\"params\">($prev)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;Prev = $prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrev</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;Prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class LinkList</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $header;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $len;<span class=\"comment\">//链表长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * LinkList constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setHeader(<span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description :</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeader</span><span class=\"params\">(Node $node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;header = $node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取头部节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeader</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 获取链表长度</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    : <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 末尾追加</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"comment\">//查找没有子节点的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到后设置其下级节点</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data, <span class=\"keyword\">null</span>,$node));</span><br><span class=\"line\">        <span class=\"comment\">//链表长度递增</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 头部添加</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFirst</span><span class=\"params\">($data)</span></span>&#123;</span><br><span class=\"line\">        $rootNode = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"comment\">//查找没有子节点的节点(根节点)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($rootNode-&gt;getPrev() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            $rootNode = $rootNode-&gt;getPrev();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Root-A-B-C Root-D-A-B-C</span></span><br><span class=\"line\">        $oldFirst = $rootNode-&gt;getNext();</span><br><span class=\"line\">        $newFirst = <span class=\"keyword\">new</span> Node($data,$oldFirst,$rootNode);</span><br><span class=\"line\">        $oldFirst-&gt;setPrev($newFirst);</span><br><span class=\"line\">        $rootNode-&gt;setNext($newFirst);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 根据指定位置添加</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertByIndex</span><span class=\"params\">(int $index,$data)</span></span>&#123;</span><br><span class=\"line\">        $key = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//尾部添加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getLen() &lt; $index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;append($data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//头部添加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($index == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;addFirst($data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($key &lt; $index)&#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">            $key++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//中间添加 如：添加D到A和B之间 A-B-C  ---&gt; A-D-B-C</span></span><br><span class=\"line\">        $node-&gt;setNext(<span class=\"keyword\">new</span> Node($data,$node-&gt;getNext(),$node));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 删除第一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        $rootNode = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($rootNode-&gt;getPrev() !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            $rootNode = $rootNode-&gt;getPrev();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除：ROOT-A-B-C  --&gt;  ROOT-B-C</span></span><br><span class=\"line\">        $firstNode = $rootNode-&gt;getNext();</span><br><span class=\"line\">        $secondNode = $firstNode-&gt;getNext();</span><br><span class=\"line\">        $rootNode-&gt;setNext($secondNode);</span><br><span class=\"line\">        $secondNode-&gt;setPrev($rootNode);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 删除最后一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delLast</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">$this</span>-&gt;getHeader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($node-&gt;getNext() !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            $node = $node-&gt;getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除：ROOT-A-B-C  --&gt;  ROOT-A-B</span></span><br><span class=\"line\">        $newLastNode = $node-&gt;getPrev();</span><br><span class=\"line\">        $newLastNode-&gt;setNext(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Functional description : 反转双向链表</span></span><br><span class=\"line\"><span class=\"comment\">     *  Programmer : Mr.Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getHeader() != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//除去根节点后的节点</span></span><br><span class=\"line\">        $currentNode = <span class=\"keyword\">$this</span>-&gt;getHeader()-&gt;getNext();</span><br><span class=\"line\">        <span class=\"comment\">//后一个节点</span></span><br><span class=\"line\">        $next=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        $prev=<span class=\"keyword\">null</span>;<span class=\"comment\">//根节点,当前为null</span></span><br><span class=\"line\">        <span class=\"comment\">//rootNode-&gt;0-&gt;1-&gt;2-&gt;3 --&gt;  3-&gt;2-&gt;1-&gt;0</span></span><br><span class=\"line\">        <span class=\"comment\">//查找最后一个</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($currentNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//用一个变量暂时存储后一节点，因为一旦前面反转，就断链了</span></span><br><span class=\"line\">            $next = $currentNode-&gt;getNext();</span><br><span class=\"line\">            <span class=\"comment\">//将前一节点作为当前节点的后一节点，是为反转</span></span><br><span class=\"line\">            $currentNode-&gt;setNext($prev);</span><br><span class=\"line\">            $currentNode-&gt;setPrev($next);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#指针后移</span></span><br><span class=\"line\">            $prev = $currentNode;</span><br><span class=\"line\">            $currentNode = $next;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"nginx 配置调优","date":"2019-03-28T12:57:02.000Z","_content":"\n## 1. nginx.conf 配置文件\n```\n#运行的用户\nuser www-data;\npid /var/run/nginx.pid;\n\n#定义了nginx对外提供web服务时的worder进程数，CPU核的数量、存储数据的硬盘数量及负载模式\nworker_processes auto; \n\n#更改worker进程的最大打开文件数限制,比'ulimit -a'多。解决\"too many open files\"\nworker_rlimit_nofile 100000; \nevents {\n    #worker进程同时打开的最大连接数\n    worker_connections 65536; \n    #当收到一个新连接通知后接受尽可能多的连接\n    multi_accept on; \n    #设置用于复用客户端线程的轮询方法,epoll需要linux2.6+\n    use epoll; \n}\nhttp {\n    access_log off; #设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)\n    error_log /var/log/nginx/error.log crit; #告诉nginx只能记录严重的错误\n    \n  #HTTP和TCP优化\n    keepalive_timeout 10; #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接\n    keepalive_requests 1024;#限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接。\n    tcp_nopush on; #在一个数据包里发送所有头文件，而不一个接一个的发送\n    tcp_nodelay on; #nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。\n    \n  #Buffers size优化\n    client_body_buffer_size  128k;#处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。128k通常是此设置的不错选择。\n    client_max_body_size  10m;#置最大body缓冲区大小。如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查\n    client_header_buffer_size    1k; #处理客户端头大小。 默认情况下，1k通常是一个合理的选择。\n    large_client_header_buffers  4 4k; #设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。\n    output_buffers  1 32k;#置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。零值禁止推迟数据传输。\n    postpone_output  1460;#指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值\n    \n   #超时\n    client_header_timeout 10; #设置请求头超时时间，建议低\n    client_body_timeout 10; #请求体(各自)的超时时间\n    reset_timedout_connection on; #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间\n    send_timeout 10; #指定客户端的响应超时时间\n    \n  #静态资源服务\n    open_file_cache max=100000 inactive=20s; #打开缓存的同时也指定了缓存最大数目，以及缓存的时间\n    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间\n    open_file_cache_min_uses 2; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数\n    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件\n    \n  #Gzip压缩内容\n    gzip on; #开启gzip压缩\n    gzip_disable \"msie6\"; #低版本兼容\n    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求\n    gzip_static on; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源\n    gzip_min_length 1000; #设置对数据启用压缩的最少字节数\n    gzip_comp_level 6; #压缩级别,1-10越高越消耗CPU，但是压缩越好\n    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式\n  \n  #其他优化\n    limit_conn_zone $binary_remote_addr zone=addr:5m; #设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。\n    limit_conn addr 100; #给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。\n    server_tokens off; #关闭nginx版本号\n    sendfile on; #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)\n    \n    default_type text/html; #设置文件默认MIME-type\n    include /etc/nginx/mime.types; #只是一个在当前文件中包含另一个文件内容的指令。\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n```\n\n## 2.nginx.pid文件\n### 2.1 什么是 var/run/nginx.pid文件?\n<!--more-->\n var/run这个目录包含描述系统启动以来系统信息的数据。此文件夹下的文件必须在启动过程初期清除（删除或归零）。程序可以在/var/run下有自己的子文件夹。原先放在/etc下的进程标识（PID）文件必须放在/var/run里面。PID文件的命名惯例是<program-name>.pid。所以，nginx的PID文件名为/var/run/nginx.pid。\n\n`nginx.pid存放的是nginx的master进程的进程号。`\n### 2.2 nginx启动报错找不到nginx.pid\n`nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)`\n```\n[root@localhost nginx]# nginx -c /usr/local/nginx/conf/nginx.conf\n```\n## 3.Worker Processess 说明\n`通常来说设置一个cpu核心对应一个worker processer，最多不超过4个，提高worker process的值是为了提高计算能力，但一般在越到cpu瓶颈前，你会遇到别的瓶颈(如网络问题)只有当你要处理大量静态文件的磁盘I/O时，worker进程是单线程的，所以这个读取文件的阻塞IO会降低CPU的处理速度，这是可以增加worker进程数量，其它情况是不需要的。`\n```\n//一般设置为:auto\n# worker_processes auto;\n\n//如果你想手动设置，你可以使用以下命令行查找服务器的cpu线程数。\n# grep ^processor /proc/cpuinfo | wc -l\n```\n\n## 4.Worker进程连接数优化(worker_connections)\n`worker_connections选项设置每个worker进程一次可以处理的最大连接数。 默认情况下，worker连接限制为512，但系统可以处理比这值更多的连接。\n适当的值可以通过测试得出。`\n\n> 系统的核心限制也可以通过使用ulimit找到\n\n```\n# ulimit -n\n```\n\n## 5.HTTP和TCP优化\n\n### 5.1 Keep Alive:减少浏览器重新连接的次数\n- keepalive_timeout和keepalive_requests 控制保持活动设置。\n- sendfile 优化Nginx提供文件系统的静态文件服务的性能，如logo。\n- tcp_nodelay 允许Nginx使TCP发送多个缓冲区作为单独的数据包。\n- tcp_nopush 通过激活TCP堆栈中的TCP_CORK选项来优化一次向下游发送的数据量。TCP_CORK阻塞数据，直到分组到达MSS，这等于MTU减去IP报头的40或60字节。\n\n### 5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因\n> keepalive_requests 参数限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接\n\n`而我并没有配置 keepalive_requests，所以，就是使用的默认数 100，即一个长连接只能处理一百个请求，然后 Nginx 就就会主动关闭连接，使大量连接处于 TIME_WAIT 状态`\n\n## 6. Buffers size优化\n`调整缓冲区大小可能是有利的。 如果缓冲区大小太低，那么Nginx将写入一个临时文件。 这将导致过多的磁盘I/O。`\n\n- client_body_buffer_size 处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。 128k通常是此设置的不错选择。\n- client_max_body_size 设置最大body缓冲区大小。 如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查。\n- client_header_buffer_size 处理客户端头大小。 默认情况下，1k通常是一个合理的选择。\n- large_client_header_buffers 设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。\n- output_buffers 设置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。 零值禁止推迟数据传输。\n\n## 7. 超时设置\n`超时设置还可以大幅提高性能。`\n- client_body_timeout 指令设置服务器等待客户端完成发送body的最大时间。\n- client_header_timeout 指令设置服务器等待客户端完成发送header的最大时间。\n- sent_timeout 指定对客户端的响应超时。 此超时不适用于整个传输，而是仅应用于两个后续的客户端读取操作之间。 因此，如果客户端没有读取任何数据这段时间，那么Nginx关闭连接。\n\n## 8.静态资源服务\n`如果您的网站提供静态资源（如CSS/JavaScript/images），Nginx可以缓存这些文件很短的时间。`\n```\n#告诉Nginx缓存1000个文件30秒，不包括在20秒内未被访问的任何文件\nopen_file_cache max=100000 inactive=20s; \n#在open_file_cache中指定检测正确信息的间隔时间\nopen_file_cache_valid 30s; \n#定义了open_file_cache中指令参数不活动时间期间里最小的文件数\nopen_file_cache_min_uses 2; \n#指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件\nopen_file_cache_errors on; \n```\n>还可以缓存特定位置的资源,缓存文件很长时间是有好处的。如放在具体某个服务配置中..\n```\nlocation ~* .(woff|eot|ttf|svg|mp4|webm|jpg|jpeg|png|gif|ico|css|js)$ {\n    expires 365d;\n}\n```\n## 9.Gzip压缩内容\n```\n#开启gzip压缩\ngzip on; \n#低版本兼容\ngzip_disable \"msie6\"; \n#允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求\ngzip_proxied any; \n#告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源\ngzip_static on; \n#设置对数据启用压缩的最少字节数\ngzip_min_length 1000; \n#压缩级别,1-10越高越消耗CPU，但是压缩越好\ngzip_comp_level 6; \n#设置需要压缩的数据格式\ngzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; \n```","source":"_posts/nginx-optimization.md","raw":"---\ntitle: nginx 配置调优\ndate: 2019-03-28 20:57:02\ntags:\n - 调优\ncategories:\n - nginx\n---\n\n## 1. nginx.conf 配置文件\n```\n#运行的用户\nuser www-data;\npid /var/run/nginx.pid;\n\n#定义了nginx对外提供web服务时的worder进程数，CPU核的数量、存储数据的硬盘数量及负载模式\nworker_processes auto; \n\n#更改worker进程的最大打开文件数限制,比'ulimit -a'多。解决\"too many open files\"\nworker_rlimit_nofile 100000; \nevents {\n    #worker进程同时打开的最大连接数\n    worker_connections 65536; \n    #当收到一个新连接通知后接受尽可能多的连接\n    multi_accept on; \n    #设置用于复用客户端线程的轮询方法,epoll需要linux2.6+\n    use epoll; \n}\nhttp {\n    access_log off; #设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)\n    error_log /var/log/nginx/error.log crit; #告诉nginx只能记录严重的错误\n    \n  #HTTP和TCP优化\n    keepalive_timeout 10; #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接\n    keepalive_requests 1024;#限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接。\n    tcp_nopush on; #在一个数据包里发送所有头文件，而不一个接一个的发送\n    tcp_nodelay on; #nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。\n    \n  #Buffers size优化\n    client_body_buffer_size  128k;#处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。128k通常是此设置的不错选择。\n    client_max_body_size  10m;#置最大body缓冲区大小。如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查\n    client_header_buffer_size    1k; #处理客户端头大小。 默认情况下，1k通常是一个合理的选择。\n    large_client_header_buffers  4 4k; #设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。\n    output_buffers  1 32k;#置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。零值禁止推迟数据传输。\n    postpone_output  1460;#指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值\n    \n   #超时\n    client_header_timeout 10; #设置请求头超时时间，建议低\n    client_body_timeout 10; #请求体(各自)的超时时间\n    reset_timedout_connection on; #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间\n    send_timeout 10; #指定客户端的响应超时时间\n    \n  #静态资源服务\n    open_file_cache max=100000 inactive=20s; #打开缓存的同时也指定了缓存最大数目，以及缓存的时间\n    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间\n    open_file_cache_min_uses 2; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数\n    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件\n    \n  #Gzip压缩内容\n    gzip on; #开启gzip压缩\n    gzip_disable \"msie6\"; #低版本兼容\n    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求\n    gzip_static on; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源\n    gzip_min_length 1000; #设置对数据启用压缩的最少字节数\n    gzip_comp_level 6; #压缩级别,1-10越高越消耗CPU，但是压缩越好\n    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式\n  \n  #其他优化\n    limit_conn_zone $binary_remote_addr zone=addr:5m; #设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。\n    limit_conn addr 100; #给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。\n    server_tokens off; #关闭nginx版本号\n    sendfile on; #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)\n    \n    default_type text/html; #设置文件默认MIME-type\n    include /etc/nginx/mime.types; #只是一个在当前文件中包含另一个文件内容的指令。\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n```\n\n## 2.nginx.pid文件\n### 2.1 什么是 var/run/nginx.pid文件?\n<!--more-->\n var/run这个目录包含描述系统启动以来系统信息的数据。此文件夹下的文件必须在启动过程初期清除（删除或归零）。程序可以在/var/run下有自己的子文件夹。原先放在/etc下的进程标识（PID）文件必须放在/var/run里面。PID文件的命名惯例是<program-name>.pid。所以，nginx的PID文件名为/var/run/nginx.pid。\n\n`nginx.pid存放的是nginx的master进程的进程号。`\n### 2.2 nginx启动报错找不到nginx.pid\n`nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)`\n```\n[root@localhost nginx]# nginx -c /usr/local/nginx/conf/nginx.conf\n```\n## 3.Worker Processess 说明\n`通常来说设置一个cpu核心对应一个worker processer，最多不超过4个，提高worker process的值是为了提高计算能力，但一般在越到cpu瓶颈前，你会遇到别的瓶颈(如网络问题)只有当你要处理大量静态文件的磁盘I/O时，worker进程是单线程的，所以这个读取文件的阻塞IO会降低CPU的处理速度，这是可以增加worker进程数量，其它情况是不需要的。`\n```\n//一般设置为:auto\n# worker_processes auto;\n\n//如果你想手动设置，你可以使用以下命令行查找服务器的cpu线程数。\n# grep ^processor /proc/cpuinfo | wc -l\n```\n\n## 4.Worker进程连接数优化(worker_connections)\n`worker_connections选项设置每个worker进程一次可以处理的最大连接数。 默认情况下，worker连接限制为512，但系统可以处理比这值更多的连接。\n适当的值可以通过测试得出。`\n\n> 系统的核心限制也可以通过使用ulimit找到\n\n```\n# ulimit -n\n```\n\n## 5.HTTP和TCP优化\n\n### 5.1 Keep Alive:减少浏览器重新连接的次数\n- keepalive_timeout和keepalive_requests 控制保持活动设置。\n- sendfile 优化Nginx提供文件系统的静态文件服务的性能，如logo。\n- tcp_nodelay 允许Nginx使TCP发送多个缓冲区作为单独的数据包。\n- tcp_nopush 通过激活TCP堆栈中的TCP_CORK选项来优化一次向下游发送的数据量。TCP_CORK阻塞数据，直到分组到达MSS，这等于MTU减去IP报头的40或60字节。\n\n### 5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因\n> keepalive_requests 参数限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接\n\n`而我并没有配置 keepalive_requests，所以，就是使用的默认数 100，即一个长连接只能处理一百个请求，然后 Nginx 就就会主动关闭连接，使大量连接处于 TIME_WAIT 状态`\n\n## 6. Buffers size优化\n`调整缓冲区大小可能是有利的。 如果缓冲区大小太低，那么Nginx将写入一个临时文件。 这将导致过多的磁盘I/O。`\n\n- client_body_buffer_size 处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。 128k通常是此设置的不错选择。\n- client_max_body_size 设置最大body缓冲区大小。 如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查。\n- client_header_buffer_size 处理客户端头大小。 默认情况下，1k通常是一个合理的选择。\n- large_client_header_buffers 设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。\n- output_buffers 设置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。 零值禁止推迟数据传输。\n\n## 7. 超时设置\n`超时设置还可以大幅提高性能。`\n- client_body_timeout 指令设置服务器等待客户端完成发送body的最大时间。\n- client_header_timeout 指令设置服务器等待客户端完成发送header的最大时间。\n- sent_timeout 指定对客户端的响应超时。 此超时不适用于整个传输，而是仅应用于两个后续的客户端读取操作之间。 因此，如果客户端没有读取任何数据这段时间，那么Nginx关闭连接。\n\n## 8.静态资源服务\n`如果您的网站提供静态资源（如CSS/JavaScript/images），Nginx可以缓存这些文件很短的时间。`\n```\n#告诉Nginx缓存1000个文件30秒，不包括在20秒内未被访问的任何文件\nopen_file_cache max=100000 inactive=20s; \n#在open_file_cache中指定检测正确信息的间隔时间\nopen_file_cache_valid 30s; \n#定义了open_file_cache中指令参数不活动时间期间里最小的文件数\nopen_file_cache_min_uses 2; \n#指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件\nopen_file_cache_errors on; \n```\n>还可以缓存特定位置的资源,缓存文件很长时间是有好处的。如放在具体某个服务配置中..\n```\nlocation ~* .(woff|eot|ttf|svg|mp4|webm|jpg|jpeg|png|gif|ico|css|js)$ {\n    expires 365d;\n}\n```\n## 9.Gzip压缩内容\n```\n#开启gzip压缩\ngzip on; \n#低版本兼容\ngzip_disable \"msie6\"; \n#允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求\ngzip_proxied any; \n#告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源\ngzip_static on; \n#设置对数据启用压缩的最少字节数\ngzip_min_length 1000; \n#压缩级别,1-10越高越消耗CPU，但是压缩越好\ngzip_comp_level 6; \n#设置需要压缩的数据格式\ngzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; \n```","slug":"nginx-optimization","published":1,"updated":"2019-03-28T12:58:30.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987lk001j0641b04tpxby","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"1-nginx-conf-配置文件\"><a href=\"#1-nginx-conf-配置文件\" class=\"headerlink\" title=\"1. nginx.conf 配置文件\"></a>1. nginx.conf 配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#运行的用户</span><br><span class=\"line\">user www-data;</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#定义了nginx对外提供web服务时的worder进程数，CPU核的数量、存储数据的硬盘数量及负载模式</span><br><span class=\"line\">worker_processes auto; </span><br><span class=\"line\"></span><br><span class=\"line\">#更改worker进程的最大打开文件数限制,比&apos;ulimit -a&apos;多。解决&quot;too many open files&quot;</span><br><span class=\"line\">worker_rlimit_nofile 100000; </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #worker进程同时打开的最大连接数</span><br><span class=\"line\">    worker_connections 65536; </span><br><span class=\"line\">    #当收到一个新连接通知后接受尽可能多的连接</span><br><span class=\"line\">    multi_accept on; </span><br><span class=\"line\">    #设置用于复用客户端线程的轮询方法,epoll需要linux2.6+</span><br><span class=\"line\">    use epoll; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    access_log off; #设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)</span><br><span class=\"line\">    error_log /var/log/nginx/error.log crit; #告诉nginx只能记录严重的错误</span><br><span class=\"line\">    </span><br><span class=\"line\">  #HTTP和TCP优化</span><br><span class=\"line\">    keepalive_timeout 10; #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接</span><br><span class=\"line\">    keepalive_requests 1024;#限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接。</span><br><span class=\"line\">    tcp_nopush on; #在一个数据包里发送所有头文件，而不一个接一个的发送</span><br><span class=\"line\">    tcp_nodelay on; #nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</span><br><span class=\"line\">    </span><br><span class=\"line\">  #Buffers size优化</span><br><span class=\"line\">    client_body_buffer_size  128k;#处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。128k通常是此设置的不错选择。</span><br><span class=\"line\">    client_max_body_size  10m;#置最大body缓冲区大小。如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查</span><br><span class=\"line\">    client_header_buffer_size    1k; #处理客户端头大小。 默认情况下，1k通常是一个合理的选择。</span><br><span class=\"line\">    large_client_header_buffers  4 4k; #设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。</span><br><span class=\"line\">    output_buffers  1 32k;#置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。零值禁止推迟数据传输。</span><br><span class=\"line\">    postpone_output  1460;#指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</span><br><span class=\"line\">    </span><br><span class=\"line\">   #超时</span><br><span class=\"line\">    client_header_timeout 10; #设置请求头超时时间，建议低</span><br><span class=\"line\">    client_body_timeout 10; #请求体(各自)的超时时间</span><br><span class=\"line\">    reset_timedout_connection on; #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间</span><br><span class=\"line\">    send_timeout 10; #指定客户端的响应超时时间</span><br><span class=\"line\">    </span><br><span class=\"line\">  #静态资源服务</span><br><span class=\"line\">    open_file_cache max=100000 inactive=20s; #打开缓存的同时也指定了缓存最大数目，以及缓存的时间</span><br><span class=\"line\">    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间</span><br><span class=\"line\">    open_file_cache_min_uses 2; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数</span><br><span class=\"line\">    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件</span><br><span class=\"line\">    </span><br><span class=\"line\">  #Gzip压缩内容</span><br><span class=\"line\">    gzip on; #开启gzip压缩</span><br><span class=\"line\">    gzip_disable &quot;msie6&quot;; #低版本兼容</span><br><span class=\"line\">    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求</span><br><span class=\"line\">    gzip_static on; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span><br><span class=\"line\">    gzip_min_length 1000; #设置对数据启用压缩的最少字节数</span><br><span class=\"line\">    gzip_comp_level 6; #压缩级别,1-10越高越消耗CPU，但是压缩越好</span><br><span class=\"line\">    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式</span><br><span class=\"line\">  </span><br><span class=\"line\">  #其他优化</span><br><span class=\"line\">    limit_conn_zone $binary_remote_addr zone=addr:5m; #设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。</span><br><span class=\"line\">    limit_conn addr 100; #给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。</span><br><span class=\"line\">    server_tokens off; #关闭nginx版本号</span><br><span class=\"line\">    sendfile on; #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)</span><br><span class=\"line\">    </span><br><span class=\"line\">    default_type text/html; #设置文件默认MIME-type</span><br><span class=\"line\">    include /etc/nginx/mime.types; #只是一个在当前文件中包含另一个文件内容的指令。</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">    include /etc/nginx/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-nginx-pid文件\"><a href=\"#2-nginx-pid文件\" class=\"headerlink\" title=\"2.nginx.pid文件\"></a>2.nginx.pid文件</h2><h3 id=\"2-1-什么是-var-run-nginx-pid文件\"><a href=\"#2-1-什么是-var-run-nginx-pid文件\" class=\"headerlink\" title=\"2.1 什么是 var/run/nginx.pid文件?\"></a>2.1 什么是 var/run/nginx.pid文件?</h3><a id=\"more\"></a>\n<p> var/run这个目录包含描述系统启动以来系统信息的数据。此文件夹下的文件必须在启动过程初期清除（删除或归零）。程序可以在/var/run下有自己的子文件夹。原先放在/etc下的进程标识（PID）文件必须放在/var/run里面。PID文件的命名惯例是<program-name>.pid。所以，nginx的PID文件名为/var/run/nginx.pid。</program-name></p>\n<p><code>nginx.pid存放的是nginx的master进程的进程号。</code></p>\n<h3 id=\"2-2-nginx启动报错找不到nginx-pid\"><a href=\"#2-2-nginx启动报错找不到nginx-pid\" class=\"headerlink\" title=\"2.2 nginx启动报错找不到nginx.pid\"></a>2.2 nginx启动报错找不到nginx.pid</h3><p><code>nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]# nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-Worker-Processess-说明\"><a href=\"#3-Worker-Processess-说明\" class=\"headerlink\" title=\"3.Worker Processess 说明\"></a>3.Worker Processess 说明</h2><p><code>通常来说设置一个cpu核心对应一个worker processer，最多不超过4个，提高worker process的值是为了提高计算能力，但一般在越到cpu瓶颈前，你会遇到别的瓶颈(如网络问题)只有当你要处理大量静态文件的磁盘I/O时，worker进程是单线程的，所以这个读取文件的阻塞IO会降低CPU的处理速度，这是可以增加worker进程数量，其它情况是不需要的。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一般设置为:auto</span><br><span class=\"line\"># worker_processes auto;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果你想手动设置，你可以使用以下命令行查找服务器的cpu线程数。</span><br><span class=\"line\"># grep ^processor /proc/cpuinfo | wc -l</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-Worker进程连接数优化-worker-connections\"><a href=\"#4-Worker进程连接数优化-worker-connections\" class=\"headerlink\" title=\"4.Worker进程连接数优化(worker_connections)\"></a>4.Worker进程连接数优化(worker_connections)</h2><p><code>worker_connections选项设置每个worker进程一次可以处理的最大连接数。 默认情况下，worker连接限制为512，但系统可以处理比这值更多的连接。\n适当的值可以通过测试得出。</code></p>\n<blockquote>\n<p>系统的核心限制也可以通过使用ulimit找到</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ulimit -n</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-HTTP和TCP优化\"><a href=\"#5-HTTP和TCP优化\" class=\"headerlink\" title=\"5.HTTP和TCP优化\"></a>5.HTTP和TCP优化</h2><h3 id=\"5-1-Keep-Alive-减少浏览器重新连接的次数\"><a href=\"#5-1-Keep-Alive-减少浏览器重新连接的次数\" class=\"headerlink\" title=\"5.1 Keep Alive:减少浏览器重新连接的次数\"></a>5.1 Keep Alive:减少浏览器重新连接的次数</h3><ul>\n<li>keepalive_timeout和keepalive_requests 控制保持活动设置。</li>\n<li>sendfile 优化Nginx提供文件系统的静态文件服务的性能，如logo。</li>\n<li>tcp_nodelay 允许Nginx使TCP发送多个缓冲区作为单独的数据包。</li>\n<li>tcp_nopush 通过激活TCP堆栈中的TCP_CORK选项来优化一次向下游发送的数据量。TCP_CORK阻塞数据，直到分组到达MSS，这等于MTU减去IP报头的40或60字节。</li>\n</ul>\n<h3 id=\"5-2-服务处于TIME-WAIT-状态的-TCP-连接数异常的原因\"><a href=\"#5-2-服务处于TIME-WAIT-状态的-TCP-连接数异常的原因\" class=\"headerlink\" title=\"5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因\"></a>5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因</h3><blockquote>\n<p>keepalive_requests 参数限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接</p>\n</blockquote>\n<p><code>而我并没有配置 keepalive_requests，所以，就是使用的默认数 100，即一个长连接只能处理一百个请求，然后 Nginx 就就会主动关闭连接，使大量连接处于 TIME_WAIT 状态</code></p>\n<h2 id=\"6-Buffers-size优化\"><a href=\"#6-Buffers-size优化\" class=\"headerlink\" title=\"6. Buffers size优化\"></a>6. Buffers size优化</h2><p><code>调整缓冲区大小可能是有利的。 如果缓冲区大小太低，那么Nginx将写入一个临时文件。 这将导致过多的磁盘I/O。</code></p>\n<ul>\n<li>client_body_buffer_size 处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。 128k通常是此设置的不错选择。</li>\n<li>client_max_body_size 设置最大body缓冲区大小。 如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查。</li>\n<li>client_header_buffer_size 处理客户端头大小。 默认情况下，1k通常是一个合理的选择。</li>\n<li>large_client_header_buffers 设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。</li>\n<li>output_buffers 设置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。 零值禁止推迟数据传输。</li>\n</ul>\n<h2 id=\"7-超时设置\"><a href=\"#7-超时设置\" class=\"headerlink\" title=\"7. 超时设置\"></a>7. 超时设置</h2><p><code>超时设置还可以大幅提高性能。</code></p>\n<ul>\n<li>client_body_timeout 指令设置服务器等待客户端完成发送body的最大时间。</li>\n<li>client_header_timeout 指令设置服务器等待客户端完成发送header的最大时间。</li>\n<li>sent_timeout 指定对客户端的响应超时。 此超时不适用于整个传输，而是仅应用于两个后续的客户端读取操作之间。 因此，如果客户端没有读取任何数据这段时间，那么Nginx关闭连接。</li>\n</ul>\n<h2 id=\"8-静态资源服务\"><a href=\"#8-静态资源服务\" class=\"headerlink\" title=\"8.静态资源服务\"></a>8.静态资源服务</h2><p><code>如果您的网站提供静态资源（如CSS/JavaScript/images），Nginx可以缓存这些文件很短的时间。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#告诉Nginx缓存1000个文件30秒，不包括在20秒内未被访问的任何文件</span><br><span class=\"line\">open_file_cache max=100000 inactive=20s; </span><br><span class=\"line\">#在open_file_cache中指定检测正确信息的间隔时间</span><br><span class=\"line\">open_file_cache_valid 30s; </span><br><span class=\"line\">#定义了open_file_cache中指令参数不活动时间期间里最小的文件数</span><br><span class=\"line\">open_file_cache_min_uses 2; </span><br><span class=\"line\">#指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件</span><br><span class=\"line\">open_file_cache_errors on;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>还可以缓存特定位置的资源,缓存文件很长时间是有好处的。如放在具体某个服务配置中..<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* .(woff|eot|ttf|svg|mp4|webm|jpg|jpeg|png|gif|ico|css|js)$ &#123;</span><br><span class=\"line\">    expires 365d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"9-Gzip压缩内容\"><a href=\"#9-Gzip压缩内容\" class=\"headerlink\" title=\"9.Gzip压缩内容\"></a>9.Gzip压缩内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开启gzip压缩</span><br><span class=\"line\">gzip on; </span><br><span class=\"line\">#低版本兼容</span><br><span class=\"line\">gzip_disable &quot;msie6&quot;; </span><br><span class=\"line\">#允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求</span><br><span class=\"line\">gzip_proxied any; </span><br><span class=\"line\">#告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span><br><span class=\"line\">gzip_static on; </span><br><span class=\"line\">#设置对数据启用压缩的最少字节数</span><br><span class=\"line\">gzip_min_length 1000; </span><br><span class=\"line\">#压缩级别,1-10越高越消耗CPU，但是压缩越好</span><br><span class=\"line\">gzip_comp_level 6; </span><br><span class=\"line\">#设置需要压缩的数据格式</span><br><span class=\"line\">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"1-nginx-conf-配置文件\"><a href=\"#1-nginx-conf-配置文件\" class=\"headerlink\" title=\"1. nginx.conf 配置文件\"></a>1. nginx.conf 配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#运行的用户</span><br><span class=\"line\">user www-data;</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#定义了nginx对外提供web服务时的worder进程数，CPU核的数量、存储数据的硬盘数量及负载模式</span><br><span class=\"line\">worker_processes auto; </span><br><span class=\"line\"></span><br><span class=\"line\">#更改worker进程的最大打开文件数限制,比&apos;ulimit -a&apos;多。解决&quot;too many open files&quot;</span><br><span class=\"line\">worker_rlimit_nofile 100000; </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #worker进程同时打开的最大连接数</span><br><span class=\"line\">    worker_connections 65536; </span><br><span class=\"line\">    #当收到一个新连接通知后接受尽可能多的连接</span><br><span class=\"line\">    multi_accept on; </span><br><span class=\"line\">    #设置用于复用客户端线程的轮询方法,epoll需要linux2.6+</span><br><span class=\"line\">    use epoll; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    access_log off; #设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)</span><br><span class=\"line\">    error_log /var/log/nginx/error.log crit; #告诉nginx只能记录严重的错误</span><br><span class=\"line\">    </span><br><span class=\"line\">  #HTTP和TCP优化</span><br><span class=\"line\">    keepalive_timeout 10; #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接</span><br><span class=\"line\">    keepalive_requests 1024;#限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接。</span><br><span class=\"line\">    tcp_nopush on; #在一个数据包里发送所有头文件，而不一个接一个的发送</span><br><span class=\"line\">    tcp_nodelay on; #nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</span><br><span class=\"line\">    </span><br><span class=\"line\">  #Buffers size优化</span><br><span class=\"line\">    client_body_buffer_size  128k;#处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。128k通常是此设置的不错选择。</span><br><span class=\"line\">    client_max_body_size  10m;#置最大body缓冲区大小。如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查</span><br><span class=\"line\">    client_header_buffer_size    1k; #处理客户端头大小。 默认情况下，1k通常是一个合理的选择。</span><br><span class=\"line\">    large_client_header_buffers  4 4k; #设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。</span><br><span class=\"line\">    output_buffers  1 32k;#置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。零值禁止推迟数据传输。</span><br><span class=\"line\">    postpone_output  1460;#指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</span><br><span class=\"line\">    </span><br><span class=\"line\">   #超时</span><br><span class=\"line\">    client_header_timeout 10; #设置请求头超时时间，建议低</span><br><span class=\"line\">    client_body_timeout 10; #请求体(各自)的超时时间</span><br><span class=\"line\">    reset_timedout_connection on; #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间</span><br><span class=\"line\">    send_timeout 10; #指定客户端的响应超时时间</span><br><span class=\"line\">    </span><br><span class=\"line\">  #静态资源服务</span><br><span class=\"line\">    open_file_cache max=100000 inactive=20s; #打开缓存的同时也指定了缓存最大数目，以及缓存的时间</span><br><span class=\"line\">    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间</span><br><span class=\"line\">    open_file_cache_min_uses 2; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数</span><br><span class=\"line\">    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件</span><br><span class=\"line\">    </span><br><span class=\"line\">  #Gzip压缩内容</span><br><span class=\"line\">    gzip on; #开启gzip压缩</span><br><span class=\"line\">    gzip_disable &quot;msie6&quot;; #低版本兼容</span><br><span class=\"line\">    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求</span><br><span class=\"line\">    gzip_static on; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span><br><span class=\"line\">    gzip_min_length 1000; #设置对数据启用压缩的最少字节数</span><br><span class=\"line\">    gzip_comp_level 6; #压缩级别,1-10越高越消耗CPU，但是压缩越好</span><br><span class=\"line\">    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式</span><br><span class=\"line\">  </span><br><span class=\"line\">  #其他优化</span><br><span class=\"line\">    limit_conn_zone $binary_remote_addr zone=addr:5m; #设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。</span><br><span class=\"line\">    limit_conn addr 100; #给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。</span><br><span class=\"line\">    server_tokens off; #关闭nginx版本号</span><br><span class=\"line\">    sendfile on; #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)</span><br><span class=\"line\">    </span><br><span class=\"line\">    default_type text/html; #设置文件默认MIME-type</span><br><span class=\"line\">    include /etc/nginx/mime.types; #只是一个在当前文件中包含另一个文件内容的指令。</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">    include /etc/nginx/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-nginx-pid文件\"><a href=\"#2-nginx-pid文件\" class=\"headerlink\" title=\"2.nginx.pid文件\"></a>2.nginx.pid文件</h2><h3 id=\"2-1-什么是-var-run-nginx-pid文件\"><a href=\"#2-1-什么是-var-run-nginx-pid文件\" class=\"headerlink\" title=\"2.1 什么是 var/run/nginx.pid文件?\"></a>2.1 什么是 var/run/nginx.pid文件?</h3>","more":"<p> var/run这个目录包含描述系统启动以来系统信息的数据。此文件夹下的文件必须在启动过程初期清除（删除或归零）。程序可以在/var/run下有自己的子文件夹。原先放在/etc下的进程标识（PID）文件必须放在/var/run里面。PID文件的命名惯例是<program-name>.pid。所以，nginx的PID文件名为/var/run/nginx.pid。</program-name></p>\n<p><code>nginx.pid存放的是nginx的master进程的进程号。</code></p>\n<h3 id=\"2-2-nginx启动报错找不到nginx-pid\"><a href=\"#2-2-nginx启动报错找不到nginx-pid\" class=\"headerlink\" title=\"2.2 nginx启动报错找不到nginx.pid\"></a>2.2 nginx启动报错找不到nginx.pid</h3><p><code>nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]# nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-Worker-Processess-说明\"><a href=\"#3-Worker-Processess-说明\" class=\"headerlink\" title=\"3.Worker Processess 说明\"></a>3.Worker Processess 说明</h2><p><code>通常来说设置一个cpu核心对应一个worker processer，最多不超过4个，提高worker process的值是为了提高计算能力，但一般在越到cpu瓶颈前，你会遇到别的瓶颈(如网络问题)只有当你要处理大量静态文件的磁盘I/O时，worker进程是单线程的，所以这个读取文件的阻塞IO会降低CPU的处理速度，这是可以增加worker进程数量，其它情况是不需要的。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一般设置为:auto</span><br><span class=\"line\"># worker_processes auto;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果你想手动设置，你可以使用以下命令行查找服务器的cpu线程数。</span><br><span class=\"line\"># grep ^processor /proc/cpuinfo | wc -l</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-Worker进程连接数优化-worker-connections\"><a href=\"#4-Worker进程连接数优化-worker-connections\" class=\"headerlink\" title=\"4.Worker进程连接数优化(worker_connections)\"></a>4.Worker进程连接数优化(worker_connections)</h2><p><code>worker_connections选项设置每个worker进程一次可以处理的最大连接数。 默认情况下，worker连接限制为512，但系统可以处理比这值更多的连接。\n适当的值可以通过测试得出。</code></p>\n<blockquote>\n<p>系统的核心限制也可以通过使用ulimit找到</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ulimit -n</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-HTTP和TCP优化\"><a href=\"#5-HTTP和TCP优化\" class=\"headerlink\" title=\"5.HTTP和TCP优化\"></a>5.HTTP和TCP优化</h2><h3 id=\"5-1-Keep-Alive-减少浏览器重新连接的次数\"><a href=\"#5-1-Keep-Alive-减少浏览器重新连接的次数\" class=\"headerlink\" title=\"5.1 Keep Alive:减少浏览器重新连接的次数\"></a>5.1 Keep Alive:减少浏览器重新连接的次数</h3><ul>\n<li>keepalive_timeout和keepalive_requests 控制保持活动设置。</li>\n<li>sendfile 优化Nginx提供文件系统的静态文件服务的性能，如logo。</li>\n<li>tcp_nodelay 允许Nginx使TCP发送多个缓冲区作为单独的数据包。</li>\n<li>tcp_nopush 通过激活TCP堆栈中的TCP_CORK选项来优化一次向下游发送的数据量。TCP_CORK阻塞数据，直到分组到达MSS，这等于MTU减去IP报头的40或60字节。</li>\n</ul>\n<h3 id=\"5-2-服务处于TIME-WAIT-状态的-TCP-连接数异常的原因\"><a href=\"#5-2-服务处于TIME-WAIT-状态的-TCP-连接数异常的原因\" class=\"headerlink\" title=\"5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因\"></a>5.2 服务处于TIME_WAIT 状态的 TCP 连接数异常的原因</h3><blockquote>\n<p>keepalive_requests 参数限制了一个 HTTP 长连接最多可以处理完成的最大请求数, 默认是 100。当连接处理完成的请求数达到最大请求数后，将关闭连接</p>\n</blockquote>\n<p><code>而我并没有配置 keepalive_requests，所以，就是使用的默认数 100，即一个长连接只能处理一百个请求，然后 Nginx 就就会主动关闭连接，使大量连接处于 TIME_WAIT 状态</code></p>\n<h2 id=\"6-Buffers-size优化\"><a href=\"#6-Buffers-size优化\" class=\"headerlink\" title=\"6. Buffers size优化\"></a>6. Buffers size优化</h2><p><code>调整缓冲区大小可能是有利的。 如果缓冲区大小太低，那么Nginx将写入一个临时文件。 这将导致过多的磁盘I/O。</code></p>\n<ul>\n<li>client_body_buffer_size 处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。 128k通常是此设置的不错选择。</li>\n<li>client_max_body_size 设置最大body缓冲区大小。 如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查。</li>\n<li>client_header_buffer_size 处理客户端头大小。 默认情况下，1k通常是一个合理的选择。</li>\n<li>large_client_header_buffers 设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。</li>\n<li>output_buffers 设置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。 零值禁止推迟数据传输。</li>\n</ul>\n<h2 id=\"7-超时设置\"><a href=\"#7-超时设置\" class=\"headerlink\" title=\"7. 超时设置\"></a>7. 超时设置</h2><p><code>超时设置还可以大幅提高性能。</code></p>\n<ul>\n<li>client_body_timeout 指令设置服务器等待客户端完成发送body的最大时间。</li>\n<li>client_header_timeout 指令设置服务器等待客户端完成发送header的最大时间。</li>\n<li>sent_timeout 指定对客户端的响应超时。 此超时不适用于整个传输，而是仅应用于两个后续的客户端读取操作之间。 因此，如果客户端没有读取任何数据这段时间，那么Nginx关闭连接。</li>\n</ul>\n<h2 id=\"8-静态资源服务\"><a href=\"#8-静态资源服务\" class=\"headerlink\" title=\"8.静态资源服务\"></a>8.静态资源服务</h2><p><code>如果您的网站提供静态资源（如CSS/JavaScript/images），Nginx可以缓存这些文件很短的时间。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#告诉Nginx缓存1000个文件30秒，不包括在20秒内未被访问的任何文件</span><br><span class=\"line\">open_file_cache max=100000 inactive=20s; </span><br><span class=\"line\">#在open_file_cache中指定检测正确信息的间隔时间</span><br><span class=\"line\">open_file_cache_valid 30s; </span><br><span class=\"line\">#定义了open_file_cache中指令参数不活动时间期间里最小的文件数</span><br><span class=\"line\">open_file_cache_min_uses 2; </span><br><span class=\"line\">#指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件</span><br><span class=\"line\">open_file_cache_errors on;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>还可以缓存特定位置的资源,缓存文件很长时间是有好处的。如放在具体某个服务配置中..<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* .(woff|eot|ttf|svg|mp4|webm|jpg|jpeg|png|gif|ico|css|js)$ &#123;</span><br><span class=\"line\">    expires 365d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"9-Gzip压缩内容\"><a href=\"#9-Gzip压缩内容\" class=\"headerlink\" title=\"9.Gzip压缩内容\"></a>9.Gzip压缩内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开启gzip压缩</span><br><span class=\"line\">gzip on; </span><br><span class=\"line\">#低版本兼容</span><br><span class=\"line\">gzip_disable &quot;msie6&quot;; </span><br><span class=\"line\">#允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求</span><br><span class=\"line\">gzip_proxied any; </span><br><span class=\"line\">#告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span><br><span class=\"line\">gzip_static on; </span><br><span class=\"line\">#设置对数据启用压缩的最少字节数</span><br><span class=\"line\">gzip_min_length 1000; </span><br><span class=\"line\">#压缩级别,1-10越高越消耗CPU，但是压缩越好</span><br><span class=\"line\">gzip_comp_level 6; </span><br><span class=\"line\">#设置需要压缩的数据格式</span><br><span class=\"line\">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br></pre></td></tr></table></figure>"},{"title":"php-fpm配置详情及优化","date":"2019-03-10T08:36:05.000Z","_content":">PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的。\n\n## 配置文件详情注释\n<!--more-->\n```\npid = run/php-fpm.pid\n#pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启\n\nerror_log = log/php-fpm.log\n#错误日志，默认在安装目录中的var/log/php-fpm.log\n\nlog_level = notice\n#错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.\n\nemergency_restart_threshold = 60\nemergency_restart_interval = 60s\n#表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。\n\nprocess_control_timeout = 0\n#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.\n\ndaemonize = yes\n#后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。\n\nlisten = 127.0.0.1:9000\n#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置.\n\nlisten.backlog = -1\n#backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。backlog含义参考：http://www.3gyou.cc/?p=41\n\nlisten.allowed_clients = 127.0.0.1\n#允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接\n\nlisten.owner = www\nlisten.group = www\nlisten.mode = 0666\n#unix socket设置选项，如果使用tcp方式访问，这里注释即可。\n\nuser = www\ngroup = www\n#启动进程的帐户和组\n\npm = dynamic #对于专用服务器，pm可以设置为static。\n#如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：\npm.max_children #，子进程最大数\npm.start_servers #，启动时的进程数\npm.min_spare_servers #，保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程\npm.max_spare_servers #，保证空闲进程数最大值，如果空闲进程大于此值，此进行清理\n\npm.max_requests = 1000\n#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 '0' 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.\n\npm.status_path = /status\n#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到\n\nping.path = /ping\n#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。\n\nping.response = pong\n#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.\n\nrequest_terminate_timeout = 0\n#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max_execution_time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。\n\nrequest_slowlog_timeout = 10s\n#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 '0' 表示 'Off'\n\nslowlog = log/$pool.log.slow\n#慢请求的记录日志,配合request_slowlog_timeout使用\n\nrlimit_files = 1024\n#设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。\n\nrlimit_core = 0\n#设置核心rlimit最大限制值. 可用值: 'unlimited' 、0或者正整数. 默认值: 系统定义值.\n\nchroot =\n#启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.\n\nchdir =\n#设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）\n\ncatch_workers_output = yes\n#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.\n```\n\n\n\n## 主要参数介绍\n- ### pm (进程管理)\n`管理进程方式: pm = static/dynamic`\n\n1. static(静态) ：表示在fpm运行时直接fork出pm.max_chindren个worker进程\n2. dynamic(动态)：表示运行时fork出start_servers个进程，随着负载的情况，动态的调整，最多不超过max_children个进程\n\n> 一般推荐用static，优点是不用动态的判断负载情况，提升性能，缺点是多占用些系统内存资源。\n\n- ### max_children(子进程最大数)\n1. 这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。\n\n2. 设置'max_children'需要根据服务器的性能进行设定\n\n3. 一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右\n\n4. 假设“max_children”设置成100个，20M*100=2000M\n\n5. 在峰值的时候所有PHP-CGI所耗内存在2000M以内。\n\n6. 假设'max_children'设置的较小，比如5-10个，那么php-cgi就会“很累”，处理速度也很慢，等待的时间也较长。\n\n7. 如果长时间没有得到处理的请求就会出现504 Gateway Time-out这个错误，而正在处理的很累的那几个php-cgi如果遇到了问题就会出现502 Bad gateway这个错误。\n\n- ### start_servers(启动时的进程数)\n1. pm.start_servers的默认值为2。\n> 其在php-fpm中给的计算方式也为：{（cpu空闲时等待连接的php的最小子进程数） + （cpu空闲时等待连接的php的最大子进程数 - cpu空闲时等待连接的php的最小子进程数）/ 2} 用配置表示就是：min_spare_servers + (max_spare_servers - min_spare_servers) / 2；\n2. 一般而言，设置成10-20之间的数据足够满足需求了\n\n- ### max_requests(最大请求数)\n\n>最大处理请求数是指一个php-fpm的worker进程在处理多少个请求后就终止掉，master进程会重新spawn一个新的。这个配置的主要目的是避免php解释器或程序引用的第三方库造成的内存泄露。\n\n- 出现502的原因？\n\n`502，是后端PHP-FPM不可用造成的，间歇性的502一般认为是由于PHP-FPM进程重启造成的`\n\n- 但是为什么要重启进程呢？\n\n`如果不定期重启 PHP-CGI 进程，势必造成内存使用量不断增长（比如第三方库有问题等）。因此 PHP-FPM 作为 PHP-CGI 的管理器，提供了这么一项监控功能，对请求达到指定次数的 PHP-CGI 进程进行重启，保证内存使用量不增长`\n\n> <front color=red>也正是因为这个机制，在高并发中，经常导致502错误，</front>\n\n- ### request_terminate_timeout(最长执行时间)\n`设置单个请求的超时中止时间。该选项可能会对 php.ini 设置中的 'max_execution_time' 因为某些特殊原因没有中止运行的脚本有用。设置为 '0' 表示 'Off'。`\n\n>这两项都是用来配置一个PHP脚本的最大执行时间的。当超过这个时间时，PHP-FPM不只会终止脚本的执行，还会终止执行脚本的Worker进程,Nginx会发现与自己通信的连接断掉了，就会返回给客户端502错误\n\n\n## php-fpm 调优\n- 尽量少安装PHP模块\n- 的PHPFastCGI子进程数（max_children）调到适应大小\n- 使用socket连接FastCGI，linux操作系统可以放在 /dev/shm中\n> 注：在php-fpm.cnf里设置<value name=”listen_address”>/tmp/nginx.socket</value>就可以通过socket连接FastCGI了，/dev/shm是内存文件系统，放在内存中肯定会快了.记得这时也要在nginx里的配置里进行修改，保持一致．\n``` \nlocation ~ \\.php${\n   #将Nginx与FastCGI的通信方式由TCP改为Unix Socket。TCP在高并发访问下比Unix Socket稳定，但Unix Socket速度要比TCP快。\n   fastcgi_pass  unix:/tmp/php-cgi.sock;\n   #fastcgi_pass  127.0.0.1:9000;\n   fastcgi_index index.php;\n   include fcgi.conf;\n}\n```\n\n- 以root身份执行以下命令，调高linux内核打开文件数量\n``` \n echo 'ulimit -HSn 65536' >> /etc/profile\n echo 'ulimit -HSn 65536' >> /etc/rc.local\n source /etc/profile \n```\n\n- 增加 PHP-FPM 打开文件描述符的限制:\n> 把php-fpm.conf文件中的rlimit_files值1024改为4096或者更高，然后<front color='red'>重启 PHP-FPM</front>\n\n- 使用php代码加速器，例如 eAccelerator, XCache.在linux平台上可以把`cache_dir`指向 /dev/shm","source":"_posts/phpFpm.md","raw":"---\ntitle: php-fpm配置详情及优化\ndate: 2019-03-10 16:36:05\ntags: \n - php-fpm\ncategories:\n - php\n---\n>PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的。\n\n## 配置文件详情注释\n<!--more-->\n```\npid = run/php-fpm.pid\n#pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启\n\nerror_log = log/php-fpm.log\n#错误日志，默认在安装目录中的var/log/php-fpm.log\n\nlog_level = notice\n#错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.\n\nemergency_restart_threshold = 60\nemergency_restart_interval = 60s\n#表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。\n\nprocess_control_timeout = 0\n#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.\n\ndaemonize = yes\n#后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。\n\nlisten = 127.0.0.1:9000\n#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置.\n\nlisten.backlog = -1\n#backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。backlog含义参考：http://www.3gyou.cc/?p=41\n\nlisten.allowed_clients = 127.0.0.1\n#允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接\n\nlisten.owner = www\nlisten.group = www\nlisten.mode = 0666\n#unix socket设置选项，如果使用tcp方式访问，这里注释即可。\n\nuser = www\ngroup = www\n#启动进程的帐户和组\n\npm = dynamic #对于专用服务器，pm可以设置为static。\n#如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：\npm.max_children #，子进程最大数\npm.start_servers #，启动时的进程数\npm.min_spare_servers #，保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程\npm.max_spare_servers #，保证空闲进程数最大值，如果空闲进程大于此值，此进行清理\n\npm.max_requests = 1000\n#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 '0' 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.\n\npm.status_path = /status\n#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到\n\nping.path = /ping\n#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。\n\nping.response = pong\n#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.\n\nrequest_terminate_timeout = 0\n#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max_execution_time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。\n\nrequest_slowlog_timeout = 10s\n#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 '0' 表示 'Off'\n\nslowlog = log/$pool.log.slow\n#慢请求的记录日志,配合request_slowlog_timeout使用\n\nrlimit_files = 1024\n#设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。\n\nrlimit_core = 0\n#设置核心rlimit最大限制值. 可用值: 'unlimited' 、0或者正整数. 默认值: 系统定义值.\n\nchroot =\n#启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.\n\nchdir =\n#设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）\n\ncatch_workers_output = yes\n#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.\n```\n\n\n\n## 主要参数介绍\n- ### pm (进程管理)\n`管理进程方式: pm = static/dynamic`\n\n1. static(静态) ：表示在fpm运行时直接fork出pm.max_chindren个worker进程\n2. dynamic(动态)：表示运行时fork出start_servers个进程，随着负载的情况，动态的调整，最多不超过max_children个进程\n\n> 一般推荐用static，优点是不用动态的判断负载情况，提升性能，缺点是多占用些系统内存资源。\n\n- ### max_children(子进程最大数)\n1. 这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。\n\n2. 设置'max_children'需要根据服务器的性能进行设定\n\n3. 一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右\n\n4. 假设“max_children”设置成100个，20M*100=2000M\n\n5. 在峰值的时候所有PHP-CGI所耗内存在2000M以内。\n\n6. 假设'max_children'设置的较小，比如5-10个，那么php-cgi就会“很累”，处理速度也很慢，等待的时间也较长。\n\n7. 如果长时间没有得到处理的请求就会出现504 Gateway Time-out这个错误，而正在处理的很累的那几个php-cgi如果遇到了问题就会出现502 Bad gateway这个错误。\n\n- ### start_servers(启动时的进程数)\n1. pm.start_servers的默认值为2。\n> 其在php-fpm中给的计算方式也为：{（cpu空闲时等待连接的php的最小子进程数） + （cpu空闲时等待连接的php的最大子进程数 - cpu空闲时等待连接的php的最小子进程数）/ 2} 用配置表示就是：min_spare_servers + (max_spare_servers - min_spare_servers) / 2；\n2. 一般而言，设置成10-20之间的数据足够满足需求了\n\n- ### max_requests(最大请求数)\n\n>最大处理请求数是指一个php-fpm的worker进程在处理多少个请求后就终止掉，master进程会重新spawn一个新的。这个配置的主要目的是避免php解释器或程序引用的第三方库造成的内存泄露。\n\n- 出现502的原因？\n\n`502，是后端PHP-FPM不可用造成的，间歇性的502一般认为是由于PHP-FPM进程重启造成的`\n\n- 但是为什么要重启进程呢？\n\n`如果不定期重启 PHP-CGI 进程，势必造成内存使用量不断增长（比如第三方库有问题等）。因此 PHP-FPM 作为 PHP-CGI 的管理器，提供了这么一项监控功能，对请求达到指定次数的 PHP-CGI 进程进行重启，保证内存使用量不增长`\n\n> <front color=red>也正是因为这个机制，在高并发中，经常导致502错误，</front>\n\n- ### request_terminate_timeout(最长执行时间)\n`设置单个请求的超时中止时间。该选项可能会对 php.ini 设置中的 'max_execution_time' 因为某些特殊原因没有中止运行的脚本有用。设置为 '0' 表示 'Off'。`\n\n>这两项都是用来配置一个PHP脚本的最大执行时间的。当超过这个时间时，PHP-FPM不只会终止脚本的执行，还会终止执行脚本的Worker进程,Nginx会发现与自己通信的连接断掉了，就会返回给客户端502错误\n\n\n## php-fpm 调优\n- 尽量少安装PHP模块\n- 的PHPFastCGI子进程数（max_children）调到适应大小\n- 使用socket连接FastCGI，linux操作系统可以放在 /dev/shm中\n> 注：在php-fpm.cnf里设置<value name=”listen_address”>/tmp/nginx.socket</value>就可以通过socket连接FastCGI了，/dev/shm是内存文件系统，放在内存中肯定会快了.记得这时也要在nginx里的配置里进行修改，保持一致．\n``` \nlocation ~ \\.php${\n   #将Nginx与FastCGI的通信方式由TCP改为Unix Socket。TCP在高并发访问下比Unix Socket稳定，但Unix Socket速度要比TCP快。\n   fastcgi_pass  unix:/tmp/php-cgi.sock;\n   #fastcgi_pass  127.0.0.1:9000;\n   fastcgi_index index.php;\n   include fcgi.conf;\n}\n```\n\n- 以root身份执行以下命令，调高linux内核打开文件数量\n``` \n echo 'ulimit -HSn 65536' >> /etc/profile\n echo 'ulimit -HSn 65536' >> /etc/rc.local\n source /etc/profile \n```\n\n- 增加 PHP-FPM 打开文件描述符的限制:\n> 把php-fpm.conf文件中的rlimit_files值1024改为4096或者更高，然后<front color='red'>重启 PHP-FPM</front>\n\n- 使用php代码加速器，例如 eAccelerator, XCache.在linux平台上可以把`cache_dir`指向 /dev/shm","slug":"phpFpm","published":1,"updated":"2019-03-25T11:45:57.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987ll001l0641zxi9bo9x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的。</p>\n</blockquote>\n<h2 id=\"配置文件详情注释\"><a href=\"#配置文件详情注释\" class=\"headerlink\" title=\"配置文件详情注释\"></a>配置文件详情注释</h2><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid = run/php-fpm.pid</span><br><span class=\"line\">#pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</span><br><span class=\"line\"></span><br><span class=\"line\">error_log = log/php-fpm.log</span><br><span class=\"line\">#错误日志，默认在安装目录中的var/log/php-fpm.log</span><br><span class=\"line\"></span><br><span class=\"line\">log_level = notice</span><br><span class=\"line\">#错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</span><br><span class=\"line\"></span><br><span class=\"line\">emergency_restart_threshold = 60</span><br><span class=\"line\">emergency_restart_interval = 60s</span><br><span class=\"line\">#表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</span><br><span class=\"line\"></span><br><span class=\"line\">process_control_timeout = 0</span><br><span class=\"line\">#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</span><br><span class=\"line\"></span><br><span class=\"line\">daemonize = yes</span><br><span class=\"line\">#后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</span><br><span class=\"line\"></span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br><span class=\"line\">#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: &apos;ip:port&apos;, &apos;port&apos;, &apos;/path/to/unix/socket&apos;. 每个进程池都需要设置.</span><br><span class=\"line\"></span><br><span class=\"line\">listen.backlog = -1</span><br><span class=\"line\">#backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。backlog含义参考：http://www.3gyou.cc/?p=41</span><br><span class=\"line\"></span><br><span class=\"line\">listen.allowed_clients = 127.0.0.1</span><br><span class=\"line\">#允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接</span><br><span class=\"line\"></span><br><span class=\"line\">listen.owner = www</span><br><span class=\"line\">listen.group = www</span><br><span class=\"line\">listen.mode = 0666</span><br><span class=\"line\">#unix socket设置选项，如果使用tcp方式访问，这里注释即可。</span><br><span class=\"line\"></span><br><span class=\"line\">user = www</span><br><span class=\"line\">group = www</span><br><span class=\"line\">#启动进程的帐户和组</span><br><span class=\"line\"></span><br><span class=\"line\">pm = dynamic #对于专用服务器，pm可以设置为static。</span><br><span class=\"line\">#如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</span><br><span class=\"line\">pm.max_children #，子进程最大数</span><br><span class=\"line\">pm.start_servers #，启动时的进程数</span><br><span class=\"line\">pm.min_spare_servers #，保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class=\"line\">pm.max_spare_servers #，保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class=\"line\"></span><br><span class=\"line\">pm.max_requests = 1000</span><br><span class=\"line\">#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 &apos;0&apos; 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.</span><br><span class=\"line\"></span><br><span class=\"line\">pm.status_path = /status</span><br><span class=\"line\">#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</span><br><span class=\"line\"></span><br><span class=\"line\">ping.path = /ping</span><br><span class=\"line\">#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</span><br><span class=\"line\"></span><br><span class=\"line\">ping.response = pong</span><br><span class=\"line\">#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</span><br><span class=\"line\"></span><br><span class=\"line\">request_terminate_timeout = 0</span><br><span class=\"line\">#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的&apos;max_execution_time&apos;因为某些特殊原因没有中止运行的脚本有用. 设置为 &apos;0&apos; 表示 &apos;Off&apos;.当经常出现502错误时可以尝试更改此选项。</span><br><span class=\"line\"></span><br><span class=\"line\">request_slowlog_timeout = 10s</span><br><span class=\"line\">#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 &apos;0&apos; 表示 &apos;Off&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">slowlog = log/$pool.log.slow</span><br><span class=\"line\">#慢请求的记录日志,配合request_slowlog_timeout使用</span><br><span class=\"line\"></span><br><span class=\"line\">rlimit_files = 1024</span><br><span class=\"line\">#设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</span><br><span class=\"line\"></span><br><span class=\"line\">rlimit_core = 0</span><br><span class=\"line\">#设置核心rlimit最大限制值. 可用值: &apos;unlimited&apos; 、0或者正整数. 默认值: 系统定义值.</span><br><span class=\"line\"></span><br><span class=\"line\">chroot =</span><br><span class=\"line\">#启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</span><br><span class=\"line\"></span><br><span class=\"line\">chdir =</span><br><span class=\"line\">#设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）</span><br><span class=\"line\"></span><br><span class=\"line\">catch_workers_output = yes</span><br><span class=\"line\">#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</span><br></pre></td></tr></table></figure>\n<h2 id=\"主要参数介绍\"><a href=\"#主要参数介绍\" class=\"headerlink\" title=\"主要参数介绍\"></a>主要参数介绍</h2><ul>\n<li><h3 id=\"pm-进程管理\"><a href=\"#pm-进程管理\" class=\"headerlink\" title=\"pm (进程管理)\"></a>pm (进程管理)</h3><code>管理进程方式: pm = static/dynamic</code></li>\n</ul>\n<ol>\n<li>static(静态) ：表示在fpm运行时直接fork出pm.max_chindren个worker进程</li>\n<li>dynamic(动态)：表示运行时fork出start_servers个进程，随着负载的情况，动态的调整，最多不超过max_children个进程</li>\n</ol>\n<blockquote>\n<p>一般推荐用static，优点是不用动态的判断负载情况，提升性能，缺点是多占用些系统内存资源。</p>\n</blockquote>\n<ul>\n<li><h3 id=\"max-children-子进程最大数\"><a href=\"#max-children-子进程最大数\" class=\"headerlink\" title=\"max_children(子进程最大数)\"></a>max_children(子进程最大数)</h3></li>\n</ul>\n<ol>\n<li><p>这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。</p>\n</li>\n<li><p>设置’max_children’需要根据服务器的性能进行设定</p>\n</li>\n<li><p>一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右</p>\n</li>\n<li><p>假设“max_children”设置成100个，20M*100=2000M</p>\n</li>\n<li><p>在峰值的时候所有PHP-CGI所耗内存在2000M以内。</p>\n</li>\n<li><p>假设’max_children’设置的较小，比如5-10个，那么php-cgi就会“很累”，处理速度也很慢，等待的时间也较长。</p>\n</li>\n<li><p>如果长时间没有得到处理的请求就会出现504 Gateway Time-out这个错误，而正在处理的很累的那几个php-cgi如果遇到了问题就会出现502 Bad gateway这个错误。</p>\n</li>\n</ol>\n<ul>\n<li><h3 id=\"start-servers-启动时的进程数\"><a href=\"#start-servers-启动时的进程数\" class=\"headerlink\" title=\"start_servers(启动时的进程数)\"></a>start_servers(启动时的进程数)</h3></li>\n</ul>\n<ol>\n<li>pm.start_servers的默认值为2。<blockquote>\n<p>其在php-fpm中给的计算方式也为：{（cpu空闲时等待连接的php的最小子进程数） + （cpu空闲时等待连接的php的最大子进程数 - cpu空闲时等待连接的php的最小子进程数）/ 2} 用配置表示就是：min_spare_servers + (max_spare_servers - min_spare_servers) / 2；</p>\n</blockquote>\n</li>\n<li>一般而言，设置成10-20之间的数据足够满足需求了</li>\n</ol>\n<ul>\n<li><h3 id=\"max-requests-最大请求数\"><a href=\"#max-requests-最大请求数\" class=\"headerlink\" title=\"max_requests(最大请求数)\"></a>max_requests(最大请求数)</h3></li>\n</ul>\n<blockquote>\n<p>最大处理请求数是指一个php-fpm的worker进程在处理多少个请求后就终止掉，master进程会重新spawn一个新的。这个配置的主要目的是避免php解释器或程序引用的第三方库造成的内存泄露。</p>\n</blockquote>\n<ul>\n<li>出现502的原因？</li>\n</ul>\n<p><code>502，是后端PHP-FPM不可用造成的，间歇性的502一般认为是由于PHP-FPM进程重启造成的</code></p>\n<ul>\n<li>但是为什么要重启进程呢？</li>\n</ul>\n<p><code>如果不定期重启 PHP-CGI 进程，势必造成内存使用量不断增长（比如第三方库有问题等）。因此 PHP-FPM 作为 PHP-CGI 的管理器，提供了这么一项监控功能，对请求达到指定次数的 PHP-CGI 进程进行重启，保证内存使用量不增长</code></p>\n<blockquote>\n<front color=\"red\">也正是因为这个机制，在高并发中，经常导致502错误，</front>\n</blockquote>\n<ul>\n<li><h3 id=\"request-terminate-timeout-最长执行时间\"><a href=\"#request-terminate-timeout-最长执行时间\" class=\"headerlink\" title=\"request_terminate_timeout(最长执行时间)\"></a>request_terminate_timeout(最长执行时间)</h3><code>设置单个请求的超时中止时间。该选项可能会对 php.ini 设置中的 &#39;max_execution_time&#39; 因为某些特殊原因没有中止运行的脚本有用。设置为 &#39;0&#39; 表示 &#39;Off&#39;。</code></li>\n</ul>\n<blockquote>\n<p>这两项都是用来配置一个PHP脚本的最大执行时间的。当超过这个时间时，PHP-FPM不只会终止脚本的执行，还会终止执行脚本的Worker进程,Nginx会发现与自己通信的连接断掉了，就会返回给客户端502错误</p>\n</blockquote>\n<h2 id=\"php-fpm-调优\"><a href=\"#php-fpm-调优\" class=\"headerlink\" title=\"php-fpm 调优\"></a>php-fpm 调优</h2><ul>\n<li>尽量少安装PHP模块</li>\n<li>的PHPFastCGI子进程数（max_children）调到适应大小</li>\n<li><p>使用socket连接FastCGI，linux操作系统可以放在 /dev/shm中</p>\n<blockquote>\n<p>注：在php-fpm.cnf里设置<value name=\"”listen_address”\">/tmp/nginx.socket</value>就可以通过socket连接FastCGI了，/dev/shm是内存文件系统，放在内存中肯定会快了.记得这时也要在nginx里的配置里进行修改，保持一致．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$&#123;</span><br><span class=\"line\">   #将Nginx与FastCGI的通信方式由TCP改为Unix Socket。TCP在高并发访问下比Unix Socket稳定，但Unix Socket速度要比TCP快。</span><br><span class=\"line\">   fastcgi_pass  unix:/tmp/php-cgi.sock;</span><br><span class=\"line\">   #fastcgi_pass  127.0.0.1:9000;</span><br><span class=\"line\">   fastcgi_index index.php;</span><br><span class=\"line\">   include fcgi.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>以root身份执行以下命令，调高linux内核打开文件数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;ulimit -HSn 65536&apos; &gt;&gt; /etc/profile</span><br><span class=\"line\">echo &apos;ulimit -HSn 65536&apos; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加 PHP-FPM 打开文件描述符的限制:</p>\n<blockquote>\n<p>把php-fpm.conf文件中的rlimit_files值1024改为4096或者更高，然后<front color=\"red\">重启 PHP-FPM</front></p>\n</blockquote>\n</li>\n<li><p>使用php代码加速器，例如 eAccelerator, XCache.在linux平台上可以把<code>cache_dir</code>指向 /dev/shm</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的。</p>\n</blockquote>\n<h2 id=\"配置文件详情注释\"><a href=\"#配置文件详情注释\" class=\"headerlink\" title=\"配置文件详情注释\"></a>配置文件详情注释</h2>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid = run/php-fpm.pid</span><br><span class=\"line\">#pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</span><br><span class=\"line\"></span><br><span class=\"line\">error_log = log/php-fpm.log</span><br><span class=\"line\">#错误日志，默认在安装目录中的var/log/php-fpm.log</span><br><span class=\"line\"></span><br><span class=\"line\">log_level = notice</span><br><span class=\"line\">#错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</span><br><span class=\"line\"></span><br><span class=\"line\">emergency_restart_threshold = 60</span><br><span class=\"line\">emergency_restart_interval = 60s</span><br><span class=\"line\">#表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</span><br><span class=\"line\"></span><br><span class=\"line\">process_control_timeout = 0</span><br><span class=\"line\">#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</span><br><span class=\"line\"></span><br><span class=\"line\">daemonize = yes</span><br><span class=\"line\">#后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</span><br><span class=\"line\"></span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br><span class=\"line\">#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: &apos;ip:port&apos;, &apos;port&apos;, &apos;/path/to/unix/socket&apos;. 每个进程池都需要设置.</span><br><span class=\"line\"></span><br><span class=\"line\">listen.backlog = -1</span><br><span class=\"line\">#backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。backlog含义参考：http://www.3gyou.cc/?p=41</span><br><span class=\"line\"></span><br><span class=\"line\">listen.allowed_clients = 127.0.0.1</span><br><span class=\"line\">#允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接</span><br><span class=\"line\"></span><br><span class=\"line\">listen.owner = www</span><br><span class=\"line\">listen.group = www</span><br><span class=\"line\">listen.mode = 0666</span><br><span class=\"line\">#unix socket设置选项，如果使用tcp方式访问，这里注释即可。</span><br><span class=\"line\"></span><br><span class=\"line\">user = www</span><br><span class=\"line\">group = www</span><br><span class=\"line\">#启动进程的帐户和组</span><br><span class=\"line\"></span><br><span class=\"line\">pm = dynamic #对于专用服务器，pm可以设置为static。</span><br><span class=\"line\">#如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</span><br><span class=\"line\">pm.max_children #，子进程最大数</span><br><span class=\"line\">pm.start_servers #，启动时的进程数</span><br><span class=\"line\">pm.min_spare_servers #，保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class=\"line\">pm.max_spare_servers #，保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class=\"line\"></span><br><span class=\"line\">pm.max_requests = 1000</span><br><span class=\"line\">#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 &apos;0&apos; 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.</span><br><span class=\"line\"></span><br><span class=\"line\">pm.status_path = /status</span><br><span class=\"line\">#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</span><br><span class=\"line\"></span><br><span class=\"line\">ping.path = /ping</span><br><span class=\"line\">#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</span><br><span class=\"line\"></span><br><span class=\"line\">ping.response = pong</span><br><span class=\"line\">#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</span><br><span class=\"line\"></span><br><span class=\"line\">request_terminate_timeout = 0</span><br><span class=\"line\">#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的&apos;max_execution_time&apos;因为某些特殊原因没有中止运行的脚本有用. 设置为 &apos;0&apos; 表示 &apos;Off&apos;.当经常出现502错误时可以尝试更改此选项。</span><br><span class=\"line\"></span><br><span class=\"line\">request_slowlog_timeout = 10s</span><br><span class=\"line\">#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 &apos;0&apos; 表示 &apos;Off&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">slowlog = log/$pool.log.slow</span><br><span class=\"line\">#慢请求的记录日志,配合request_slowlog_timeout使用</span><br><span class=\"line\"></span><br><span class=\"line\">rlimit_files = 1024</span><br><span class=\"line\">#设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</span><br><span class=\"line\"></span><br><span class=\"line\">rlimit_core = 0</span><br><span class=\"line\">#设置核心rlimit最大限制值. 可用值: &apos;unlimited&apos; 、0或者正整数. 默认值: 系统定义值.</span><br><span class=\"line\"></span><br><span class=\"line\">chroot =</span><br><span class=\"line\">#启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</span><br><span class=\"line\"></span><br><span class=\"line\">chdir =</span><br><span class=\"line\">#设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）</span><br><span class=\"line\"></span><br><span class=\"line\">catch_workers_output = yes</span><br><span class=\"line\">#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</span><br></pre></td></tr></table></figure>\n<h2 id=\"主要参数介绍\"><a href=\"#主要参数介绍\" class=\"headerlink\" title=\"主要参数介绍\"></a>主要参数介绍</h2><ul>\n<li><h3 id=\"pm-进程管理\"><a href=\"#pm-进程管理\" class=\"headerlink\" title=\"pm (进程管理)\"></a>pm (进程管理)</h3><code>管理进程方式: pm = static/dynamic</code></li>\n</ul>\n<ol>\n<li>static(静态) ：表示在fpm运行时直接fork出pm.max_chindren个worker进程</li>\n<li>dynamic(动态)：表示运行时fork出start_servers个进程，随着负载的情况，动态的调整，最多不超过max_children个进程</li>\n</ol>\n<blockquote>\n<p>一般推荐用static，优点是不用动态的判断负载情况，提升性能，缺点是多占用些系统内存资源。</p>\n</blockquote>\n<ul>\n<li><h3 id=\"max-children-子进程最大数\"><a href=\"#max-children-子进程最大数\" class=\"headerlink\" title=\"max_children(子进程最大数)\"></a>max_children(子进程最大数)</h3></li>\n</ul>\n<ol>\n<li><p>这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。</p>\n</li>\n<li><p>设置’max_children’需要根据服务器的性能进行设定</p>\n</li>\n<li><p>一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右</p>\n</li>\n<li><p>假设“max_children”设置成100个，20M*100=2000M</p>\n</li>\n<li><p>在峰值的时候所有PHP-CGI所耗内存在2000M以内。</p>\n</li>\n<li><p>假设’max_children’设置的较小，比如5-10个，那么php-cgi就会“很累”，处理速度也很慢，等待的时间也较长。</p>\n</li>\n<li><p>如果长时间没有得到处理的请求就会出现504 Gateway Time-out这个错误，而正在处理的很累的那几个php-cgi如果遇到了问题就会出现502 Bad gateway这个错误。</p>\n</li>\n</ol>\n<ul>\n<li><h3 id=\"start-servers-启动时的进程数\"><a href=\"#start-servers-启动时的进程数\" class=\"headerlink\" title=\"start_servers(启动时的进程数)\"></a>start_servers(启动时的进程数)</h3></li>\n</ul>\n<ol>\n<li>pm.start_servers的默认值为2。<blockquote>\n<p>其在php-fpm中给的计算方式也为：{（cpu空闲时等待连接的php的最小子进程数） + （cpu空闲时等待连接的php的最大子进程数 - cpu空闲时等待连接的php的最小子进程数）/ 2} 用配置表示就是：min_spare_servers + (max_spare_servers - min_spare_servers) / 2；</p>\n</blockquote>\n</li>\n<li>一般而言，设置成10-20之间的数据足够满足需求了</li>\n</ol>\n<ul>\n<li><h3 id=\"max-requests-最大请求数\"><a href=\"#max-requests-最大请求数\" class=\"headerlink\" title=\"max_requests(最大请求数)\"></a>max_requests(最大请求数)</h3></li>\n</ul>\n<blockquote>\n<p>最大处理请求数是指一个php-fpm的worker进程在处理多少个请求后就终止掉，master进程会重新spawn一个新的。这个配置的主要目的是避免php解释器或程序引用的第三方库造成的内存泄露。</p>\n</blockquote>\n<ul>\n<li>出现502的原因？</li>\n</ul>\n<p><code>502，是后端PHP-FPM不可用造成的，间歇性的502一般认为是由于PHP-FPM进程重启造成的</code></p>\n<ul>\n<li>但是为什么要重启进程呢？</li>\n</ul>\n<p><code>如果不定期重启 PHP-CGI 进程，势必造成内存使用量不断增长（比如第三方库有问题等）。因此 PHP-FPM 作为 PHP-CGI 的管理器，提供了这么一项监控功能，对请求达到指定次数的 PHP-CGI 进程进行重启，保证内存使用量不增长</code></p>\n<blockquote>\n<front color=\"red\">也正是因为这个机制，在高并发中，经常导致502错误，</front>\n</blockquote>\n<ul>\n<li><h3 id=\"request-terminate-timeout-最长执行时间\"><a href=\"#request-terminate-timeout-最长执行时间\" class=\"headerlink\" title=\"request_terminate_timeout(最长执行时间)\"></a>request_terminate_timeout(最长执行时间)</h3><code>设置单个请求的超时中止时间。该选项可能会对 php.ini 设置中的 &#39;max_execution_time&#39; 因为某些特殊原因没有中止运行的脚本有用。设置为 &#39;0&#39; 表示 &#39;Off&#39;。</code></li>\n</ul>\n<blockquote>\n<p>这两项都是用来配置一个PHP脚本的最大执行时间的。当超过这个时间时，PHP-FPM不只会终止脚本的执行，还会终止执行脚本的Worker进程,Nginx会发现与自己通信的连接断掉了，就会返回给客户端502错误</p>\n</blockquote>\n<h2 id=\"php-fpm-调优\"><a href=\"#php-fpm-调优\" class=\"headerlink\" title=\"php-fpm 调优\"></a>php-fpm 调优</h2><ul>\n<li>尽量少安装PHP模块</li>\n<li>的PHPFastCGI子进程数（max_children）调到适应大小</li>\n<li><p>使用socket连接FastCGI，linux操作系统可以放在 /dev/shm中</p>\n<blockquote>\n<p>注：在php-fpm.cnf里设置<value name=\"”listen_address”\">/tmp/nginx.socket</value>就可以通过socket连接FastCGI了，/dev/shm是内存文件系统，放在内存中肯定会快了.记得这时也要在nginx里的配置里进行修改，保持一致．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$&#123;</span><br><span class=\"line\">   #将Nginx与FastCGI的通信方式由TCP改为Unix Socket。TCP在高并发访问下比Unix Socket稳定，但Unix Socket速度要比TCP快。</span><br><span class=\"line\">   fastcgi_pass  unix:/tmp/php-cgi.sock;</span><br><span class=\"line\">   #fastcgi_pass  127.0.0.1:9000;</span><br><span class=\"line\">   fastcgi_index index.php;</span><br><span class=\"line\">   include fcgi.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>以root身份执行以下命令，调高linux内核打开文件数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;ulimit -HSn 65536&apos; &gt;&gt; /etc/profile</span><br><span class=\"line\">echo &apos;ulimit -HSn 65536&apos; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加 PHP-FPM 打开文件描述符的限制:</p>\n<blockquote>\n<p>把php-fpm.conf文件中的rlimit_files值1024改为4096或者更高，然后<front color=\"red\">重启 PHP-FPM</front></p>\n</blockquote>\n</li>\n<li><p>使用php代码加速器，例如 eAccelerator, XCache.在linux平台上可以把<code>cache_dir</code>指向 /dev/shm</p>\n</li>\n</ul>"},{"title":"RabbitMQ安装方法总结","date":"2018-08-02T16:00:00.000Z","_content":"\n具体安装如下：\n\n### 一：安装Erlang：\n \n \n```$xslt\n  \n # rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc  \n  \n # cd /etc/yum.repos.d/ \n  \n # wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo  \n  \n # yum install esl-erlang  \n```\n\n<!--more-->\n### 二：安装esl-erlang-compat：\n```$xslt\n# cd /tmp/  \n  \n# wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm   \n  \n# yum install esl-erlang-compat-R14B-1.el6.noarch.rpm \n \n\n```\n\n### 三：安装RabbitMQ\n \n ```$xslt\n # cd /tmp \n \n #  wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm \n \n # yum install rabbitmq-server-3.6.2-1.noarch.rpm \n```\n\n  \n到此，RabbitMQ基本安装完成了。\n \n \n \n### 四：RabbitMQ页面监控系统\nRabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。\n在Documentation下的Server下的Management是关于配置这个插件的。地址：http://www.rabbitmq.com/management.html\n这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。\n \n命令： \n```$xslt\n# rabbitmq-plugins enable rabbitmq_management\n```\n\n \n### 五：配置登陆用户\n \n ```$xslt\n# rabbitmqctl  add_user leyue leyue100\n# rabbitmqctl  set_user_tags leyue administrator\n# rabbitmqctl  set_permissions -p / leyue \".*\" \".*\" \".*\"\n```\n\n \n浏览器地址栏输入：http://localhost:15672  用户名登陆\n \n \n \nRabbitMQ服务启动、关闭、重启\n```$xslt\n# service rabbitmq-server start  //开启\n\n# service rabbitmq-server stop   //关闭\n\n#service rabbitmq-server restart //重启\n```\n\n\n \n具体使用，待续....","source":"_posts/rabbit-mq-install.md","raw":"---\ntitle: RabbitMQ安装方法总结\ndate: 2018-08-03\ntags:\n - rabbitmq\n - linux\ncategories:\n - 消息队列 \n---\n\n具体安装如下：\n\n### 一：安装Erlang：\n \n \n```$xslt\n  \n # rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc  \n  \n # cd /etc/yum.repos.d/ \n  \n # wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo  \n  \n # yum install esl-erlang  \n```\n\n<!--more-->\n### 二：安装esl-erlang-compat：\n```$xslt\n# cd /tmp/  \n  \n# wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm   \n  \n# yum install esl-erlang-compat-R14B-1.el6.noarch.rpm \n \n\n```\n\n### 三：安装RabbitMQ\n \n ```$xslt\n # cd /tmp \n \n #  wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm \n \n # yum install rabbitmq-server-3.6.2-1.noarch.rpm \n```\n\n  \n到此，RabbitMQ基本安装完成了。\n \n \n \n### 四：RabbitMQ页面监控系统\nRabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。\n在Documentation下的Server下的Management是关于配置这个插件的。地址：http://www.rabbitmq.com/management.html\n这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。\n \n命令： \n```$xslt\n# rabbitmq-plugins enable rabbitmq_management\n```\n\n \n### 五：配置登陆用户\n \n ```$xslt\n# rabbitmqctl  add_user leyue leyue100\n# rabbitmqctl  set_user_tags leyue administrator\n# rabbitmqctl  set_permissions -p / leyue \".*\" \".*\" \".*\"\n```\n\n \n浏览器地址栏输入：http://localhost:15672  用户名登陆\n \n \n \nRabbitMQ服务启动、关闭、重启\n```$xslt\n# service rabbitmq-server start  //开启\n\n# service rabbitmq-server stop   //关闭\n\n#service rabbitmq-server restart //重启\n```\n\n\n \n具体使用，待续....","slug":"rabbit-mq-install","published":1,"updated":"2019-03-25T11:43:42.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987lm001m0641lqxt1fsn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>具体安装如下：</p>\n<h3 id=\"一：安装Erlang：\"><a href=\"#一：安装Erlang：\" class=\"headerlink\" title=\"一：安装Erlang：\"></a>一：安装Erlang：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"># rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc  </span><br><span class=\"line\"> </span><br><span class=\"line\"># cd /etc/yum.repos.d/ </span><br><span class=\"line\"> </span><br><span class=\"line\"># wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo  </span><br><span class=\"line\"> </span><br><span class=\"line\"># yum install esl-erlang</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"二：安装esl-erlang-compat：\"><a href=\"#二：安装esl-erlang-compat：\" class=\"headerlink\" title=\"二：安装esl-erlang-compat：\"></a>二：安装esl-erlang-compat：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /tmp/  </span><br><span class=\"line\">  </span><br><span class=\"line\"># wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm   </span><br><span class=\"line\">  </span><br><span class=\"line\"># yum install esl-erlang-compat-R14B-1.el6.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"三：安装RabbitMQ\"><a href=\"#三：安装RabbitMQ\" class=\"headerlink\" title=\"三：安装RabbitMQ\"></a>三：安装RabbitMQ</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /tmp </span><br><span class=\"line\"></span><br><span class=\"line\">#  wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm </span><br><span class=\"line\"></span><br><span class=\"line\"># yum install rabbitmq-server-3.6.2-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>到此，RabbitMQ基本安装完成了。</p>\n<h3 id=\"四：RabbitMQ页面监控系统\"><a href=\"#四：RabbitMQ页面监控系统\" class=\"headerlink\" title=\"四：RabbitMQ页面监控系统\"></a>四：RabbitMQ页面监控系统</h3><p>RabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。<br>在Documentation下的Server下的Management是关于配置这个插件的。地址：<a href=\"http://www.rabbitmq.com/management.html\" target=\"_blank\" rel=\"noopener\">http://www.rabbitmq.com/management.html</a><br>这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。</p>\n<p>命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五：配置登陆用户\"><a href=\"#五：配置登陆用户\" class=\"headerlink\" title=\"五：配置登陆用户\"></a>五：配置登陆用户</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rabbitmqctl  add_user leyue leyue100</span><br><span class=\"line\"># rabbitmqctl  set_user_tags leyue administrator</span><br><span class=\"line\"># rabbitmqctl  set_permissions -p / leyue &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>\n<p>浏览器地址栏输入：<a href=\"http://localhost:15672\" target=\"_blank\" rel=\"noopener\">http://localhost:15672</a>  用户名登陆</p>\n<p>RabbitMQ服务启动、关闭、重启<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service rabbitmq-server start  //开启</span><br><span class=\"line\"></span><br><span class=\"line\"># service rabbitmq-server stop   //关闭</span><br><span class=\"line\"></span><br><span class=\"line\">#service rabbitmq-server restart //重启</span><br></pre></td></tr></table></figure></p>\n<p>具体使用，待续….</p>\n","site":{"data":{}},"excerpt":"<p>具体安装如下：</p>\n<h3 id=\"一：安装Erlang：\"><a href=\"#一：安装Erlang：\" class=\"headerlink\" title=\"一：安装Erlang：\"></a>一：安装Erlang：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"># rpm --import http://binaries.erlang-solutions.com/debian/erlang_solutions.asc  </span><br><span class=\"line\"> </span><br><span class=\"line\"># cd /etc/yum.repos.d/ </span><br><span class=\"line\"> </span><br><span class=\"line\"># wget http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo  </span><br><span class=\"line\"> </span><br><span class=\"line\"># yum install esl-erlang</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"二：安装esl-erlang-compat：\"><a href=\"#二：安装esl-erlang-compat：\" class=\"headerlink\" title=\"二：安装esl-erlang-compat：\"></a>二：安装esl-erlang-compat：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /tmp/  </span><br><span class=\"line\">  </span><br><span class=\"line\"># wget https://raw.github.com/jasonmcintosh/esl-erlang-compat/master/rpmbuild/RPMS/noarch/esl-erlang-compat-R14B-1.el6.noarch.rpm   </span><br><span class=\"line\">  </span><br><span class=\"line\"># yum install esl-erlang-compat-R14B-1.el6.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"三：安装RabbitMQ\"><a href=\"#三：安装RabbitMQ\" class=\"headerlink\" title=\"三：安装RabbitMQ\"></a>三：安装RabbitMQ</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /tmp </span><br><span class=\"line\"></span><br><span class=\"line\">#  wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.2/rabbitmq-server-3.6.2-1.noarch.rpm </span><br><span class=\"line\"></span><br><span class=\"line\"># yum install rabbitmq-server-3.6.2-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>到此，RabbitMQ基本安装完成了。</p>\n<h3 id=\"四：RabbitMQ页面监控系统\"><a href=\"#四：RabbitMQ页面监控系统\" class=\"headerlink\" title=\"四：RabbitMQ页面监控系统\"></a>四：RabbitMQ页面监控系统</h3><p>RabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。<br>在Documentation下的Server下的Management是关于配置这个插件的。地址：<a href=\"http://www.rabbitmq.com/management.html\" target=\"_blank\" rel=\"noopener\">http://www.rabbitmq.com/management.html</a><br>这个管理插件是包含在RabbitMQ发行包里的，所以只需激活即可。</p>\n<p>命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五：配置登陆用户\"><a href=\"#五：配置登陆用户\" class=\"headerlink\" title=\"五：配置登陆用户\"></a>五：配置登陆用户</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rabbitmqctl  add_user leyue leyue100</span><br><span class=\"line\"># rabbitmqctl  set_user_tags leyue administrator</span><br><span class=\"line\"># rabbitmqctl  set_permissions -p / leyue &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>\n<p>浏览器地址栏输入：<a href=\"http://localhost:15672\" target=\"_blank\" rel=\"noopener\">http://localhost:15672</a>  用户名登陆</p>\n<p>RabbitMQ服务启动、关闭、重启<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service rabbitmq-server start  //开启</span><br><span class=\"line\"></span><br><span class=\"line\"># service rabbitmq-server stop   //关闭</span><br><span class=\"line\"></span><br><span class=\"line\">#service rabbitmq-server restart //重启</span><br></pre></td></tr></table></figure></p>\n<p>具体使用，待续….</p>"},{"title":"php7更新记录","date":"2018-10-05T16:00:00.000Z","_content":"\n## 一.PHP5.6.x 移植PHP7.0.x\n\n### 1、PHP7.0.x 新特性\n\n- #### 1.1 太空船操作符（组合比较符） (<=>)\n>太空船操作符用于比较两个表达式，当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。<font color='red'>对象不能进行比较</font>。\n\n```php\n<?php\n// 整数\necho 1 <=> 1; // 0\necho 1 <=> 2; // -1\necho 2 <=> 1; // 1\n\n// 浮点数\necho 1.5 <=> 1.5; // 0\necho 1.5 <=> 2.5; // -1\necho 2.5 <=> 1.5; // 1\n \n// 字符串\necho \"a\" <=> \"a\"; // 0\necho \"a\" <=> \"b\"; // -1\necho \"b\" <=> \"a\"; // 1\n?>\n\n```\n<!--more-->\n- #### 1.2 null合并运算符\n>由于日常使用中存在大量同时使用三元表达式和 isset()的情况， 我们添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。\n\n```php\n<?php\n# php7以前\n$a = isset($_GET['a']) ? $_GET['a'] : 'none';\n\n#PHP 7\n$a = isset($_GET['a']) ?? 'none';\n\n```\n\n- #### 1.3 变量类型声明\n> 变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数int、string、float、bool\n\n**非严格模式**\n```php\n<?php\n\nfunction sumOfInts(int ...$ints)\n{\n    return array_sum($ints);\n}\nvar_dump(sumOfInts(2, '3', 4.1)); // int(9)\n\n```\n**严格模式**\n\n```php\n<?php\n# 严格模式\ndeclare(strict_types=1);\n\nfunction add(int $x, int $y)\n{\n    return $x + $y;\n}\nvar_dump(add('2', 3)); \n// Fatal error: Argument 1 passed to add() must be of the type integer\n\n```\n>要使用严格模式，<font color='red'>一个declare声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。</font> 这个指令不仅影响参数的类型声明，也影响到函数的返回值声明\n\n\n- #### 1.4 返回值类型声明\n\n>增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可\n```php\n<?php\nfunction fun(int $a): array\n{\n  return $a;\n}\nfun(3);//Fatal error\n\n```\n\n- #### 1.5 匿名类\n>php7允许new class {} 创建一个匿名的对象。\n```php\n<?php\n//php7以前\nclass Logger\n{\n    public function log($msg)\n    {\n        echo $msg;\n    }\n}\n\n$util->setLogger(new Logger());\n\n// php7+\n$util->setLogger(new class {\n    public function log($msg)\n    {\n        echo $msg;\n    }\n});\n\n```\n- #### 1.6 Unicode codepoint 转译语法\n>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的\n\n```php\n<?php\necho \"\\u{aa}\";// ª\necho \"\\u{0000aa}\";// ª\necho \"\\u{9999}\";// 香\n```\n\n- ####  1.7 Closure::call\n> 闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。\n```php\n<?php\nclass A {private $x = 1;}\n\n// PHP 7 之前版本的代码\n$getXCB = function() {return $this->x;};\n$getX = $getXCB->bindTo(new A, 'A'); // 中间层闭包\necho $getX();\n\n// PHP 7+ 及更高版本的代码\n$getX = function() {return $this->x;};\necho $getX->call(new A);\n```\n- #### 1.8 带过滤的unserialize\n\n> 提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入\n```php\n<?php\n// 将所有的对象都转换为 __PHP_Incomplete_Class 对象\n$data = unserialize($foo, [\"allowed_classes\" => false]);\n\n// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象\n$data = unserialize($foo, [\"allowed_classes\" => [\"MyClass\", \"MyClass2\"]);\n\n// 默认情况下所有的类都是可接受的，等同于省略第二个参数\n$data = unserialize($foo, [\"allowed_classes\" => true]);\n\n```\n\n- #### 1.9 IntlChar类\n>新增加的 [IntlChar](http://php.net/manual/zh/class.intlchar.php) 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。\n\n```php\n<?php\nprintf('%x', IntlChar::CODEPOINT_MAX);//10ffff\necho IntlChar::charName('@');//COMMERCIAL AT\nvar_dump(IntlChar::ispunct('!'));//bool(true)\n```\n> 若要使用此类，请先安装Intl扩展\n\n- #### 1.10 预期\n> 预期是向后兼用并增强之前的 [assert()](http://php.net/manual/zh/function.assert.php) 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。\n\n```php\n<?php\nini_set('assert.exception', 1);\n\nclass CustomError extends AssertionError {}\n\nassert(false, new CustomError('Some error message'));\n\n//输出：Fatal error: Uncaught CustomError: Some error message\n?>\n```\n\n- #### 1.11 命名空间按组导入\n>从同一个命名空间下导入的类、函数、常量支持按组一次导入\n\n```php\n<?php\n//php7以前\nuse app\\model\\A;\nuse app\\model\\B;\n\n//php7+\nuse app\\model{A,B}\n```\n\n- #### 1.12 生成器支持返回表达式\n> 此特性基于 PHP 5.5 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。\n\n```php\n<?php\n\n$gen = (function() {\n    yield 1;\n    yield 2;\n\n    return 3;\n})();\n\nforeach ($gen as $val) {\n    echo $val, PHP_EOL;\n}\n\necho $gen->getReturn(), PHP_EOL;\n\n//输出\n/**\n  1\n  2\n  3\n*/\n```\n- #### 1.13 生成器委派\n>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。\n```php\n<?php\n\nfunction gen()\n{\n    yield 1;\n    yield 2;\n\n    yield from gen2();\n}\n\nfunction gen2()\n{\n    yield 3;\n    yield 4;\n}\n\nforeach (gen() as $val)\n{\n    echo $val, PHP_EOL;\n}\n\n//输出\n// 1\n// 2\n// 3\n// 4\n?>\n```\n\n- #### 1.14 整数除法函数intdiv\n```php\n<?php\nvar_dump(intdiv(10,3)); //3\n```\n- #### 1.15 会话选项设置\n> session_start() 可以加入一个数组覆盖php.ini的配置\n\n```php\n<?php\nsession_start([\n    'cache_limiter' => 'private',\n    'read_and_close' => true,\n]);\n\n```\n- #### 1.16 preg_replace_callback_array\n> 在 PHP7 之前，当使用 [preg_replace_callback()](http://php.net/manual/zh/function.preg-replace-callback.php) 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 [preg_replace_callback_array()](http://php.net/manual/zh/function.preg-replace-callback-array.php) 函数， 可以使得代码更加简洁。\n\n```php\n<?php\n//string preg_replace_callback_array(array $regexesAndCallbacks, string $input);\n$tokenStream = []; // [tokenName, lexeme] pairs\n\n$input = <<<'end'\n$a = 3; // variable initialisation\nend;\n\n// Pre PHP 7 code\npreg_replace_callback(\n    [\n        '~\\$[a-z_][a-z\\d_]*~i',\n        '~=~',\n        '~[\\d]+~',\n        '~;~',\n        '~//.*~'\n    ],\n    function ($match) use (&$tokenStream) {\n        if (strpos($match[0], '$') === 0) {\n            $tokenStream[] = ['T_VARIABLE', $match[0]];\n        } elseif (strpos($match[0], '=') === 0) {\n            $tokenStream[] = ['T_ASSIGN', $match[0]];\n        } elseif (ctype_digit($match[0])) {\n            $tokenStream[] = ['T_NUM', $match[0]];\n        } elseif (strpos($match[0], ';') === 0) {\n            $tokenStream[] = ['T_TERMINATE_STMT', $match[0]];\n        } elseif (strpos($match[0], '//') === 0) {\n            $tokenStream[] = ['T_COMMENT', $match[0]];\n        }\n    },\n    $input\n);\n\n// PHP 7+ code\npreg_replace_callback_array(\n    [\n        '~\\$[a-z_][a-z\\d_]*~i' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_VARIABLE', $match[0]];\n        },\n        '~=~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_ASSIGN', $match[0]];\n        },\n        '~[\\d]+~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_NUM', $match[0]];\n        },\n        '~;~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_TERMINATE_STMT', $match[0]];\n        },\n        '~//.*~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_COMMENT', $match[0]];\n        }\n    ],\n    $input\n);\n```\n- #### 1.17 随机数、随机字符函数\n> 新加入两个跨平台的函数： [random_bytes(http://php.net/manual/zh/function.random-bytes.php)]() 和 [random_int()](http://php.net/manual/zh/function.random-int.php) 用来产生高安全级别的随机字符串和随机整数。\n\n```php\n<?php\n$bytes = random_bytes(5);\nvar_dump(bin2hex($bytes));//string(10) \"385e33f741\"\n\nvar_dump(random_int(100, 999));//int(248)\nvar_dump(random_int(-1000, 0));//int(-898)\n\n```\n- #### 1.18 define 支持定义数组\n```php\n<?php\ndefine('ALLOWED_IMAGE_EXTENSIONS', ['jpg', 'jpeg', 'gif', 'png']);\n```\n[查看所有新特性详情](http://php.net/manual/zh/migration70.new-features.php)\n\n### 2、PHP7.0.x 新变化\n- #### 2.1 错误和异常处理相关的变更\n> 在PHP7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。 这些异常继承自 Error 类，此类实现了 Throwable 接口 （所有异常都实现了这个基础接口）。\n\n\n`这也意味着，当发生错误的时候，以前代码中的一些错误处理的代码将无法被触发。 因为在 PHP7 版本中，已经使用抛出异常的错误处理机制了。（如果代码中没有捕获 Error 异常，那么会引发致命错误）`\n\n**set_exception_handler() 不再保证收到的一定是 Exception 对象**\n\n_抛出Error对象时，如果set_exception_handler()里的异常处理代码声明了类型 Exception ，将会导致fatal error。\n想要异常处理器同时支持PHP5和PHP7，应该删掉异常处理器里的类型声明。如果代码仅仅是升级到PHP7，则可以把类型 Exception替换成Throwable_\n```php\n<?php\n// PHP 5 时代的代码将会出现问题\nfunction handler(Exception $e) { ... }\nset_exception_handler('handler');\n\n// 兼容 PHP 5 和 7\nfunction handler($e) { ... }\n\n// 仅支持 PHP 7\nfunction handler(Throwable $e) { ... }\n?>\n```\n\n\n\n- #### 2.2 list() 会按照原来的顺序进行赋值。不再是逆序了\n```php\nlist($a,$b,$c) = [1,2,3];\n//PHP5\nvar_dump($a);//3\nvar_dump($b);//2\nvar_dump($c);//1\n\n\n//PHP7+\nvar_dump($a);//1\nvar_dump($b);//2\nvar_dump($c);//3\n\n```\n**空的list()赋值支持已经被移除**\nlist() 结构现在不再能是空的。如下的例子不再被允许：\n```php\n<?php\nlist() = $a;\nlist(,,) = $a;\nlist($x, list(), $y) = $a;\n```\n- #### 2.3 foreach不再改变内部数组指针\n> 在PHP7之前，当数组通过 foreach 迭代时，数组指针会移动。现在开始，不再如此，见下面代码\n\n```php\n<?php\n$array = [0, 1, 2];\nforeach ($array as &$val) {\n    var_dump(current($array));\n}\n\n//PHP5 输出\nint(1);\nint(2);\nbool(false);\n\n//PHP7+ 输出\nint(0);\nint(0);\nint(0);\n```\n\n- #### 2.4 十六进制字符串不再被认为是数字\n> 含十六进制字符串不再被认为是数字\n```php\n<?php\nvar_dump(is_numeric(\"0x123\"));\n\n//PHP5 输出\nbool(true);\n\n//PHP7+ 输出\nbool(false);\n\n```\n[查看所有变化详情](http://php.net/manual/zh/migration70.incompatible.php)\n\n\n### 3、PHP7.0.x 废弃的特性\n\n- #### 3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\n\n> PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 E_DEPRECATED 警告。 如果还定义了 __construct() 方法则不受影响。\n\n```php\n<?php\nclass foo {\n    function foo() {\n        echo 'I am the constructor';\n    }\n}\n\n```\n以上例程会输出：\n> Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3\n\n\n- #### 3.2 静态调用非静态的方法\n>废弃了 静态（Static） 调用未声明成 static 的方法，未来可能会彻底移除该功能。\n```php\n<?php\nclass foo {\n    function bar() {\n        echo 'I am not static!';\n    }\n}\n\nfoo::bar();\n```\n以上例程会输出：\n> Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static!\n\n[查看更多PHP7.0.x 弃用的功能](http://php.net/manual/zh/migration70.deprecated.php)\n\n### 4、PHP7.0.x 移除的扩展和 SAPI\n\n- #### 4.1 移除的扩展\n  - ereg\n  - mssql\n  - mysql\n  - sybase_ct\n\n- #### 4.2 移除的 SAPI\n  - aolserver\n  - apache\n  - apache_hooks\n  - apache2filter\n  - caudium\n  - continuity\n  - isapi\n  - milter\n  - nsapi\n  - phttpd\n  - pi3web\n  - roxen\n  - thttpd\n  - tux\n  - webjames\n\n\n## 二.PHP7.0.x 移植PHP7.1.x\n\n ### 1、PHP7.1.x 新特性\n- #### 1.1 可为空(Nullables)类型\n>参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。 当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是null 。\n\n```php\n<?php\nfunction test(?string $name)\n{\n    var_dump($name);\n}\n\ntest('elePHPant');\ntest(null);\ntest();\n```\n输出结果\n```\nstring(10) \"elePHPant\"\n\nNULL\n\nUncaught Error: Too few arguments to function test(), 0 passed in...\n\n```\n\n- #### 1.2 Void 函数\n>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，NULL 不是一个合法的返回值\n\n```php\n<?php\nfunction swap(&$left, &$right) : void\n{\n    if ($left === $right) {\n        return;\n    }\n\n    $tmp = $left;\n    $left = $right;\n    $right = $tmp;\n}\n\n$a = 1;\n$b = 2;\nvar_dump(swap($a, $b), $a, $b);\n\n```\n输出结果\n``` \nnull\nint(2)\nint(1)\n```\n>试图去获取一个 void 方法的返回值会得到 NULL ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。\n\n- #### 1.3 类常量可见性\n> 现在起支持设置类常量的可见性(public、protected、private)。\n\n```php\n<?php\nclass ConstDemo\n{\n    const PUBLIC_CONST_A = 1;\n    public const PUBLIC_CONST_B = 2;\n    protected const PROTECTED_CONST = 3;\n    private const PRIVATE_CONST = 4;\n}\n```\n- #### 1.4 短数组语法（[]）\n>短数组语法（[]）现在作为list()语法的一个备选项，可以用于将数组的值赋给一些变量（包括在foreach中）。\n```php\n<?php\n$data = [\n    [1, 'Tom'],\n    [2, 'Fred'],\n];\n\n// list() style\nlist($id1, $name1) = $data[0];\n\n// [] style\n[$id1, $name1] = $data[0];\n\n// list() style\nforeach ($data as list($id, $name)) {\n    // logic here with $id and $name\n}\n\n// [] style\nforeach ($data as [$id, $name]) {\n    // logic here with $id and $name\n}\n```\n- #### 1.5 iterable伪类\n>现在引入了一个新的被称为iterable的伪类 (与[callable](http://php.net/manual/zh/language.types.callable.php)类似)。 这可以被用在参数或者返回值类型中，它代表接受数组或者实现了Traversable接口的对象。 至于子类，当用作参数时，子类可以收紧父类的iterable类型到array 或一个实现了Traversable的对象。对于返回值，子类可以拓宽父类的 array或对象返回值类型到iterable。\n\n```php\n<?php\nfunction iterator(iterable $iter)\n{\n    foreach ($iter as $val) {\n        //\n    }\n}\n```\n\n- #### 1.6 多异常捕获处理\n> 一个catch语句块现在可以通过管道字符(|)来实现多个异常的捕获。 这对于需要同时处理来自不同类的不同异常时很有用。\n\n```php\n<?php\ntry {\n    // some code\n} catch (FirstException | SecondException $e) {\n    // handle first and second exceptions\n}\n\n```\n- #### 1.7 list支持键名\n> 现在list()和它的新的[]语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）\n\n```php\n<?php\n$data = [\n    [\"id\" => 1, \"name\" => 'Tom'],\n    [\"id\" => 2, \"name\" => 'Fred'],\n];\n\n// list() style\nlist(\"id\" => $id1, \"name\" => $name1) = $data[0];\n\n// [] style\n[\"id\" => $id1, \"name\" => $name1] = $data[0];\n\n// list() style\nforeach ($data as list(\"id\" => $id, \"name\" => $name)) {\n    // logic here with $id and $name\n}\n\n// [] style\nforeach ($data as [\"id\" => $id, \"name\" => $name]) {\n    // logic here with $id and $name\n}\n```\n\n- #### 1.8 支持为负的字符串偏移量\n>现在所有支持偏移量的[字符串操作函数](http://php.net/manual/zh/book.strings.php) 都支持接受负数作为偏移量，包括通过[]或{}操作字符串下标。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。\n\n```php\n<?php\nvar_dump(\"abcdef\"[-2]);//string (1) \"e\"\nvar_dump(strpos(\"aabbcc\", \"b\", -3));//int(3)\n\n$string = 'bar';\necho \"The last character of '$string' is '$string[-1]'.\\n\";\n\n//输出: The last character of 'bar' is 'r'.\n```\n\n- #### 1.9 将callables转为闭包\n> [Closure](http://php.net/manual/zh/class.closure.php)新增了一个静态方法fromCallable()，用于将callable快速地 转为一个Closure 对象。\n```php\n<?php\nclass Test\n{\n    public function exposeFunction()\n    {\n        return Closure::fromCallable([$this, 'privateFunction']);\n    }\n\n    private function privateFunction($param)\n    {\n        var_dump($param);\n    }\n}\n\n$privFunc = (new Test)->exposeFunction();\n$privFunc('some value');\n\n//输出:string(10) \"some value\"\n\n```\n\n- #### 1.10 http2服务推送\n>对服务器推送的支持现在已经被加入到CURL扩展中（ 需要版本 7.46 或更高）。这个可以通过[curl_multi_setopt()](http://php.net/manual/zh/function.curl-multi-setopt.php)函数与新的常量 **CURLMOPT_PUSHFUNCTION** 来进行调节。常量 **CURL_PUST_OK** 和 **CURL_PUSH_DENY** 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。\n\n### 2、PHP7.1.x 新变化\n- #### 2.1 传递参数过少时将抛出错误\n>过去我们传递参数过少会产生warning。php7.1开始会抛出error\n\n\n### 3、PHP 7.1.x 中废弃的特性\n- #### 3.1 移除了ext/mcrypt拓展\n> mcrypt 扩展已经过时了大约10年，并且用起来很复杂。因此它被废弃并且被 OpenSSL 所取代。 从PHP7.2起它将被从核心代码中移除并且移到PECL中。\n\n\n## 三.PHP7.1.x 移植PHP7.2.x\n\n ### 1、PHP7.2.x 新特性\n \n- #### 1.1 增加新的类型object\n `这种新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。`\n ```php\n<?php\n\nfunction test(object $obj) : object\n{\n    return new SplQueue();\n}\ntest(new StdClass());\n```\n- #### 1.2 通过名称加载扩展\n<font size=\"2\">扩展文件不再需要通过文件加载 (Unix下以.so为文件扩展名，在Windows下以 .dll 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用 [dl()](http://php.net/manual/zh/function.dl.php) 函数进行启用。</font>\n``` \n; ini file\nextension=php-ast\nzend_extension=opcache\n```\n\n- #### 1.3 允许重写抽象方法\n`当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法`\n```php\n<?php\nabstract class A\n{\n    abstract function test(string $s);\n}\nabstract class B extends A\n{\n    // overridden - still maintaining contravariance for parameters and covariance for return\n    abstract function test($s) : int;\n}\n```\n- #### 1.4 使用Argon2算法生成密码散列\n<font size=\"2\">Argon2 已经被加入到密码散列（password hashing） API ([这些函数以 password_ 开头](http://php.net/manual/zh/book.password.php)) 以下是暴露出来的常量:`</front>\n- PASSWORD_ARGON2I\n- PASSWORD_ARGON2_DEFAULT_MEMORY_COST\n- PASSWORD_ARGON2_DEFAULT_TIME_COST\n- PASSWORD_ARGON2_DEFAULT_THREADS\n- #### 1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶\n`当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：`\n\n- PDO::PARAM_STR_NATL\n- PDO::PARAM_STR_CHAR\n- PDO::ATTR_DEFAULT_STR_PARAM\n\n这些常量通过PDO::PARAM_STR利用位运算OR进行计算：\n```php\n<?php\n$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);\n```\n- #### 1.5 允许分组命名空间的尾部逗号\n<font size=\"2\">命名空间可以在PHP7.2中使用尾随逗号进行分组引入。</font>\n```php\n<?php\n\nuse Foo\\Bar\\{\n    Foo,\n    Bar,\n    Baz,\n};\n```\n> <front color=\"red\">在php7.0中 最后一个(Baz,)不能有逗号否则报错</front>\n\n### 2、PHP7.2.x 新变化\n- #### 2.1 number_format 返回值\n```php\n<?php\nvar_dump(number_format(-0.01)); // now outputs string(1) \"0\" instead of string(2) \"-0\"\n```\n- #### 2.2 get_class()不再允许null。\n```php\n<?php\nvar_dump(get_class(null)); // warning\n```\n- #### 2.3 count 作用在不是 Countable Types 将发生warning\n```php\n<?php\n//PHP7.2\nvar_dump(\n    count(null), // NULL is not countable\n    count(1), // integers are not countable\n    count('abc'), // strings are not countable\n    count(new stdclass), // objects not implementing the Countable interface are not countable\n    count([1,2]) // arrays are countable\n);\n```\n以上例程会输出:\n```\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\n\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\n\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\n\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\nint(0)\nint(1)\nint(1)\nint(1)\nint(2)\n```\n- #### 2.4 不带引号的字符串\n`在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。`\n```php\n<?php\n\nvar_dump(HELLO);\n\n// PHP7.2前输出：HELLO\n\n/*\n * PHP7.2输出\nWarning: Use of undefined constant HELLO - assumed 'HELLO' (this will throw an Error in a future version of PHP) in /usr/src/php/dfe807d9bfa587a80b60fbdda823e7be.php on line 2\nstring(5) \"HELLO\"\n*/\n```\n- #### 2.5  is_object、gettype修正\n\nis_object 作用在**__PHP_Incomplete_Class** 将返回：true\n`Previously, using is_object() on the __PHP_Incomplete_Class class would return FALSE. Now, TRUE will be returned.`\n\ngettype作用在闭包在将正确返回resource\n`Previously, using gettype() on a closed resource would return a string of \"unknown type\". Now, a string of \"resource (closed)\" will be returned.`\n\n### 3、PHP7.2.x 废弃的特性\n- #### 3.1 __autoload 被废弃\n- #### 3.2 each被废弃\n`使用此函数遍历时，比普通的 foreach 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了`\n\n- #### 3.3 gmp_random()函数被废弃\n此函数基于未知的、取决于平台的 limb 尺寸产生随机数。因此，该函数已被废弃。 使用更好的方式产生随机数： GMP 扩展中的[gmp_random_bits()](http://php.net/manual/zh/function.gmp-random-bits.php)  和 [gmp_random_range()](http://php.net/manual/zh/function.gmp-random-range.php)。\n","source":"_posts/php7-update-log.md","raw":"---\ntitle: php7更新记录\ndate: 2018-10-06 \ntags:\ncategories:\n - php\n---\n\n## 一.PHP5.6.x 移植PHP7.0.x\n\n### 1、PHP7.0.x 新特性\n\n- #### 1.1 太空船操作符（组合比较符） (<=>)\n>太空船操作符用于比较两个表达式，当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。<font color='red'>对象不能进行比较</font>。\n\n```php\n<?php\n// 整数\necho 1 <=> 1; // 0\necho 1 <=> 2; // -1\necho 2 <=> 1; // 1\n\n// 浮点数\necho 1.5 <=> 1.5; // 0\necho 1.5 <=> 2.5; // -1\necho 2.5 <=> 1.5; // 1\n \n// 字符串\necho \"a\" <=> \"a\"; // 0\necho \"a\" <=> \"b\"; // -1\necho \"b\" <=> \"a\"; // 1\n?>\n\n```\n<!--more-->\n- #### 1.2 null合并运算符\n>由于日常使用中存在大量同时使用三元表达式和 isset()的情况， 我们添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。\n\n```php\n<?php\n# php7以前\n$a = isset($_GET['a']) ? $_GET['a'] : 'none';\n\n#PHP 7\n$a = isset($_GET['a']) ?? 'none';\n\n```\n\n- #### 1.3 变量类型声明\n> 变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数int、string、float、bool\n\n**非严格模式**\n```php\n<?php\n\nfunction sumOfInts(int ...$ints)\n{\n    return array_sum($ints);\n}\nvar_dump(sumOfInts(2, '3', 4.1)); // int(9)\n\n```\n**严格模式**\n\n```php\n<?php\n# 严格模式\ndeclare(strict_types=1);\n\nfunction add(int $x, int $y)\n{\n    return $x + $y;\n}\nvar_dump(add('2', 3)); \n// Fatal error: Argument 1 passed to add() must be of the type integer\n\n```\n>要使用严格模式，<font color='red'>一个declare声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。</font> 这个指令不仅影响参数的类型声明，也影响到函数的返回值声明\n\n\n- #### 1.4 返回值类型声明\n\n>增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可\n```php\n<?php\nfunction fun(int $a): array\n{\n  return $a;\n}\nfun(3);//Fatal error\n\n```\n\n- #### 1.5 匿名类\n>php7允许new class {} 创建一个匿名的对象。\n```php\n<?php\n//php7以前\nclass Logger\n{\n    public function log($msg)\n    {\n        echo $msg;\n    }\n}\n\n$util->setLogger(new Logger());\n\n// php7+\n$util->setLogger(new class {\n    public function log($msg)\n    {\n        echo $msg;\n    }\n});\n\n```\n- #### 1.6 Unicode codepoint 转译语法\n>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的\n\n```php\n<?php\necho \"\\u{aa}\";// ª\necho \"\\u{0000aa}\";// ª\necho \"\\u{9999}\";// 香\n```\n\n- ####  1.7 Closure::call\n> 闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。\n```php\n<?php\nclass A {private $x = 1;}\n\n// PHP 7 之前版本的代码\n$getXCB = function() {return $this->x;};\n$getX = $getXCB->bindTo(new A, 'A'); // 中间层闭包\necho $getX();\n\n// PHP 7+ 及更高版本的代码\n$getX = function() {return $this->x;};\necho $getX->call(new A);\n```\n- #### 1.8 带过滤的unserialize\n\n> 提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入\n```php\n<?php\n// 将所有的对象都转换为 __PHP_Incomplete_Class 对象\n$data = unserialize($foo, [\"allowed_classes\" => false]);\n\n// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象\n$data = unserialize($foo, [\"allowed_classes\" => [\"MyClass\", \"MyClass2\"]);\n\n// 默认情况下所有的类都是可接受的，等同于省略第二个参数\n$data = unserialize($foo, [\"allowed_classes\" => true]);\n\n```\n\n- #### 1.9 IntlChar类\n>新增加的 [IntlChar](http://php.net/manual/zh/class.intlchar.php) 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。\n\n```php\n<?php\nprintf('%x', IntlChar::CODEPOINT_MAX);//10ffff\necho IntlChar::charName('@');//COMMERCIAL AT\nvar_dump(IntlChar::ispunct('!'));//bool(true)\n```\n> 若要使用此类，请先安装Intl扩展\n\n- #### 1.10 预期\n> 预期是向后兼用并增强之前的 [assert()](http://php.net/manual/zh/function.assert.php) 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。\n\n```php\n<?php\nini_set('assert.exception', 1);\n\nclass CustomError extends AssertionError {}\n\nassert(false, new CustomError('Some error message'));\n\n//输出：Fatal error: Uncaught CustomError: Some error message\n?>\n```\n\n- #### 1.11 命名空间按组导入\n>从同一个命名空间下导入的类、函数、常量支持按组一次导入\n\n```php\n<?php\n//php7以前\nuse app\\model\\A;\nuse app\\model\\B;\n\n//php7+\nuse app\\model{A,B}\n```\n\n- #### 1.12 生成器支持返回表达式\n> 此特性基于 PHP 5.5 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。\n\n```php\n<?php\n\n$gen = (function() {\n    yield 1;\n    yield 2;\n\n    return 3;\n})();\n\nforeach ($gen as $val) {\n    echo $val, PHP_EOL;\n}\n\necho $gen->getReturn(), PHP_EOL;\n\n//输出\n/**\n  1\n  2\n  3\n*/\n```\n- #### 1.13 生成器委派\n>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。\n```php\n<?php\n\nfunction gen()\n{\n    yield 1;\n    yield 2;\n\n    yield from gen2();\n}\n\nfunction gen2()\n{\n    yield 3;\n    yield 4;\n}\n\nforeach (gen() as $val)\n{\n    echo $val, PHP_EOL;\n}\n\n//输出\n// 1\n// 2\n// 3\n// 4\n?>\n```\n\n- #### 1.14 整数除法函数intdiv\n```php\n<?php\nvar_dump(intdiv(10,3)); //3\n```\n- #### 1.15 会话选项设置\n> session_start() 可以加入一个数组覆盖php.ini的配置\n\n```php\n<?php\nsession_start([\n    'cache_limiter' => 'private',\n    'read_and_close' => true,\n]);\n\n```\n- #### 1.16 preg_replace_callback_array\n> 在 PHP7 之前，当使用 [preg_replace_callback()](http://php.net/manual/zh/function.preg-replace-callback.php) 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 [preg_replace_callback_array()](http://php.net/manual/zh/function.preg-replace-callback-array.php) 函数， 可以使得代码更加简洁。\n\n```php\n<?php\n//string preg_replace_callback_array(array $regexesAndCallbacks, string $input);\n$tokenStream = []; // [tokenName, lexeme] pairs\n\n$input = <<<'end'\n$a = 3; // variable initialisation\nend;\n\n// Pre PHP 7 code\npreg_replace_callback(\n    [\n        '~\\$[a-z_][a-z\\d_]*~i',\n        '~=~',\n        '~[\\d]+~',\n        '~;~',\n        '~//.*~'\n    ],\n    function ($match) use (&$tokenStream) {\n        if (strpos($match[0], '$') === 0) {\n            $tokenStream[] = ['T_VARIABLE', $match[0]];\n        } elseif (strpos($match[0], '=') === 0) {\n            $tokenStream[] = ['T_ASSIGN', $match[0]];\n        } elseif (ctype_digit($match[0])) {\n            $tokenStream[] = ['T_NUM', $match[0]];\n        } elseif (strpos($match[0], ';') === 0) {\n            $tokenStream[] = ['T_TERMINATE_STMT', $match[0]];\n        } elseif (strpos($match[0], '//') === 0) {\n            $tokenStream[] = ['T_COMMENT', $match[0]];\n        }\n    },\n    $input\n);\n\n// PHP 7+ code\npreg_replace_callback_array(\n    [\n        '~\\$[a-z_][a-z\\d_]*~i' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_VARIABLE', $match[0]];\n        },\n        '~=~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_ASSIGN', $match[0]];\n        },\n        '~[\\d]+~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_NUM', $match[0]];\n        },\n        '~;~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_TERMINATE_STMT', $match[0]];\n        },\n        '~//.*~' => function ($match) use (&$tokenStream) {\n            $tokenStream[] = ['T_COMMENT', $match[0]];\n        }\n    ],\n    $input\n);\n```\n- #### 1.17 随机数、随机字符函数\n> 新加入两个跨平台的函数： [random_bytes(http://php.net/manual/zh/function.random-bytes.php)]() 和 [random_int()](http://php.net/manual/zh/function.random-int.php) 用来产生高安全级别的随机字符串和随机整数。\n\n```php\n<?php\n$bytes = random_bytes(5);\nvar_dump(bin2hex($bytes));//string(10) \"385e33f741\"\n\nvar_dump(random_int(100, 999));//int(248)\nvar_dump(random_int(-1000, 0));//int(-898)\n\n```\n- #### 1.18 define 支持定义数组\n```php\n<?php\ndefine('ALLOWED_IMAGE_EXTENSIONS', ['jpg', 'jpeg', 'gif', 'png']);\n```\n[查看所有新特性详情](http://php.net/manual/zh/migration70.new-features.php)\n\n### 2、PHP7.0.x 新变化\n- #### 2.1 错误和异常处理相关的变更\n> 在PHP7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。 这些异常继承自 Error 类，此类实现了 Throwable 接口 （所有异常都实现了这个基础接口）。\n\n\n`这也意味着，当发生错误的时候，以前代码中的一些错误处理的代码将无法被触发。 因为在 PHP7 版本中，已经使用抛出异常的错误处理机制了。（如果代码中没有捕获 Error 异常，那么会引发致命错误）`\n\n**set_exception_handler() 不再保证收到的一定是 Exception 对象**\n\n_抛出Error对象时，如果set_exception_handler()里的异常处理代码声明了类型 Exception ，将会导致fatal error。\n想要异常处理器同时支持PHP5和PHP7，应该删掉异常处理器里的类型声明。如果代码仅仅是升级到PHP7，则可以把类型 Exception替换成Throwable_\n```php\n<?php\n// PHP 5 时代的代码将会出现问题\nfunction handler(Exception $e) { ... }\nset_exception_handler('handler');\n\n// 兼容 PHP 5 和 7\nfunction handler($e) { ... }\n\n// 仅支持 PHP 7\nfunction handler(Throwable $e) { ... }\n?>\n```\n\n\n\n- #### 2.2 list() 会按照原来的顺序进行赋值。不再是逆序了\n```php\nlist($a,$b,$c) = [1,2,3];\n//PHP5\nvar_dump($a);//3\nvar_dump($b);//2\nvar_dump($c);//1\n\n\n//PHP7+\nvar_dump($a);//1\nvar_dump($b);//2\nvar_dump($c);//3\n\n```\n**空的list()赋值支持已经被移除**\nlist() 结构现在不再能是空的。如下的例子不再被允许：\n```php\n<?php\nlist() = $a;\nlist(,,) = $a;\nlist($x, list(), $y) = $a;\n```\n- #### 2.3 foreach不再改变内部数组指针\n> 在PHP7之前，当数组通过 foreach 迭代时，数组指针会移动。现在开始，不再如此，见下面代码\n\n```php\n<?php\n$array = [0, 1, 2];\nforeach ($array as &$val) {\n    var_dump(current($array));\n}\n\n//PHP5 输出\nint(1);\nint(2);\nbool(false);\n\n//PHP7+ 输出\nint(0);\nint(0);\nint(0);\n```\n\n- #### 2.4 十六进制字符串不再被认为是数字\n> 含十六进制字符串不再被认为是数字\n```php\n<?php\nvar_dump(is_numeric(\"0x123\"));\n\n//PHP5 输出\nbool(true);\n\n//PHP7+ 输出\nbool(false);\n\n```\n[查看所有变化详情](http://php.net/manual/zh/migration70.incompatible.php)\n\n\n### 3、PHP7.0.x 废弃的特性\n\n- #### 3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\n\n> PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 E_DEPRECATED 警告。 如果还定义了 __construct() 方法则不受影响。\n\n```php\n<?php\nclass foo {\n    function foo() {\n        echo 'I am the constructor';\n    }\n}\n\n```\n以上例程会输出：\n> Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3\n\n\n- #### 3.2 静态调用非静态的方法\n>废弃了 静态（Static） 调用未声明成 static 的方法，未来可能会彻底移除该功能。\n```php\n<?php\nclass foo {\n    function bar() {\n        echo 'I am not static!';\n    }\n}\n\nfoo::bar();\n```\n以上例程会输出：\n> Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static!\n\n[查看更多PHP7.0.x 弃用的功能](http://php.net/manual/zh/migration70.deprecated.php)\n\n### 4、PHP7.0.x 移除的扩展和 SAPI\n\n- #### 4.1 移除的扩展\n  - ereg\n  - mssql\n  - mysql\n  - sybase_ct\n\n- #### 4.2 移除的 SAPI\n  - aolserver\n  - apache\n  - apache_hooks\n  - apache2filter\n  - caudium\n  - continuity\n  - isapi\n  - milter\n  - nsapi\n  - phttpd\n  - pi3web\n  - roxen\n  - thttpd\n  - tux\n  - webjames\n\n\n## 二.PHP7.0.x 移植PHP7.1.x\n\n ### 1、PHP7.1.x 新特性\n- #### 1.1 可为空(Nullables)类型\n>参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。 当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是null 。\n\n```php\n<?php\nfunction test(?string $name)\n{\n    var_dump($name);\n}\n\ntest('elePHPant');\ntest(null);\ntest();\n```\n输出结果\n```\nstring(10) \"elePHPant\"\n\nNULL\n\nUncaught Error: Too few arguments to function test(), 0 passed in...\n\n```\n\n- #### 1.2 Void 函数\n>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，NULL 不是一个合法的返回值\n\n```php\n<?php\nfunction swap(&$left, &$right) : void\n{\n    if ($left === $right) {\n        return;\n    }\n\n    $tmp = $left;\n    $left = $right;\n    $right = $tmp;\n}\n\n$a = 1;\n$b = 2;\nvar_dump(swap($a, $b), $a, $b);\n\n```\n输出结果\n``` \nnull\nint(2)\nint(1)\n```\n>试图去获取一个 void 方法的返回值会得到 NULL ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。\n\n- #### 1.3 类常量可见性\n> 现在起支持设置类常量的可见性(public、protected、private)。\n\n```php\n<?php\nclass ConstDemo\n{\n    const PUBLIC_CONST_A = 1;\n    public const PUBLIC_CONST_B = 2;\n    protected const PROTECTED_CONST = 3;\n    private const PRIVATE_CONST = 4;\n}\n```\n- #### 1.4 短数组语法（[]）\n>短数组语法（[]）现在作为list()语法的一个备选项，可以用于将数组的值赋给一些变量（包括在foreach中）。\n```php\n<?php\n$data = [\n    [1, 'Tom'],\n    [2, 'Fred'],\n];\n\n// list() style\nlist($id1, $name1) = $data[0];\n\n// [] style\n[$id1, $name1] = $data[0];\n\n// list() style\nforeach ($data as list($id, $name)) {\n    // logic here with $id and $name\n}\n\n// [] style\nforeach ($data as [$id, $name]) {\n    // logic here with $id and $name\n}\n```\n- #### 1.5 iterable伪类\n>现在引入了一个新的被称为iterable的伪类 (与[callable](http://php.net/manual/zh/language.types.callable.php)类似)。 这可以被用在参数或者返回值类型中，它代表接受数组或者实现了Traversable接口的对象。 至于子类，当用作参数时，子类可以收紧父类的iterable类型到array 或一个实现了Traversable的对象。对于返回值，子类可以拓宽父类的 array或对象返回值类型到iterable。\n\n```php\n<?php\nfunction iterator(iterable $iter)\n{\n    foreach ($iter as $val) {\n        //\n    }\n}\n```\n\n- #### 1.6 多异常捕获处理\n> 一个catch语句块现在可以通过管道字符(|)来实现多个异常的捕获。 这对于需要同时处理来自不同类的不同异常时很有用。\n\n```php\n<?php\ntry {\n    // some code\n} catch (FirstException | SecondException $e) {\n    // handle first and second exceptions\n}\n\n```\n- #### 1.7 list支持键名\n> 现在list()和它的新的[]语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）\n\n```php\n<?php\n$data = [\n    [\"id\" => 1, \"name\" => 'Tom'],\n    [\"id\" => 2, \"name\" => 'Fred'],\n];\n\n// list() style\nlist(\"id\" => $id1, \"name\" => $name1) = $data[0];\n\n// [] style\n[\"id\" => $id1, \"name\" => $name1] = $data[0];\n\n// list() style\nforeach ($data as list(\"id\" => $id, \"name\" => $name)) {\n    // logic here with $id and $name\n}\n\n// [] style\nforeach ($data as [\"id\" => $id, \"name\" => $name]) {\n    // logic here with $id and $name\n}\n```\n\n- #### 1.8 支持为负的字符串偏移量\n>现在所有支持偏移量的[字符串操作函数](http://php.net/manual/zh/book.strings.php) 都支持接受负数作为偏移量，包括通过[]或{}操作字符串下标。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。\n\n```php\n<?php\nvar_dump(\"abcdef\"[-2]);//string (1) \"e\"\nvar_dump(strpos(\"aabbcc\", \"b\", -3));//int(3)\n\n$string = 'bar';\necho \"The last character of '$string' is '$string[-1]'.\\n\";\n\n//输出: The last character of 'bar' is 'r'.\n```\n\n- #### 1.9 将callables转为闭包\n> [Closure](http://php.net/manual/zh/class.closure.php)新增了一个静态方法fromCallable()，用于将callable快速地 转为一个Closure 对象。\n```php\n<?php\nclass Test\n{\n    public function exposeFunction()\n    {\n        return Closure::fromCallable([$this, 'privateFunction']);\n    }\n\n    private function privateFunction($param)\n    {\n        var_dump($param);\n    }\n}\n\n$privFunc = (new Test)->exposeFunction();\n$privFunc('some value');\n\n//输出:string(10) \"some value\"\n\n```\n\n- #### 1.10 http2服务推送\n>对服务器推送的支持现在已经被加入到CURL扩展中（ 需要版本 7.46 或更高）。这个可以通过[curl_multi_setopt()](http://php.net/manual/zh/function.curl-multi-setopt.php)函数与新的常量 **CURLMOPT_PUSHFUNCTION** 来进行调节。常量 **CURL_PUST_OK** 和 **CURL_PUSH_DENY** 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。\n\n### 2、PHP7.1.x 新变化\n- #### 2.1 传递参数过少时将抛出错误\n>过去我们传递参数过少会产生warning。php7.1开始会抛出error\n\n\n### 3、PHP 7.1.x 中废弃的特性\n- #### 3.1 移除了ext/mcrypt拓展\n> mcrypt 扩展已经过时了大约10年，并且用起来很复杂。因此它被废弃并且被 OpenSSL 所取代。 从PHP7.2起它将被从核心代码中移除并且移到PECL中。\n\n\n## 三.PHP7.1.x 移植PHP7.2.x\n\n ### 1、PHP7.2.x 新特性\n \n- #### 1.1 增加新的类型object\n `这种新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。`\n ```php\n<?php\n\nfunction test(object $obj) : object\n{\n    return new SplQueue();\n}\ntest(new StdClass());\n```\n- #### 1.2 通过名称加载扩展\n<font size=\"2\">扩展文件不再需要通过文件加载 (Unix下以.so为文件扩展名，在Windows下以 .dll 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用 [dl()](http://php.net/manual/zh/function.dl.php) 函数进行启用。</font>\n``` \n; ini file\nextension=php-ast\nzend_extension=opcache\n```\n\n- #### 1.3 允许重写抽象方法\n`当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法`\n```php\n<?php\nabstract class A\n{\n    abstract function test(string $s);\n}\nabstract class B extends A\n{\n    // overridden - still maintaining contravariance for parameters and covariance for return\n    abstract function test($s) : int;\n}\n```\n- #### 1.4 使用Argon2算法生成密码散列\n<font size=\"2\">Argon2 已经被加入到密码散列（password hashing） API ([这些函数以 password_ 开头](http://php.net/manual/zh/book.password.php)) 以下是暴露出来的常量:`</front>\n- PASSWORD_ARGON2I\n- PASSWORD_ARGON2_DEFAULT_MEMORY_COST\n- PASSWORD_ARGON2_DEFAULT_TIME_COST\n- PASSWORD_ARGON2_DEFAULT_THREADS\n- #### 1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶\n`当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：`\n\n- PDO::PARAM_STR_NATL\n- PDO::PARAM_STR_CHAR\n- PDO::ATTR_DEFAULT_STR_PARAM\n\n这些常量通过PDO::PARAM_STR利用位运算OR进行计算：\n```php\n<?php\n$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);\n```\n- #### 1.5 允许分组命名空间的尾部逗号\n<font size=\"2\">命名空间可以在PHP7.2中使用尾随逗号进行分组引入。</font>\n```php\n<?php\n\nuse Foo\\Bar\\{\n    Foo,\n    Bar,\n    Baz,\n};\n```\n> <front color=\"red\">在php7.0中 最后一个(Baz,)不能有逗号否则报错</front>\n\n### 2、PHP7.2.x 新变化\n- #### 2.1 number_format 返回值\n```php\n<?php\nvar_dump(number_format(-0.01)); // now outputs string(1) \"0\" instead of string(2) \"-0\"\n```\n- #### 2.2 get_class()不再允许null。\n```php\n<?php\nvar_dump(get_class(null)); // warning\n```\n- #### 2.3 count 作用在不是 Countable Types 将发生warning\n```php\n<?php\n//PHP7.2\nvar_dump(\n    count(null), // NULL is not countable\n    count(1), // integers are not countable\n    count('abc'), // strings are not countable\n    count(new stdclass), // objects not implementing the Countable interface are not countable\n    count([1,2]) // arrays are countable\n);\n```\n以上例程会输出:\n```\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\n\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\n\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\n\nWarning: count(): Parameter must be an array or an object that implements Countable in %s on line %d\nint(0)\nint(1)\nint(1)\nint(1)\nint(2)\n```\n- #### 2.4 不带引号的字符串\n`在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。`\n```php\n<?php\n\nvar_dump(HELLO);\n\n// PHP7.2前输出：HELLO\n\n/*\n * PHP7.2输出\nWarning: Use of undefined constant HELLO - assumed 'HELLO' (this will throw an Error in a future version of PHP) in /usr/src/php/dfe807d9bfa587a80b60fbdda823e7be.php on line 2\nstring(5) \"HELLO\"\n*/\n```\n- #### 2.5  is_object、gettype修正\n\nis_object 作用在**__PHP_Incomplete_Class** 将返回：true\n`Previously, using is_object() on the __PHP_Incomplete_Class class would return FALSE. Now, TRUE will be returned.`\n\ngettype作用在闭包在将正确返回resource\n`Previously, using gettype() on a closed resource would return a string of \"unknown type\". Now, a string of \"resource (closed)\" will be returned.`\n\n### 3、PHP7.2.x 废弃的特性\n- #### 3.1 __autoload 被废弃\n- #### 3.2 each被废弃\n`使用此函数遍历时，比普通的 foreach 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了`\n\n- #### 3.3 gmp_random()函数被废弃\n此函数基于未知的、取决于平台的 limb 尺寸产生随机数。因此，该函数已被废弃。 使用更好的方式产生随机数： GMP 扩展中的[gmp_random_bits()](http://php.net/manual/zh/function.gmp-random-bits.php)  和 [gmp_random_range()](http://php.net/manual/zh/function.gmp-random-range.php)。\n","slug":"php7-update-log","published":1,"updated":"2019-03-25T07:43:34.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987mu00280641lfdgmg9j","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"一-PHP5-6-x-移植PHP7-0-x\"><a href=\"#一-PHP5-6-x-移植PHP7-0-x\" class=\"headerlink\" title=\"一.PHP5.6.x 移植PHP7.0.x\"></a>一.PHP5.6.x 移植PHP7.0.x</h2><h3 id=\"1、PHP7-0-x-新特性\"><a href=\"#1、PHP7-0-x-新特性\" class=\"headerlink\" title=\"1、PHP7.0.x 新特性\"></a>1、PHP7.0.x 新特性</h3><ul>\n<li><h4 id=\"1-1-太空船操作符（组合比较符）-lt-gt\"><a href=\"#1-1-太空船操作符（组合比较符）-lt-gt\" class=\"headerlink\" title=\"1.1 太空船操作符（组合比较符） (&lt;=&gt;)\"></a>1.1 太空船操作符（组合比较符） (&lt;=&gt;)</h4><blockquote>\n<p>太空船操作符用于比较两个表达式，当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。<font color=\"red\">对象不能进行比较</font>。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 整数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1</span> &lt;=&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1</span> &lt;=&gt; <span class=\"number\">2</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">2</span> &lt;=&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1.5</span> &lt;=&gt; <span class=\"number\">1.5</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1.5</span> &lt;=&gt; <span class=\"number\">2.5</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">2.5</span> &lt;=&gt; <span class=\"number\">1.5</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"a\"</span> &lt;=&gt; <span class=\"string\">\"a\"</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"a\"</span> &lt;=&gt; <span class=\"string\">\"b\"</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"b\"</span> &lt;=&gt; <span class=\"string\">\"a\"</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><h4 id=\"1-2-null合并运算符\"><a href=\"#1-2-null合并运算符\" class=\"headerlink\" title=\"1.2 null合并运算符\"></a>1.2 null合并运算符</h4><blockquote>\n<p>由于日常使用中存在大量同时使用三元表达式和 isset()的情况， 我们添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\"># php7以前</span></span><br><span class=\"line\">$a = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'a'</span>]) ? $_GET[<span class=\"string\">'a'</span>] : <span class=\"string\">'none'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#PHP 7</span></span><br><span class=\"line\">$a = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'a'</span>]) ?? <span class=\"string\">'none'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-3-变量类型声明\"><a href=\"#1-3-变量类型声明\" class=\"headerlink\" title=\"1.3 变量类型声明\"></a>1.3 变量类型声明</h4><blockquote>\n<p>变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数int、string、float、bool</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>非严格模式</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumOfInts</span><span class=\"params\">(int ...$ints)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_sum($ints);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(sumOfInts(<span class=\"number\">2</span>, <span class=\"string\">'3'</span>, <span class=\"number\">4.1</span>)); <span class=\"comment\">// int(9)</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>严格模式</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\"># 严格模式</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(strict_types=<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(int $x, int $y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $x + $y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(add(<span class=\"string\">'2'</span>, <span class=\"number\">3</span>)); </span><br><span class=\"line\"><span class=\"comment\">// Fatal error: Argument 1 passed to add() must be of the type integer</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>要使用严格模式，<font color=\"red\">一个declare声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。</font> 这个指令不仅影响参数的类型声明，也影响到函数的返回值声明</p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-4-返回值类型声明\"><a href=\"#1-4-返回值类型声明\" class=\"headerlink\" title=\"1.4 返回值类型声明\"></a>1.4 返回值类型声明</h4></li>\n</ul>\n<blockquote>\n<p>增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span><span class=\"params\">(int $a)</span>: <span class=\"title\">array</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">3</span>);<span class=\"comment\">//Fatal error</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-5-匿名类\"><a href=\"#1-5-匿名类\" class=\"headerlink\" title=\"1.5 匿名类\"></a>1.5 匿名类</h4><blockquote>\n<p>php7允许new class {} 创建一个匿名的对象。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//php7以前</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">($msg)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$util-&gt;setLogger(<span class=\"keyword\">new</span> Logger());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// php7+</span></span><br><span class=\"line\">$util-&gt;setLogger(<span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">($msg)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-6-Unicode-codepoint-转译语法\"><a href=\"#1-6-Unicode-codepoint-转译语法\" class=\"headerlink\" title=\"1.6 Unicode codepoint 转译语法\"></a>1.6 Unicode codepoint 转译语法</h4><blockquote>\n<p>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\u&#123;aa&#125;\"</span>;<span class=\"comment\">// ª</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\u&#123;0000aa&#125;\"</span>;<span class=\"comment\">// ª</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\u&#123;9999&#125;\"</span>;<span class=\"comment\">// 香</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-7-Closure-call\"><a href=\"#1-7-Closure-call\" class=\"headerlink\" title=\"1.7 Closure::call\"></a>1.7 Closure::call</h4><blockquote>\n<p>闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;<span class=\"keyword\">private</span> $x = <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP 7 之前版本的代码</span></span><br><span class=\"line\">$getXCB = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;x;&#125;;</span><br><span class=\"line\">$getX = $getXCB-&gt;bindTo(<span class=\"keyword\">new</span> A, <span class=\"string\">'A'</span>); <span class=\"comment\">// 中间层闭包</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $getX();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP 7+ 及更高版本的代码</span></span><br><span class=\"line\">$getX = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;x;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $getX-&gt;call(<span class=\"keyword\">new</span> A);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-8-带过滤的unserialize\"><a href=\"#1-8-带过滤的unserialize\" class=\"headerlink\" title=\"1.8 带过滤的unserialize\"></a>1.8 带过滤的unserialize</h4></li>\n</ul>\n<blockquote>\n<p>提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 将所有的对象都转换为 __PHP_Incomplete_Class 对象</span></span><br><span class=\"line\">$data = unserialize($foo, [<span class=\"string\">\"allowed_classes\"</span> =&gt; <span class=\"keyword\">false</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象</span></span><br><span class=\"line\">$data = unserialize($foo, [<span class=\"string\">\"allowed_classes\"</span> =&gt; [<span class=\"string\">\"MyClass\"</span>, <span class=\"string\">\"MyClass2\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认情况下所有的类都是可接受的，等同于省略第二个参数</span></span><br><span class=\"line\">$data = unserialize($foo, [<span class=\"string\">\"allowed_classes\"</span> =&gt; <span class=\"keyword\">true</span>]);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-9-IntlChar类\"><a href=\"#1-9-IntlChar类\" class=\"headerlink\" title=\"1.9 IntlChar类\"></a>1.9 IntlChar类</h4><blockquote>\n<p>新增加的 <a href=\"http://php.net/manual/zh/class.intlchar.php\" target=\"_blank\" rel=\"noopener\">IntlChar</a> 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">printf(<span class=\"string\">'%x'</span>, IntlChar::CODEPOINT_MAX);<span class=\"comment\">//10ffff</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> IntlChar::charName(<span class=\"string\">'@'</span>);<span class=\"comment\">//COMMERCIAL AT</span></span><br><span class=\"line\">var_dump(IntlChar::ispunct(<span class=\"string\">'!'</span>));<span class=\"comment\">//bool(true)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若要使用此类，请先安装Intl扩展</p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-10-预期\"><a href=\"#1-10-预期\" class=\"headerlink\" title=\"1.10 预期\"></a>1.10 预期</h4><blockquote>\n<p>预期是向后兼用并增强之前的 <a href=\"http://php.net/manual/zh/function.assert.php\" target=\"_blank\" rel=\"noopener\">assert()</a> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">ini_set(<span class=\"string\">'assert.exception'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomError</span> <span class=\"keyword\">extends</span> <span class=\"title\">AssertionError</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">assert(<span class=\"keyword\">false</span>, <span class=\"keyword\">new</span> CustomError(<span class=\"string\">'Some error message'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：Fatal error: Uncaught CustomError: Some error message</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-11-命名空间按组导入\"><a href=\"#1-11-命名空间按组导入\" class=\"headerlink\" title=\"1.11 命名空间按组导入\"></a>1.11 命名空间按组导入</h4><blockquote>\n<p>从同一个命名空间下导入的类、函数、常量支持按组一次导入</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//php7以前</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">model</span>\\<span class=\"title\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">model</span>\\<span class=\"title\">B</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//php7+</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">model</span>&#123;<span class=\"title\">A</span>,<span class=\"title\">B</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-12-生成器支持返回表达式\"><a href=\"#1-12-生成器支持返回表达式\" class=\"headerlink\" title=\"1.12 生成器支持返回表达式\"></a>1.12 生成器支持返回表达式</h4><blockquote>\n<p>此特性基于 PHP 5.5 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$gen = (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($gen <span class=\"keyword\">as</span> $val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $val, PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $gen-&gt;getReturn(), PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  1</span></span><br><span class=\"line\"><span class=\"comment\">  2</span></span><br><span class=\"line\"><span class=\"comment\">  3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-13-生成器委派\"><a href=\"#1-13-生成器委派\" class=\"headerlink\" title=\"1.13 生成器委派\"></a>1.13 生成器委派</h4><blockquote>\n<p>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> from gen2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (gen() <span class=\"keyword\">as</span> $val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $val, PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-14-整数除法函数intdiv\"><a href=\"#1-14-整数除法函数intdiv\" class=\"headerlink\" title=\"1.14 整数除法函数intdiv\"></a>1.14 整数除法函数intdiv</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(intdiv(<span class=\"number\">10</span>,<span class=\"number\">3</span>)); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-15-会话选项设置\"><a href=\"#1-15-会话选项设置\" class=\"headerlink\" title=\"1.15 会话选项设置\"></a>1.15 会话选项设置</h4><blockquote>\n<p>session_start() 可以加入一个数组覆盖php.ini的配置</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">session_start([</span><br><span class=\"line\">    <span class=\"string\">'cache_limiter'</span> =&gt; <span class=\"string\">'private'</span>,</span><br><span class=\"line\">    <span class=\"string\">'read_and_close'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-16-preg-replace-callback-array\"><a href=\"#1-16-preg-replace-callback-array\" class=\"headerlink\" title=\"1.16 preg_replace_callback_array\"></a>1.16 preg_replace_callback_array</h4><blockquote>\n<p>在 PHP7 之前，当使用 <a href=\"http://php.net/manual/zh/function.preg-replace-callback.php\" target=\"_blank\" rel=\"noopener\">preg_replace_callback()</a> 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 <a href=\"http://php.net/manual/zh/function.preg-replace-callback-array.php\" target=\"_blank\" rel=\"noopener\">preg_replace_callback_array()</a> 函数， 可以使得代码更加简洁。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//string preg_replace_callback_array(array $regexesAndCallbacks, string $input);</span></span><br><span class=\"line\">$tokenStream = []; <span class=\"comment\">// [tokenName, lexeme] pairs</span></span><br><span class=\"line\"></span><br><span class=\"line\">$input = <span class=\"string\">&lt;&lt;&lt;'end'</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">$a</span> = 3; // variable initialisation</span></span><br><span class=\"line\"><span class=\"string\">end;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pre PHP 7 code</span></span><br><span class=\"line\">preg_replace_callback(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">'~\\$[a-z_][a-z\\d_]*~i'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~=~'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~[\\d]+~'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~;~'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~//.*~'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">'$'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_VARIABLE'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">'='</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_ASSIGN'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (ctype_digit($match[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_NUM'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">';'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_TERMINATE_STMT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">'//'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_COMMENT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    $input</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP 7+ code</span></span><br><span class=\"line\">preg_replace_callback_array(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">'~\\$[a-z_][a-z\\d_]*~i'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_VARIABLE'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~=~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_ASSIGN'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~[\\d]+~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_NUM'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~;~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_TERMINATE_STMT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~//.*~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_COMMENT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    $input</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-17-随机数、随机字符函数\"><a href=\"#1-17-随机数、随机字符函数\" class=\"headerlink\" title=\"1.17 随机数、随机字符函数\"></a>1.17 随机数、随机字符函数</h4><blockquote>\n<p>新加入两个跨平台的函数： <a href=\"\">random_bytes(http://php.net/manual/zh/function.random-bytes.php)</a> 和 <a href=\"http://php.net/manual/zh/function.random-int.php\" target=\"_blank\" rel=\"noopener\">random_int()</a> 用来产生高安全级别的随机字符串和随机整数。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$bytes = random_bytes(<span class=\"number\">5</span>);</span><br><span class=\"line\">var_dump(bin2hex($bytes));<span class=\"comment\">//string(10) \"385e33f741\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(random_int(<span class=\"number\">100</span>, <span class=\"number\">999</span>));<span class=\"comment\">//int(248)</span></span><br><span class=\"line\">var_dump(random_int(<span class=\"number\">-1000</span>, <span class=\"number\">0</span>));<span class=\"comment\">//int(-898)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-18-define-支持定义数组\"><a href=\"#1-18-define-支持定义数组\" class=\"headerlink\" title=\"1.18 define 支持定义数组\"></a>1.18 define 支持定义数组</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">define(<span class=\"string\">'ALLOWED_IMAGE_EXTENSIONS'</span>, [<span class=\"string\">'jpg'</span>, <span class=\"string\">'jpeg'</span>, <span class=\"string\">'gif'</span>, <span class=\"string\">'png'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"http://php.net/manual/zh/migration70.new-features.php\" target=\"_blank\" rel=\"noopener\">查看所有新特性详情</a></p>\n<h3 id=\"2、PHP7-0-x-新变化\"><a href=\"#2、PHP7-0-x-新变化\" class=\"headerlink\" title=\"2、PHP7.0.x 新变化\"></a>2、PHP7.0.x 新变化</h3><ul>\n<li><h4 id=\"2-1-错误和异常处理相关的变更\"><a href=\"#2-1-错误和异常处理相关的变更\" class=\"headerlink\" title=\"2.1 错误和异常处理相关的变更\"></a>2.1 错误和异常处理相关的变更</h4><blockquote>\n<p>在PHP7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。 这些异常继承自 Error 类，此类实现了 Throwable 接口 （所有异常都实现了这个基础接口）。</p>\n</blockquote>\n</li>\n</ul>\n<p><code>这也意味着，当发生错误的时候，以前代码中的一些错误处理的代码将无法被触发。 因为在 PHP7 版本中，已经使用抛出异常的错误处理机制了。（如果代码中没有捕获 Error 异常，那么会引发致命错误）</code></p>\n<p><strong>set_exception_handler() 不再保证收到的一定是 Exception 对象</strong></p>\n<p>_抛出Error对象时，如果set_exception_handler()里的异常处理代码声明了类型 Exception ，将会导致fatal error。<br>想要异常处理器同时支持PHP5和PHP7，应该删掉异常处理器里的类型声明。如果代码仅仅是升级到PHP7，则可以把类型 Exception替换成Throwable_<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// PHP 5 时代的代码将会出现问题</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">(Exception $e)</span> </span>&#123; ... &#125;</span><br><span class=\"line\">set_exception_handler(<span class=\"string\">'handler'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容 PHP 5 和 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">($e)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仅支持 PHP 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">(Throwable $e)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"2-2-list-会按照原来的顺序进行赋值。不再是逆序了\"><a href=\"#2-2-list-会按照原来的顺序进行赋值。不再是逆序了\" class=\"headerlink\" title=\"2.2 list() 会按照原来的顺序进行赋值。不再是逆序了\"></a>2.2 list() 会按照原来的顺序进行赋值。不再是逆序了</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>($a,$b,$c) = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//PHP5</span></span><br><span class=\"line\">var_dump($a);<span class=\"comment\">//3</span></span><br><span class=\"line\">var_dump($b);<span class=\"comment\">//2</span></span><br><span class=\"line\">var_dump($c);<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP7+</span></span><br><span class=\"line\">var_dump($a);<span class=\"comment\">//1</span></span><br><span class=\"line\">var_dump($b);<span class=\"comment\">//2</span></span><br><span class=\"line\">var_dump($c);<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>空的list()赋值支持已经被移除</strong><br>list() 结构现在不再能是空的。如下的例子不再被允许：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">list</span>() = $a;</span><br><span class=\"line\"><span class=\"keyword\">list</span>(,,) = $a;</span><br><span class=\"line\"><span class=\"keyword\">list</span>($x, <span class=\"keyword\">list</span>(), $y) = $a;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"2-3-foreach不再改变内部数组指针\"><a href=\"#2-3-foreach不再改变内部数组指针\" class=\"headerlink\" title=\"2.3 foreach不再改变内部数组指针\"></a>2.3 foreach不再改变内部数组指针</h4><blockquote>\n<p>在PHP7之前，当数组通过 foreach 迭代时，数组指针会移动。现在开始，不再如此，见下面代码</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($array <span class=\"keyword\">as</span> &amp;$val) &#123;</span><br><span class=\"line\">    var_dump(current($array));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP5 输出</span></span><br><span class=\"line\">int(<span class=\"number\">1</span>);</span><br><span class=\"line\">int(<span class=\"number\">2</span>);</span><br><span class=\"line\">bool(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP7+ 输出</span></span><br><span class=\"line\">int(<span class=\"number\">0</span>);</span><br><span class=\"line\">int(<span class=\"number\">0</span>);</span><br><span class=\"line\">int(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"2-4-十六进制字符串不再被认为是数字\"><a href=\"#2-4-十六进制字符串不再被认为是数字\" class=\"headerlink\" title=\"2.4 十六进制字符串不再被认为是数字\"></a>2.4 十六进制字符串不再被认为是数字</h4><blockquote>\n<p>含十六进制字符串不再被认为是数字</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(is_numeric(<span class=\"string\">\"0x123\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP5 输出</span></span><br><span class=\"line\">bool(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP7+ 输出</span></span><br><span class=\"line\">bool(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"http://php.net/manual/zh/migration70.incompatible.php\" target=\"_blank\" rel=\"noopener\">查看所有变化详情</a></p>\n<h3 id=\"3、PHP7-0-x-废弃的特性\"><a href=\"#3、PHP7-0-x-废弃的特性\" class=\"headerlink\" title=\"3、PHP7.0.x 废弃的特性\"></a>3、PHP7.0.x 废弃的特性</h3><ul>\n<li><h4 id=\"3-1-PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\"><a href=\"#3-1-PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\" class=\"headerlink\" title=\"3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\"></a>3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。</h4></li>\n</ul>\n<blockquote>\n<p>PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 E_DEPRECATED 警告。 如果还定义了 __construct() 方法则不受影响。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'I am the constructor'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<blockquote>\n<p>Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3</p>\n</blockquote>\n<ul>\n<li><h4 id=\"3-2-静态调用非静态的方法\"><a href=\"#3-2-静态调用非静态的方法\" class=\"headerlink\" title=\"3.2 静态调用非静态的方法\"></a>3.2 静态调用非静态的方法</h4><blockquote>\n<p>废弃了 静态（Static） 调用未声明成 static 的方法，未来可能会彻底移除该功能。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'I am not static!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo::bar();</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p>以上例程会输出：</p>\n<blockquote>\n<p>Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static!</p>\n</blockquote>\n<p><a href=\"http://php.net/manual/zh/migration70.deprecated.php\" target=\"_blank\" rel=\"noopener\">查看更多PHP7.0.x 弃用的功能</a></p>\n<h3 id=\"4、PHP7-0-x-移除的扩展和-SAPI\"><a href=\"#4、PHP7-0-x-移除的扩展和-SAPI\" class=\"headerlink\" title=\"4、PHP7.0.x 移除的扩展和 SAPI\"></a>4、PHP7.0.x 移除的扩展和 SAPI</h3><ul>\n<li><h4 id=\"4-1-移除的扩展\"><a href=\"#4-1-移除的扩展\" class=\"headerlink\" title=\"4.1 移除的扩展\"></a>4.1 移除的扩展</h4><ul>\n<li>ereg</li>\n<li>mssql</li>\n<li>mysql</li>\n<li>sybase_ct</li>\n</ul>\n</li>\n<li><h4 id=\"4-2-移除的-SAPI\"><a href=\"#4-2-移除的-SAPI\" class=\"headerlink\" title=\"4.2 移除的 SAPI\"></a>4.2 移除的 SAPI</h4><ul>\n<li>aolserver</li>\n<li>apache</li>\n<li>apache_hooks</li>\n<li>apache2filter</li>\n<li>caudium</li>\n<li>continuity</li>\n<li>isapi</li>\n<li>milter</li>\n<li>nsapi</li>\n<li>phttpd</li>\n<li>pi3web</li>\n<li>roxen</li>\n<li>thttpd</li>\n<li>tux</li>\n<li>webjames</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二-PHP7-0-x-移植PHP7-1-x\"><a href=\"#二-PHP7-0-x-移植PHP7-1-x\" class=\"headerlink\" title=\"二.PHP7.0.x 移植PHP7.1.x\"></a>二.PHP7.0.x 移植PHP7.1.x</h2><h3 id=\"1、PHP7-1-x-新特性\"><a href=\"#1、PHP7-1-x-新特性\" class=\"headerlink\" title=\"1、PHP7.1.x 新特性\"></a>1、PHP7.1.x 新特性</h3><ul>\n<li><h4 id=\"1-1-可为空-Nullables-类型\"><a href=\"#1-1-可为空-Nullables-类型\" class=\"headerlink\" title=\"1.1 可为空(Nullables)类型\"></a>1.1 可为空(Nullables)类型</h4><blockquote>\n<p>参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。 当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是null 。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(?string $name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    var_dump($name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'elePHPant'</span>);</span><br><span class=\"line\">test(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(10) &quot;elePHPant&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">NULL</span><br><span class=\"line\"></span><br><span class=\"line\">Uncaught Error: Too few arguments to function test(), 0 passed in...</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"1-2-Void-函数\"><a href=\"#1-2-Void-函数\" class=\"headerlink\" title=\"1.2 Void 函数\"></a>1.2 Void 函数</h4><blockquote>\n<p>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，NULL 不是一个合法的返回值</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span><span class=\"params\">(&amp;$left, &amp;$right)</span> : <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($left === $right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $tmp = $left;</span><br><span class=\"line\">    $left = $right;</span><br><span class=\"line\">    $right = $tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = <span class=\"number\">1</span>;</span><br><span class=\"line\">$b = <span class=\"number\">2</span>;</span><br><span class=\"line\">var_dump(swap($a, $b), $a, $b);</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">null</span><br><span class=\"line\">int(2)</span><br><span class=\"line\">int(1)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>试图去获取一个 void 方法的返回值会得到 NULL ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。</p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-3-类常量可见性\"><a href=\"#1-3-类常量可见性\" class=\"headerlink\" title=\"1.3 类常量可见性\"></a>1.3 类常量可见性</h4><blockquote>\n<p>现在起支持设置类常量的可见性(public、protected、private)。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> PUBLIC_CONST_A = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> PUBLIC_CONST_B = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> PROTECTED_CONST = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> PRIVATE_CONST = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-4-短数组语法（-）\"><a href=\"#1-4-短数组语法（-）\" class=\"headerlink\" title=\"1.4 短数组语法（[]）\"></a>1.4 短数组语法（[]）</h4><blockquote>\n<p>短数组语法（[]）现在作为list()语法的一个备选项，可以用于将数组的值赋给一些变量（包括在foreach中）。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"string\">'Tom'</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>, <span class=\"string\">'Fred'</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">list</span>($id1, $name1) = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\">[$id1, $name1] = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> <span class=\"keyword\">list</span>($id, $name)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> [$id, $name]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-5-iterable伪类\"><a href=\"#1-5-iterable伪类\" class=\"headerlink\" title=\"1.5 iterable伪类\"></a>1.5 iterable伪类</h4><blockquote>\n<p>现在引入了一个新的被称为iterable的伪类 (与<a href=\"http://php.net/manual/zh/language.types.callable.php\" target=\"_blank\" rel=\"noopener\">callable</a>类似)。 这可以被用在参数或者返回值类型中，它代表接受数组或者实现了Traversable接口的对象。 至于子类，当用作参数时，子类可以收紧父类的iterable类型到array 或一个实现了Traversable的对象。对于返回值，子类可以拓宽父类的 array或对象返回值类型到iterable。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span><span class=\"params\">(iterable $iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($iter <span class=\"keyword\">as</span> $val) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-6-多异常捕获处理\"><a href=\"#1-6-多异常捕获处理\" class=\"headerlink\" title=\"1.6 多异常捕获处理\"></a>1.6 多异常捕获处理</h4><blockquote>\n<p>一个catch语句块现在可以通过管道字符(|)来实现多个异常的捕获。 这对于需要同时处理来自不同类的不同异常时很有用。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (FirstException | SecondException $e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle first and second exceptions</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-7-list支持键名\"><a href=\"#1-7-list支持键名\" class=\"headerlink\" title=\"1.7 list支持键名\"></a>1.7 list支持键名</h4><blockquote>\n<p>现在list()和它的新的[]语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data = [</span><br><span class=\"line\">    [<span class=\"string\">\"id\"</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">\"name\"</span> =&gt; <span class=\"string\">'Tom'</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"id\"</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">\"name\"</span> =&gt; <span class=\"string\">'Fred'</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">list</span>(<span class=\"string\">\"id\"</span> =&gt; $id1, <span class=\"string\">\"name\"</span> =&gt; $name1) = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\">[<span class=\"string\">\"id\"</span> =&gt; $id1, <span class=\"string\">\"name\"</span> =&gt; $name1] = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> <span class=\"keyword\">list</span>(<span class=\"string\">\"id\"</span> =&gt; $id, <span class=\"string\">\"name\"</span> =&gt; $name)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> [<span class=\"string\">\"id\"</span> =&gt; $id, <span class=\"string\">\"name\"</span> =&gt; $name]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-8-支持为负的字符串偏移量\"><a href=\"#1-8-支持为负的字符串偏移量\" class=\"headerlink\" title=\"1.8 支持为负的字符串偏移量\"></a>1.8 支持为负的字符串偏移量</h4><blockquote>\n<p>现在所有支持偏移量的<a href=\"http://php.net/manual/zh/book.strings.php\" target=\"_blank\" rel=\"noopener\">字符串操作函数</a> 都支持接受负数作为偏移量，包括通过[]或{}操作字符串下标。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(<span class=\"string\">\"abcdef\"</span>[<span class=\"number\">-2</span>]);<span class=\"comment\">//string (1) \"e\"</span></span><br><span class=\"line\">var_dump(strpos(<span class=\"string\">\"aabbcc\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"number\">-3</span>));<span class=\"comment\">//int(3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$string = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"The last character of '$string' is '$string[-1]'.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出: The last character of 'bar' is 'r'.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-9-将callables转为闭包\"><a href=\"#1-9-将callables转为闭包\" class=\"headerlink\" title=\"1.9 将callables转为闭包\"></a>1.9 将callables转为闭包</h4><blockquote>\n<p><a href=\"http://php.net/manual/zh/class.closure.php\" target=\"_blank\" rel=\"noopener\">Closure</a>新增了一个静态方法fromCallable()，用于将callable快速地 转为一个Closure 对象。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exposeFunction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Closure::fromCallable([<span class=\"keyword\">$this</span>, <span class=\"string\">'privateFunction'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span><span class=\"params\">($param)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var_dump($param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$privFunc = (<span class=\"keyword\">new</span> Test)-&gt;exposeFunction();</span><br><span class=\"line\">$privFunc(<span class=\"string\">'some value'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:string(10) \"some value\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-10-http2服务推送\"><a href=\"#1-10-http2服务推送\" class=\"headerlink\" title=\"1.10 http2服务推送\"></a>1.10 http2服务推送</h4><blockquote>\n<p>对服务器推送的支持现在已经被加入到CURL扩展中（ 需要版本 7.46 或更高）。这个可以通过<a href=\"http://php.net/manual/zh/function.curl-multi-setopt.php\" target=\"_blank\" rel=\"noopener\">curl_multi_setopt()</a>函数与新的常量 <strong>CURLMOPT_PUSHFUNCTION</strong> 来进行调节。常量 <strong>CURL_PUST_OK</strong> 和 <strong>CURL_PUSH_DENY</strong> 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、PHP7-1-x-新变化\"><a href=\"#2、PHP7-1-x-新变化\" class=\"headerlink\" title=\"2、PHP7.1.x 新变化\"></a>2、PHP7.1.x 新变化</h3><ul>\n<li><h4 id=\"2-1-传递参数过少时将抛出错误\"><a href=\"#2-1-传递参数过少时将抛出错误\" class=\"headerlink\" title=\"2.1 传递参数过少时将抛出错误\"></a>2.1 传递参数过少时将抛出错误</h4><blockquote>\n<p>过去我们传递参数过少会产生warning。php7.1开始会抛出error</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、PHP-7-1-x-中废弃的特性\"><a href=\"#3、PHP-7-1-x-中废弃的特性\" class=\"headerlink\" title=\"3、PHP 7.1.x 中废弃的特性\"></a>3、PHP 7.1.x 中废弃的特性</h3><ul>\n<li><h4 id=\"3-1-移除了ext-mcrypt拓展\"><a href=\"#3-1-移除了ext-mcrypt拓展\" class=\"headerlink\" title=\"3.1 移除了ext/mcrypt拓展\"></a>3.1 移除了ext/mcrypt拓展</h4><blockquote>\n<p>mcrypt 扩展已经过时了大约10年，并且用起来很复杂。因此它被废弃并且被 OpenSSL 所取代。 从PHP7.2起它将被从核心代码中移除并且移到PECL中。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三-PHP7-1-x-移植PHP7-2-x\"><a href=\"#三-PHP7-1-x-移植PHP7-2-x\" class=\"headerlink\" title=\"三.PHP7.1.x 移植PHP7.2.x\"></a>三.PHP7.1.x 移植PHP7.2.x</h2><h3 id=\"1、PHP7-2-x-新特性\"><a href=\"#1、PHP7-2-x-新特性\" class=\"headerlink\" title=\"1、PHP7.2.x 新特性\"></a>1、PHP7.2.x 新特性</h3><ul>\n<li><h4 id=\"1-1-增加新的类型object\"><a href=\"#1-1-增加新的类型object\" class=\"headerlink\" title=\"1.1 增加新的类型object\"></a>1.1 增加新的类型object</h4><p><code>这种新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(object $obj)</span> : <span class=\"title\">object</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SplQueue();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"keyword\">new</span> StdClass());</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-2-通过名称加载扩展\"><a href=\"#1-2-通过名称加载扩展\" class=\"headerlink\" title=\"1.2 通过名称加载扩展\"></a>1.2 通过名称加载扩展</h4><p><font size=\"2\">扩展文件不再需要通过文件加载 (Unix下以.so为文件扩展名，在Windows下以 .dll 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用 <a href=\"http://php.net/manual/zh/function.dl.php\" target=\"_blank\" rel=\"noopener\">dl()</a> 函数进行启用。</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; ini file</span><br><span class=\"line\">extension=php-ast</span><br><span class=\"line\">zend_extension=opcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-3-允许重写抽象方法\"><a href=\"#1-3-允许重写抽象方法\" class=\"headerlink\" title=\"1.3 允许重写抽象方法\"></a>1.3 允许重写抽象方法</h4><p><code>当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(string $s)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overridden - still maintaining contravariance for parameters and covariance for return</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">($s)</span> : <span class=\"title\">int</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-4-使用Argon2算法生成密码散列\"><a href=\"#1-4-使用Argon2算法生成密码散列\" class=\"headerlink\" title=\"1.4 使用Argon2算法生成密码散列\"></a>1.4 使用Argon2算法生成密码散列</h4><p><font size=\"2\">Argon2 已经被加入到密码散列（password hashing） API (<a href=\"http://php.net/manual/zh/book.password.php\" target=\"_blank\" rel=\"noopener\">这些函数以 password_ 开头</a>) 以下是暴露出来的常量:`</font></p>\n</li>\n<li>PASSWORD_ARGON2I</li>\n<li>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</li>\n<li>PASSWORD_ARGON2_DEFAULT_TIME_COST</li>\n<li>PASSWORD_ARGON2_DEFAULT_THREADS</li>\n<li><h4 id=\"1-5-新增-ext-PDO（PDO扩展）-字符串扩展类型-¶\"><a href=\"#1-5-新增-ext-PDO（PDO扩展）-字符串扩展类型-¶\" class=\"headerlink\" title=\"1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶\"></a>1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶</h4><p><code>当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：</code></p>\n</li>\n<li><p>PDO::PARAM_STR_NATL</p>\n</li>\n<li>PDO::PARAM_STR_CHAR</li>\n<li>PDO::ATTR_DEFAULT_STR_PARAM</li>\n</ul>\n<p>这些常量通过PDO::PARAM_STR利用位运算OR进行计算：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$db-&gt;quote(<span class=\"string\">'über'</span>, PDO::PARAM_STR | PDO::PARAM_STR_NATL);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"1-5-允许分组命名空间的尾部逗号\"><a href=\"#1-5-允许分组命名空间的尾部逗号\" class=\"headerlink\" title=\"1.5 允许分组命名空间的尾部逗号\"></a>1.5 允许分组命名空间的尾部逗号</h4><font size=\"2\">命名空间可以在PHP7.2中使用尾随逗号进行分组引入。</font><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Foo</span>\\<span class=\"title\">Bar</span>\\&#123;</span><br><span class=\"line\">    <span class=\"title\">Foo</span>,</span><br><span class=\"line\">    <span class=\"title\">Bar</span>,</span><br><span class=\"line\">    <span class=\"title\">Baz</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<front color=\"red\">在php7.0中 最后一个(Baz,)不能有逗号否则报错</front>\n</blockquote>\n<h3 id=\"2、PHP7-2-x-新变化\"><a href=\"#2、PHP7-2-x-新变化\" class=\"headerlink\" title=\"2、PHP7.2.x 新变化\"></a>2、PHP7.2.x 新变化</h3><ul>\n<li><h4 id=\"2-1-number-format-返回值\"><a href=\"#2-1-number-format-返回值\" class=\"headerlink\" title=\"2.1 number_format 返回值\"></a>2.1 number_format 返回值</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(number_format(<span class=\"number\">-0.01</span>)); <span class=\"comment\">// now outputs string(1) \"0\" instead of string(2) \"-0\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-2-get-class-不再允许null。\"><a href=\"#2-2-get-class-不再允许null。\" class=\"headerlink\" title=\"2.2 get_class()不再允许null。\"></a>2.2 get_class()不再允许null。</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(get_class(<span class=\"keyword\">null</span>)); <span class=\"comment\">// warning</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-3-count-作用在不是-Countable-Types-将发生warning\"><a href=\"#2-3-count-作用在不是-Countable-Types-将发生warning\" class=\"headerlink\" title=\"2.3 count 作用在不是 Countable Types 将发生warning\"></a>2.3 count 作用在不是 Countable Types 将发生warning</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//PHP7.2</span></span><br><span class=\"line\">var_dump(</span><br><span class=\"line\">    count(<span class=\"keyword\">null</span>), <span class=\"comment\">// NULL is not countable</span></span><br><span class=\"line\">    count(<span class=\"number\">1</span>), <span class=\"comment\">// integers are not countable</span></span><br><span class=\"line\">    count(<span class=\"string\">'abc'</span>), <span class=\"comment\">// strings are not countable</span></span><br><span class=\"line\">    count(<span class=\"keyword\">new</span> stdclass), <span class=\"comment\">// objects not implementing the Countable interface are not countable</span></span><br><span class=\"line\">    count([<span class=\"number\">1</span>,<span class=\"number\">2</span>]) <span class=\"comment\">// arrays are countable</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上例程会输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\">int(0)</span><br><span class=\"line\">int(1)</span><br><span class=\"line\">int(1)</span><br><span class=\"line\">int(1)</span><br><span class=\"line\">int(2)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"2-4-不带引号的字符串\"><a href=\"#2-4-不带引号的字符串\" class=\"headerlink\" title=\"2.4 不带引号的字符串\"></a>2.4 不带引号的字符串</h4><p><code>在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(HELLO);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP7.2前输出：HELLO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * PHP7.2输出</span></span><br><span class=\"line\"><span class=\"comment\">Warning: Use of undefined constant HELLO - assumed 'HELLO' (this will throw an Error in a future version of PHP) in /usr/src/php/dfe807d9bfa587a80b60fbdda823e7be.php on line 2</span></span><br><span class=\"line\"><span class=\"comment\">string(5) \"HELLO\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-5-is-object、gettype修正\"><a href=\"#2-5-is-object、gettype修正\" class=\"headerlink\" title=\"2.5  is_object、gettype修正\"></a>2.5  is_object、gettype修正</h4></li>\n</ul>\n<p>is_object 作用在<strong>__PHP_Incomplete_Class</strong> 将返回：true<br><code>Previously, using is_object() on the __PHP_Incomplete_Class class would return FALSE. Now, TRUE will be returned.</code></p>\n<p>gettype作用在闭包在将正确返回resource<br><code>Previously, using gettype() on a closed resource would return a string of &quot;unknown type&quot;. Now, a string of &quot;resource (closed)&quot; will be returned.</code></p>\n<h3 id=\"3、PHP7-2-x-废弃的特性\"><a href=\"#3、PHP7-2-x-废弃的特性\" class=\"headerlink\" title=\"3、PHP7.2.x 废弃的特性\"></a>3、PHP7.2.x 废弃的特性</h3><ul>\n<li><h4 id=\"3-1-autoload-被废弃\"><a href=\"#3-1-autoload-被废弃\" class=\"headerlink\" title=\"3.1 __autoload 被废弃\"></a>3.1 __autoload 被废弃</h4></li>\n<li><h4 id=\"3-2-each被废弃\"><a href=\"#3-2-each被废弃\" class=\"headerlink\" title=\"3.2 each被废弃\"></a>3.2 each被废弃</h4><p><code>使用此函数遍历时，比普通的 foreach 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了</code></p>\n</li>\n<li><h4 id=\"3-3-gmp-random-函数被废弃\"><a href=\"#3-3-gmp-random-函数被废弃\" class=\"headerlink\" title=\"3.3 gmp_random()函数被废弃\"></a>3.3 gmp_random()函数被废弃</h4><p>此函数基于未知的、取决于平台的 limb 尺寸产生随机数。因此，该函数已被废弃。 使用更好的方式产生随机数： GMP 扩展中的<a href=\"http://php.net/manual/zh/function.gmp-random-bits.php\" target=\"_blank\" rel=\"noopener\">gmp_random_bits()</a>  和 <a href=\"http://php.net/manual/zh/function.gmp-random-range.php\" target=\"_blank\" rel=\"noopener\">gmp_random_range()</a>。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一-PHP5-6-x-移植PHP7-0-x\"><a href=\"#一-PHP5-6-x-移植PHP7-0-x\" class=\"headerlink\" title=\"一.PHP5.6.x 移植PHP7.0.x\"></a>一.PHP5.6.x 移植PHP7.0.x</h2><h3 id=\"1、PHP7-0-x-新特性\"><a href=\"#1、PHP7-0-x-新特性\" class=\"headerlink\" title=\"1、PHP7.0.x 新特性\"></a>1、PHP7.0.x 新特性</h3><ul>\n<li><h4 id=\"1-1-太空船操作符（组合比较符）-lt-gt\"><a href=\"#1-1-太空船操作符（组合比较符）-lt-gt\" class=\"headerlink\" title=\"1.1 太空船操作符（组合比较符） (&lt;=&gt;)\"></a>1.1 太空船操作符（组合比较符） (&lt;=&gt;)</h4><blockquote>\n<p>太空船操作符用于比较两个表达式，当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。<font color=\"red\">对象不能进行比较</font>。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 整数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1</span> &lt;=&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1</span> &lt;=&gt; <span class=\"number\">2</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">2</span> &lt;=&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1.5</span> &lt;=&gt; <span class=\"number\">1.5</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1.5</span> &lt;=&gt; <span class=\"number\">2.5</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">2.5</span> &lt;=&gt; <span class=\"number\">1.5</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"a\"</span> &lt;=&gt; <span class=\"string\">\"a\"</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"a\"</span> &lt;=&gt; <span class=\"string\">\"b\"</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"b\"</span> &lt;=&gt; <span class=\"string\">\"a\"</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><h4 id=\"1-2-null合并运算符\"><a href=\"#1-2-null合并运算符\" class=\"headerlink\" title=\"1.2 null合并运算符\"></a>1.2 null合并运算符</h4><blockquote>\n<p>由于日常使用中存在大量同时使用三元表达式和 isset()的情况， 我们添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\"># php7以前</span></span><br><span class=\"line\">$a = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'a'</span>]) ? $_GET[<span class=\"string\">'a'</span>] : <span class=\"string\">'none'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#PHP 7</span></span><br><span class=\"line\">$a = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'a'</span>]) ?? <span class=\"string\">'none'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-3-变量类型声明\"><a href=\"#1-3-变量类型声明\" class=\"headerlink\" title=\"1.3 变量类型声明\"></a>1.3 变量类型声明</h4><blockquote>\n<p>变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数int、string、float、bool</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>非严格模式</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumOfInts</span><span class=\"params\">(int ...$ints)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_sum($ints);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(sumOfInts(<span class=\"number\">2</span>, <span class=\"string\">'3'</span>, <span class=\"number\">4.1</span>)); <span class=\"comment\">// int(9)</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>严格模式</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\"># 严格模式</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(strict_types=<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(int $x, int $y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $x + $y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(add(<span class=\"string\">'2'</span>, <span class=\"number\">3</span>)); </span><br><span class=\"line\"><span class=\"comment\">// Fatal error: Argument 1 passed to add() must be of the type integer</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>要使用严格模式，<font color=\"red\">一个declare声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。</font> 这个指令不仅影响参数的类型声明，也影响到函数的返回值声明</p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-4-返回值类型声明\"><a href=\"#1-4-返回值类型声明\" class=\"headerlink\" title=\"1.4 返回值类型声明\"></a>1.4 返回值类型声明</h4></li>\n</ul>\n<blockquote>\n<p>增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span><span class=\"params\">(int $a)</span>: <span class=\"title\">array</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">3</span>);<span class=\"comment\">//Fatal error</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-5-匿名类\"><a href=\"#1-5-匿名类\" class=\"headerlink\" title=\"1.5 匿名类\"></a>1.5 匿名类</h4><blockquote>\n<p>php7允许new class {} 创建一个匿名的对象。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//php7以前</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">($msg)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$util-&gt;setLogger(<span class=\"keyword\">new</span> Logger());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// php7+</span></span><br><span class=\"line\">$util-&gt;setLogger(<span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">($msg)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-6-Unicode-codepoint-转译语法\"><a href=\"#1-6-Unicode-codepoint-转译语法\" class=\"headerlink\" title=\"1.6 Unicode codepoint 转译语法\"></a>1.6 Unicode codepoint 转译语法</h4><blockquote>\n<p>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\u&#123;aa&#125;\"</span>;<span class=\"comment\">// ª</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\u&#123;0000aa&#125;\"</span>;<span class=\"comment\">// ª</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\u&#123;9999&#125;\"</span>;<span class=\"comment\">// 香</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-7-Closure-call\"><a href=\"#1-7-Closure-call\" class=\"headerlink\" title=\"1.7 Closure::call\"></a>1.7 Closure::call</h4><blockquote>\n<p>闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;<span class=\"keyword\">private</span> $x = <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP 7 之前版本的代码</span></span><br><span class=\"line\">$getXCB = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;x;&#125;;</span><br><span class=\"line\">$getX = $getXCB-&gt;bindTo(<span class=\"keyword\">new</span> A, <span class=\"string\">'A'</span>); <span class=\"comment\">// 中间层闭包</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $getX();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP 7+ 及更高版本的代码</span></span><br><span class=\"line\">$getX = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;x;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $getX-&gt;call(<span class=\"keyword\">new</span> A);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-8-带过滤的unserialize\"><a href=\"#1-8-带过滤的unserialize\" class=\"headerlink\" title=\"1.8 带过滤的unserialize\"></a>1.8 带过滤的unserialize</h4></li>\n</ul>\n<blockquote>\n<p>提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 将所有的对象都转换为 __PHP_Incomplete_Class 对象</span></span><br><span class=\"line\">$data = unserialize($foo, [<span class=\"string\">\"allowed_classes\"</span> =&gt; <span class=\"keyword\">false</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象</span></span><br><span class=\"line\">$data = unserialize($foo, [<span class=\"string\">\"allowed_classes\"</span> =&gt; [<span class=\"string\">\"MyClass\"</span>, <span class=\"string\">\"MyClass2\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认情况下所有的类都是可接受的，等同于省略第二个参数</span></span><br><span class=\"line\">$data = unserialize($foo, [<span class=\"string\">\"allowed_classes\"</span> =&gt; <span class=\"keyword\">true</span>]);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-9-IntlChar类\"><a href=\"#1-9-IntlChar类\" class=\"headerlink\" title=\"1.9 IntlChar类\"></a>1.9 IntlChar类</h4><blockquote>\n<p>新增加的 <a href=\"http://php.net/manual/zh/class.intlchar.php\" target=\"_blank\" rel=\"noopener\">IntlChar</a> 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">printf(<span class=\"string\">'%x'</span>, IntlChar::CODEPOINT_MAX);<span class=\"comment\">//10ffff</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> IntlChar::charName(<span class=\"string\">'@'</span>);<span class=\"comment\">//COMMERCIAL AT</span></span><br><span class=\"line\">var_dump(IntlChar::ispunct(<span class=\"string\">'!'</span>));<span class=\"comment\">//bool(true)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若要使用此类，请先安装Intl扩展</p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-10-预期\"><a href=\"#1-10-预期\" class=\"headerlink\" title=\"1.10 预期\"></a>1.10 预期</h4><blockquote>\n<p>预期是向后兼用并增强之前的 <a href=\"http://php.net/manual/zh/function.assert.php\" target=\"_blank\" rel=\"noopener\">assert()</a> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">ini_set(<span class=\"string\">'assert.exception'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomError</span> <span class=\"keyword\">extends</span> <span class=\"title\">AssertionError</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">assert(<span class=\"keyword\">false</span>, <span class=\"keyword\">new</span> CustomError(<span class=\"string\">'Some error message'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：Fatal error: Uncaught CustomError: Some error message</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-11-命名空间按组导入\"><a href=\"#1-11-命名空间按组导入\" class=\"headerlink\" title=\"1.11 命名空间按组导入\"></a>1.11 命名空间按组导入</h4><blockquote>\n<p>从同一个命名空间下导入的类、函数、常量支持按组一次导入</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//php7以前</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">model</span>\\<span class=\"title\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">model</span>\\<span class=\"title\">B</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//php7+</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">model</span>&#123;<span class=\"title\">A</span>,<span class=\"title\">B</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-12-生成器支持返回表达式\"><a href=\"#1-12-生成器支持返回表达式\" class=\"headerlink\" title=\"1.12 生成器支持返回表达式\"></a>1.12 生成器支持返回表达式</h4><blockquote>\n<p>此特性基于 PHP 5.5 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$gen = (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($gen <span class=\"keyword\">as</span> $val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $val, PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $gen-&gt;getReturn(), PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  1</span></span><br><span class=\"line\"><span class=\"comment\">  2</span></span><br><span class=\"line\"><span class=\"comment\">  3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-13-生成器委派\"><a href=\"#1-13-生成器委派\" class=\"headerlink\" title=\"1.13 生成器委派\"></a>1.13 生成器委派</h4><blockquote>\n<p>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> from gen2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (gen() <span class=\"keyword\">as</span> $val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $val, PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-14-整数除法函数intdiv\"><a href=\"#1-14-整数除法函数intdiv\" class=\"headerlink\" title=\"1.14 整数除法函数intdiv\"></a>1.14 整数除法函数intdiv</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(intdiv(<span class=\"number\">10</span>,<span class=\"number\">3</span>)); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-15-会话选项设置\"><a href=\"#1-15-会话选项设置\" class=\"headerlink\" title=\"1.15 会话选项设置\"></a>1.15 会话选项设置</h4><blockquote>\n<p>session_start() 可以加入一个数组覆盖php.ini的配置</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">session_start([</span><br><span class=\"line\">    <span class=\"string\">'cache_limiter'</span> =&gt; <span class=\"string\">'private'</span>,</span><br><span class=\"line\">    <span class=\"string\">'read_and_close'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-16-preg-replace-callback-array\"><a href=\"#1-16-preg-replace-callback-array\" class=\"headerlink\" title=\"1.16 preg_replace_callback_array\"></a>1.16 preg_replace_callback_array</h4><blockquote>\n<p>在 PHP7 之前，当使用 <a href=\"http://php.net/manual/zh/function.preg-replace-callback.php\" target=\"_blank\" rel=\"noopener\">preg_replace_callback()</a> 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 <a href=\"http://php.net/manual/zh/function.preg-replace-callback-array.php\" target=\"_blank\" rel=\"noopener\">preg_replace_callback_array()</a> 函数， 可以使得代码更加简洁。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//string preg_replace_callback_array(array $regexesAndCallbacks, string $input);</span></span><br><span class=\"line\">$tokenStream = []; <span class=\"comment\">// [tokenName, lexeme] pairs</span></span><br><span class=\"line\"></span><br><span class=\"line\">$input = <span class=\"string\">&lt;&lt;&lt;'end'</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">$a</span> = 3; // variable initialisation</span></span><br><span class=\"line\"><span class=\"string\">end;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pre PHP 7 code</span></span><br><span class=\"line\">preg_replace_callback(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">'~\\$[a-z_][a-z\\d_]*~i'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~=~'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~[\\d]+~'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~;~'</span>,</span><br><span class=\"line\">        <span class=\"string\">'~//.*~'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">'$'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_VARIABLE'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">'='</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_ASSIGN'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (ctype_digit($match[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_NUM'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">';'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_TERMINATE_STMT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (strpos($match[<span class=\"number\">0</span>], <span class=\"string\">'//'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_COMMENT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    $input</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP 7+ code</span></span><br><span class=\"line\">preg_replace_callback_array(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">'~\\$[a-z_][a-z\\d_]*~i'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_VARIABLE'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~=~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_ASSIGN'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~[\\d]+~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_NUM'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~;~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_TERMINATE_STMT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'~//.*~'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($match)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$tokenStream)</span> </span>&#123;</span><br><span class=\"line\">            $tokenStream[] = [<span class=\"string\">'T_COMMENT'</span>, $match[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    $input</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-17-随机数、随机字符函数\"><a href=\"#1-17-随机数、随机字符函数\" class=\"headerlink\" title=\"1.17 随机数、随机字符函数\"></a>1.17 随机数、随机字符函数</h4><blockquote>\n<p>新加入两个跨平台的函数： <a href=\"\">random_bytes(http://php.net/manual/zh/function.random-bytes.php)</a> 和 <a href=\"http://php.net/manual/zh/function.random-int.php\" target=\"_blank\" rel=\"noopener\">random_int()</a> 用来产生高安全级别的随机字符串和随机整数。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$bytes = random_bytes(<span class=\"number\">5</span>);</span><br><span class=\"line\">var_dump(bin2hex($bytes));<span class=\"comment\">//string(10) \"385e33f741\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(random_int(<span class=\"number\">100</span>, <span class=\"number\">999</span>));<span class=\"comment\">//int(248)</span></span><br><span class=\"line\">var_dump(random_int(<span class=\"number\">-1000</span>, <span class=\"number\">0</span>));<span class=\"comment\">//int(-898)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-18-define-支持定义数组\"><a href=\"#1-18-define-支持定义数组\" class=\"headerlink\" title=\"1.18 define 支持定义数组\"></a>1.18 define 支持定义数组</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">define(<span class=\"string\">'ALLOWED_IMAGE_EXTENSIONS'</span>, [<span class=\"string\">'jpg'</span>, <span class=\"string\">'jpeg'</span>, <span class=\"string\">'gif'</span>, <span class=\"string\">'png'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"http://php.net/manual/zh/migration70.new-features.php\" target=\"_blank\" rel=\"noopener\">查看所有新特性详情</a></p>\n<h3 id=\"2、PHP7-0-x-新变化\"><a href=\"#2、PHP7-0-x-新变化\" class=\"headerlink\" title=\"2、PHP7.0.x 新变化\"></a>2、PHP7.0.x 新变化</h3><ul>\n<li><h4 id=\"2-1-错误和异常处理相关的变更\"><a href=\"#2-1-错误和异常处理相关的变更\" class=\"headerlink\" title=\"2.1 错误和异常处理相关的变更\"></a>2.1 错误和异常处理相关的变更</h4><blockquote>\n<p>在PHP7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。 这些异常继承自 Error 类，此类实现了 Throwable 接口 （所有异常都实现了这个基础接口）。</p>\n</blockquote>\n</li>\n</ul>\n<p><code>这也意味着，当发生错误的时候，以前代码中的一些错误处理的代码将无法被触发。 因为在 PHP7 版本中，已经使用抛出异常的错误处理机制了。（如果代码中没有捕获 Error 异常，那么会引发致命错误）</code></p>\n<p><strong>set_exception_handler() 不再保证收到的一定是 Exception 对象</strong></p>\n<p>_抛出Error对象时，如果set_exception_handler()里的异常处理代码声明了类型 Exception ，将会导致fatal error。<br>想要异常处理器同时支持PHP5和PHP7，应该删掉异常处理器里的类型声明。如果代码仅仅是升级到PHP7，则可以把类型 Exception替换成Throwable_<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// PHP 5 时代的代码将会出现问题</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">(Exception $e)</span> </span>&#123; ... &#125;</span><br><span class=\"line\">set_exception_handler(<span class=\"string\">'handler'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容 PHP 5 和 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">($e)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仅支持 PHP 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">(Throwable $e)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"2-2-list-会按照原来的顺序进行赋值。不再是逆序了\"><a href=\"#2-2-list-会按照原来的顺序进行赋值。不再是逆序了\" class=\"headerlink\" title=\"2.2 list() 会按照原来的顺序进行赋值。不再是逆序了\"></a>2.2 list() 会按照原来的顺序进行赋值。不再是逆序了</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>($a,$b,$c) = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//PHP5</span></span><br><span class=\"line\">var_dump($a);<span class=\"comment\">//3</span></span><br><span class=\"line\">var_dump($b);<span class=\"comment\">//2</span></span><br><span class=\"line\">var_dump($c);<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP7+</span></span><br><span class=\"line\">var_dump($a);<span class=\"comment\">//1</span></span><br><span class=\"line\">var_dump($b);<span class=\"comment\">//2</span></span><br><span class=\"line\">var_dump($c);<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>空的list()赋值支持已经被移除</strong><br>list() 结构现在不再能是空的。如下的例子不再被允许：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">list</span>() = $a;</span><br><span class=\"line\"><span class=\"keyword\">list</span>(,,) = $a;</span><br><span class=\"line\"><span class=\"keyword\">list</span>($x, <span class=\"keyword\">list</span>(), $y) = $a;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"2-3-foreach不再改变内部数组指针\"><a href=\"#2-3-foreach不再改变内部数组指针\" class=\"headerlink\" title=\"2.3 foreach不再改变内部数组指针\"></a>2.3 foreach不再改变内部数组指针</h4><blockquote>\n<p>在PHP7之前，当数组通过 foreach 迭代时，数组指针会移动。现在开始，不再如此，见下面代码</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($array <span class=\"keyword\">as</span> &amp;$val) &#123;</span><br><span class=\"line\">    var_dump(current($array));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP5 输出</span></span><br><span class=\"line\">int(<span class=\"number\">1</span>);</span><br><span class=\"line\">int(<span class=\"number\">2</span>);</span><br><span class=\"line\">bool(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP7+ 输出</span></span><br><span class=\"line\">int(<span class=\"number\">0</span>);</span><br><span class=\"line\">int(<span class=\"number\">0</span>);</span><br><span class=\"line\">int(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"2-4-十六进制字符串不再被认为是数字\"><a href=\"#2-4-十六进制字符串不再被认为是数字\" class=\"headerlink\" title=\"2.4 十六进制字符串不再被认为是数字\"></a>2.4 十六进制字符串不再被认为是数字</h4><blockquote>\n<p>含十六进制字符串不再被认为是数字</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(is_numeric(<span class=\"string\">\"0x123\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP5 输出</span></span><br><span class=\"line\">bool(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PHP7+ 输出</span></span><br><span class=\"line\">bool(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"http://php.net/manual/zh/migration70.incompatible.php\" target=\"_blank\" rel=\"noopener\">查看所有变化详情</a></p>\n<h3 id=\"3、PHP7-0-x-废弃的特性\"><a href=\"#3、PHP7-0-x-废弃的特性\" class=\"headerlink\" title=\"3、PHP7.0.x 废弃的特性\"></a>3、PHP7.0.x 废弃的特性</h3><ul>\n<li><h4 id=\"3-1-PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\"><a href=\"#3-1-PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\" class=\"headerlink\" title=\"3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。\"></a>3.1 PHP4风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。</h4></li>\n</ul>\n<blockquote>\n<p>PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 E_DEPRECATED 警告。 如果还定义了 __construct() 方法则不受影响。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'I am the constructor'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<blockquote>\n<p>Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3</p>\n</blockquote>\n<ul>\n<li><h4 id=\"3-2-静态调用非静态的方法\"><a href=\"#3-2-静态调用非静态的方法\" class=\"headerlink\" title=\"3.2 静态调用非静态的方法\"></a>3.2 静态调用非静态的方法</h4><blockquote>\n<p>废弃了 静态（Static） 调用未声明成 static 的方法，未来可能会彻底移除该功能。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'I am not static!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo::bar();</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p>以上例程会输出：</p>\n<blockquote>\n<p>Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static!</p>\n</blockquote>\n<p><a href=\"http://php.net/manual/zh/migration70.deprecated.php\" target=\"_blank\" rel=\"noopener\">查看更多PHP7.0.x 弃用的功能</a></p>\n<h3 id=\"4、PHP7-0-x-移除的扩展和-SAPI\"><a href=\"#4、PHP7-0-x-移除的扩展和-SAPI\" class=\"headerlink\" title=\"4、PHP7.0.x 移除的扩展和 SAPI\"></a>4、PHP7.0.x 移除的扩展和 SAPI</h3><ul>\n<li><h4 id=\"4-1-移除的扩展\"><a href=\"#4-1-移除的扩展\" class=\"headerlink\" title=\"4.1 移除的扩展\"></a>4.1 移除的扩展</h4><ul>\n<li>ereg</li>\n<li>mssql</li>\n<li>mysql</li>\n<li>sybase_ct</li>\n</ul>\n</li>\n<li><h4 id=\"4-2-移除的-SAPI\"><a href=\"#4-2-移除的-SAPI\" class=\"headerlink\" title=\"4.2 移除的 SAPI\"></a>4.2 移除的 SAPI</h4><ul>\n<li>aolserver</li>\n<li>apache</li>\n<li>apache_hooks</li>\n<li>apache2filter</li>\n<li>caudium</li>\n<li>continuity</li>\n<li>isapi</li>\n<li>milter</li>\n<li>nsapi</li>\n<li>phttpd</li>\n<li>pi3web</li>\n<li>roxen</li>\n<li>thttpd</li>\n<li>tux</li>\n<li>webjames</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二-PHP7-0-x-移植PHP7-1-x\"><a href=\"#二-PHP7-0-x-移植PHP7-1-x\" class=\"headerlink\" title=\"二.PHP7.0.x 移植PHP7.1.x\"></a>二.PHP7.0.x 移植PHP7.1.x</h2><h3 id=\"1、PHP7-1-x-新特性\"><a href=\"#1、PHP7-1-x-新特性\" class=\"headerlink\" title=\"1、PHP7.1.x 新特性\"></a>1、PHP7.1.x 新特性</h3><ul>\n<li><h4 id=\"1-1-可为空-Nullables-类型\"><a href=\"#1-1-可为空-Nullables-类型\" class=\"headerlink\" title=\"1.1 可为空(Nullables)类型\"></a>1.1 可为空(Nullables)类型</h4><blockquote>\n<p>参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。 当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是null 。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(?string $name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    var_dump($name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'elePHPant'</span>);</span><br><span class=\"line\">test(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(10) &quot;elePHPant&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">NULL</span><br><span class=\"line\"></span><br><span class=\"line\">Uncaught Error: Too few arguments to function test(), 0 passed in...</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"1-2-Void-函数\"><a href=\"#1-2-Void-函数\" class=\"headerlink\" title=\"1.2 Void 函数\"></a>1.2 Void 函数</h4><blockquote>\n<p>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，NULL 不是一个合法的返回值</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span><span class=\"params\">(&amp;$left, &amp;$right)</span> : <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($left === $right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $tmp = $left;</span><br><span class=\"line\">    $left = $right;</span><br><span class=\"line\">    $right = $tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = <span class=\"number\">1</span>;</span><br><span class=\"line\">$b = <span class=\"number\">2</span>;</span><br><span class=\"line\">var_dump(swap($a, $b), $a, $b);</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">null</span><br><span class=\"line\">int(2)</span><br><span class=\"line\">int(1)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>试图去获取一个 void 方法的返回值会得到 NULL ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。</p>\n</blockquote>\n<ul>\n<li><h4 id=\"1-3-类常量可见性\"><a href=\"#1-3-类常量可见性\" class=\"headerlink\" title=\"1.3 类常量可见性\"></a>1.3 类常量可见性</h4><blockquote>\n<p>现在起支持设置类常量的可见性(public、protected、private)。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> PUBLIC_CONST_A = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> PUBLIC_CONST_B = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> PROTECTED_CONST = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> PRIVATE_CONST = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-4-短数组语法（-）\"><a href=\"#1-4-短数组语法（-）\" class=\"headerlink\" title=\"1.4 短数组语法（[]）\"></a>1.4 短数组语法（[]）</h4><blockquote>\n<p>短数组语法（[]）现在作为list()语法的一个备选项，可以用于将数组的值赋给一些变量（包括在foreach中）。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"string\">'Tom'</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>, <span class=\"string\">'Fred'</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">list</span>($id1, $name1) = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\">[$id1, $name1] = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> <span class=\"keyword\">list</span>($id, $name)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> [$id, $name]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-5-iterable伪类\"><a href=\"#1-5-iterable伪类\" class=\"headerlink\" title=\"1.5 iterable伪类\"></a>1.5 iterable伪类</h4><blockquote>\n<p>现在引入了一个新的被称为iterable的伪类 (与<a href=\"http://php.net/manual/zh/language.types.callable.php\" target=\"_blank\" rel=\"noopener\">callable</a>类似)。 这可以被用在参数或者返回值类型中，它代表接受数组或者实现了Traversable接口的对象。 至于子类，当用作参数时，子类可以收紧父类的iterable类型到array 或一个实现了Traversable的对象。对于返回值，子类可以拓宽父类的 array或对象返回值类型到iterable。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span><span class=\"params\">(iterable $iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($iter <span class=\"keyword\">as</span> $val) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-6-多异常捕获处理\"><a href=\"#1-6-多异常捕获处理\" class=\"headerlink\" title=\"1.6 多异常捕获处理\"></a>1.6 多异常捕获处理</h4><blockquote>\n<p>一个catch语句块现在可以通过管道字符(|)来实现多个异常的捕获。 这对于需要同时处理来自不同类的不同异常时很有用。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (FirstException | SecondException $e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle first and second exceptions</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-7-list支持键名\"><a href=\"#1-7-list支持键名\" class=\"headerlink\" title=\"1.7 list支持键名\"></a>1.7 list支持键名</h4><blockquote>\n<p>现在list()和它的新的[]语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data = [</span><br><span class=\"line\">    [<span class=\"string\">\"id\"</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">\"name\"</span> =&gt; <span class=\"string\">'Tom'</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"id\"</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">\"name\"</span> =&gt; <span class=\"string\">'Fred'</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">list</span>(<span class=\"string\">\"id\"</span> =&gt; $id1, <span class=\"string\">\"name\"</span> =&gt; $name1) = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\">[<span class=\"string\">\"id\"</span> =&gt; $id1, <span class=\"string\">\"name\"</span> =&gt; $name1] = $data[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list() style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> <span class=\"keyword\">list</span>(<span class=\"string\">\"id\"</span> =&gt; $id, <span class=\"string\">\"name\"</span> =&gt; $name)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [] style</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> [<span class=\"string\">\"id\"</span> =&gt; $id, <span class=\"string\">\"name\"</span> =&gt; $name]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here with $id and $name</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-8-支持为负的字符串偏移量\"><a href=\"#1-8-支持为负的字符串偏移量\" class=\"headerlink\" title=\"1.8 支持为负的字符串偏移量\"></a>1.8 支持为负的字符串偏移量</h4><blockquote>\n<p>现在所有支持偏移量的<a href=\"http://php.net/manual/zh/book.strings.php\" target=\"_blank\" rel=\"noopener\">字符串操作函数</a> 都支持接受负数作为偏移量，包括通过[]或{}操作字符串下标。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(<span class=\"string\">\"abcdef\"</span>[<span class=\"number\">-2</span>]);<span class=\"comment\">//string (1) \"e\"</span></span><br><span class=\"line\">var_dump(strpos(<span class=\"string\">\"aabbcc\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"number\">-3</span>));<span class=\"comment\">//int(3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$string = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"The last character of '$string' is '$string[-1]'.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出: The last character of 'bar' is 'r'.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-9-将callables转为闭包\"><a href=\"#1-9-将callables转为闭包\" class=\"headerlink\" title=\"1.9 将callables转为闭包\"></a>1.9 将callables转为闭包</h4><blockquote>\n<p><a href=\"http://php.net/manual/zh/class.closure.php\" target=\"_blank\" rel=\"noopener\">Closure</a>新增了一个静态方法fromCallable()，用于将callable快速地 转为一个Closure 对象。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exposeFunction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Closure::fromCallable([<span class=\"keyword\">$this</span>, <span class=\"string\">'privateFunction'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span><span class=\"params\">($param)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var_dump($param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$privFunc = (<span class=\"keyword\">new</span> Test)-&gt;exposeFunction();</span><br><span class=\"line\">$privFunc(<span class=\"string\">'some value'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:string(10) \"some value\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"1-10-http2服务推送\"><a href=\"#1-10-http2服务推送\" class=\"headerlink\" title=\"1.10 http2服务推送\"></a>1.10 http2服务推送</h4><blockquote>\n<p>对服务器推送的支持现在已经被加入到CURL扩展中（ 需要版本 7.46 或更高）。这个可以通过<a href=\"http://php.net/manual/zh/function.curl-multi-setopt.php\" target=\"_blank\" rel=\"noopener\">curl_multi_setopt()</a>函数与新的常量 <strong>CURLMOPT_PUSHFUNCTION</strong> 来进行调节。常量 <strong>CURL_PUST_OK</strong> 和 <strong>CURL_PUSH_DENY</strong> 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、PHP7-1-x-新变化\"><a href=\"#2、PHP7-1-x-新变化\" class=\"headerlink\" title=\"2、PHP7.1.x 新变化\"></a>2、PHP7.1.x 新变化</h3><ul>\n<li><h4 id=\"2-1-传递参数过少时将抛出错误\"><a href=\"#2-1-传递参数过少时将抛出错误\" class=\"headerlink\" title=\"2.1 传递参数过少时将抛出错误\"></a>2.1 传递参数过少时将抛出错误</h4><blockquote>\n<p>过去我们传递参数过少会产生warning。php7.1开始会抛出error</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、PHP-7-1-x-中废弃的特性\"><a href=\"#3、PHP-7-1-x-中废弃的特性\" class=\"headerlink\" title=\"3、PHP 7.1.x 中废弃的特性\"></a>3、PHP 7.1.x 中废弃的特性</h3><ul>\n<li><h4 id=\"3-1-移除了ext-mcrypt拓展\"><a href=\"#3-1-移除了ext-mcrypt拓展\" class=\"headerlink\" title=\"3.1 移除了ext/mcrypt拓展\"></a>3.1 移除了ext/mcrypt拓展</h4><blockquote>\n<p>mcrypt 扩展已经过时了大约10年，并且用起来很复杂。因此它被废弃并且被 OpenSSL 所取代。 从PHP7.2起它将被从核心代码中移除并且移到PECL中。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三-PHP7-1-x-移植PHP7-2-x\"><a href=\"#三-PHP7-1-x-移植PHP7-2-x\" class=\"headerlink\" title=\"三.PHP7.1.x 移植PHP7.2.x\"></a>三.PHP7.1.x 移植PHP7.2.x</h2><h3 id=\"1、PHP7-2-x-新特性\"><a href=\"#1、PHP7-2-x-新特性\" class=\"headerlink\" title=\"1、PHP7.2.x 新特性\"></a>1、PHP7.2.x 新特性</h3><ul>\n<li><h4 id=\"1-1-增加新的类型object\"><a href=\"#1-1-增加新的类型object\" class=\"headerlink\" title=\"1.1 增加新的类型object\"></a>1.1 增加新的类型object</h4><p><code>这种新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(object $obj)</span> : <span class=\"title\">object</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SplQueue();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"keyword\">new</span> StdClass());</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-2-通过名称加载扩展\"><a href=\"#1-2-通过名称加载扩展\" class=\"headerlink\" title=\"1.2 通过名称加载扩展\"></a>1.2 通过名称加载扩展</h4><p><font size=\"2\">扩展文件不再需要通过文件加载 (Unix下以.so为文件扩展名，在Windows下以 .dll 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用 <a href=\"http://php.net/manual/zh/function.dl.php\" target=\"_blank\" rel=\"noopener\">dl()</a> 函数进行启用。</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; ini file</span><br><span class=\"line\">extension=php-ast</span><br><span class=\"line\">zend_extension=opcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-3-允许重写抽象方法\"><a href=\"#1-3-允许重写抽象方法\" class=\"headerlink\" title=\"1.3 允许重写抽象方法\"></a>1.3 允许重写抽象方法</h4><p><code>当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(string $s)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overridden - still maintaining contravariance for parameters and covariance for return</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">($s)</span> : <span class=\"title\">int</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"1-4-使用Argon2算法生成密码散列\"><a href=\"#1-4-使用Argon2算法生成密码散列\" class=\"headerlink\" title=\"1.4 使用Argon2算法生成密码散列\"></a>1.4 使用Argon2算法生成密码散列</h4><p><font size=\"2\">Argon2 已经被加入到密码散列（password hashing） API (<a href=\"http://php.net/manual/zh/book.password.php\" target=\"_blank\" rel=\"noopener\">这些函数以 password_ 开头</a>) 以下是暴露出来的常量:`</font></p>\n</li>\n<li>PASSWORD_ARGON2I</li>\n<li>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</li>\n<li>PASSWORD_ARGON2_DEFAULT_TIME_COST</li>\n<li>PASSWORD_ARGON2_DEFAULT_THREADS</li>\n<li><h4 id=\"1-5-新增-ext-PDO（PDO扩展）-字符串扩展类型-¶\"><a href=\"#1-5-新增-ext-PDO（PDO扩展）-字符串扩展类型-¶\" class=\"headerlink\" title=\"1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶\"></a>1.5 新增 ext/PDO（PDO扩展） 字符串扩展类型 ¶</h4><p><code>当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：</code></p>\n</li>\n<li><p>PDO::PARAM_STR_NATL</p>\n</li>\n<li>PDO::PARAM_STR_CHAR</li>\n<li>PDO::ATTR_DEFAULT_STR_PARAM</li>\n</ul>\n<p>这些常量通过PDO::PARAM_STR利用位运算OR进行计算：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$db-&gt;quote(<span class=\"string\">'über'</span>, PDO::PARAM_STR | PDO::PARAM_STR_NATL);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"1-5-允许分组命名空间的尾部逗号\"><a href=\"#1-5-允许分组命名空间的尾部逗号\" class=\"headerlink\" title=\"1.5 允许分组命名空间的尾部逗号\"></a>1.5 允许分组命名空间的尾部逗号</h4><font size=\"2\">命名空间可以在PHP7.2中使用尾随逗号进行分组引入。</font><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Foo</span>\\<span class=\"title\">Bar</span>\\&#123;</span><br><span class=\"line\">    <span class=\"title\">Foo</span>,</span><br><span class=\"line\">    <span class=\"title\">Bar</span>,</span><br><span class=\"line\">    <span class=\"title\">Baz</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<front color=\"red\">在php7.0中 最后一个(Baz,)不能有逗号否则报错</front>\n</blockquote>\n<h3 id=\"2、PHP7-2-x-新变化\"><a href=\"#2、PHP7-2-x-新变化\" class=\"headerlink\" title=\"2、PHP7.2.x 新变化\"></a>2、PHP7.2.x 新变化</h3><ul>\n<li><h4 id=\"2-1-number-format-返回值\"><a href=\"#2-1-number-format-返回值\" class=\"headerlink\" title=\"2.1 number_format 返回值\"></a>2.1 number_format 返回值</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(number_format(<span class=\"number\">-0.01</span>)); <span class=\"comment\">// now outputs string(1) \"0\" instead of string(2) \"-0\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-2-get-class-不再允许null。\"><a href=\"#2-2-get-class-不再允许null。\" class=\"headerlink\" title=\"2.2 get_class()不再允许null。\"></a>2.2 get_class()不再允许null。</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(get_class(<span class=\"keyword\">null</span>)); <span class=\"comment\">// warning</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-3-count-作用在不是-Countable-Types-将发生warning\"><a href=\"#2-3-count-作用在不是-Countable-Types-将发生warning\" class=\"headerlink\" title=\"2.3 count 作用在不是 Countable Types 将发生warning\"></a>2.3 count 作用在不是 Countable Types 将发生warning</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//PHP7.2</span></span><br><span class=\"line\">var_dump(</span><br><span class=\"line\">    count(<span class=\"keyword\">null</span>), <span class=\"comment\">// NULL is not countable</span></span><br><span class=\"line\">    count(<span class=\"number\">1</span>), <span class=\"comment\">// integers are not countable</span></span><br><span class=\"line\">    count(<span class=\"string\">'abc'</span>), <span class=\"comment\">// strings are not countable</span></span><br><span class=\"line\">    count(<span class=\"keyword\">new</span> stdclass), <span class=\"comment\">// objects not implementing the Countable interface are not countable</span></span><br><span class=\"line\">    count([<span class=\"number\">1</span>,<span class=\"number\">2</span>]) <span class=\"comment\">// arrays are countable</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上例程会输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d</span><br><span class=\"line\">int(0)</span><br><span class=\"line\">int(1)</span><br><span class=\"line\">int(1)</span><br><span class=\"line\">int(1)</span><br><span class=\"line\">int(2)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"2-4-不带引号的字符串\"><a href=\"#2-4-不带引号的字符串\" class=\"headerlink\" title=\"2.4 不带引号的字符串\"></a>2.4 不带引号的字符串</h4><p><code>在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(HELLO);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PHP7.2前输出：HELLO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * PHP7.2输出</span></span><br><span class=\"line\"><span class=\"comment\">Warning: Use of undefined constant HELLO - assumed 'HELLO' (this will throw an Error in a future version of PHP) in /usr/src/php/dfe807d9bfa587a80b60fbdda823e7be.php on line 2</span></span><br><span class=\"line\"><span class=\"comment\">string(5) \"HELLO\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-5-is-object、gettype修正\"><a href=\"#2-5-is-object、gettype修正\" class=\"headerlink\" title=\"2.5  is_object、gettype修正\"></a>2.5  is_object、gettype修正</h4></li>\n</ul>\n<p>is_object 作用在<strong>__PHP_Incomplete_Class</strong> 将返回：true<br><code>Previously, using is_object() on the __PHP_Incomplete_Class class would return FALSE. Now, TRUE will be returned.</code></p>\n<p>gettype作用在闭包在将正确返回resource<br><code>Previously, using gettype() on a closed resource would return a string of &quot;unknown type&quot;. Now, a string of &quot;resource (closed)&quot; will be returned.</code></p>\n<h3 id=\"3、PHP7-2-x-废弃的特性\"><a href=\"#3、PHP7-2-x-废弃的特性\" class=\"headerlink\" title=\"3、PHP7.2.x 废弃的特性\"></a>3、PHP7.2.x 废弃的特性</h3><ul>\n<li><h4 id=\"3-1-autoload-被废弃\"><a href=\"#3-1-autoload-被废弃\" class=\"headerlink\" title=\"3.1 __autoload 被废弃\"></a>3.1 __autoload 被废弃</h4></li>\n<li><h4 id=\"3-2-each被废弃\"><a href=\"#3-2-each被废弃\" class=\"headerlink\" title=\"3.2 each被废弃\"></a>3.2 each被废弃</h4><p><code>使用此函数遍历时，比普通的 foreach 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了</code></p>\n</li>\n<li><h4 id=\"3-3-gmp-random-函数被废弃\"><a href=\"#3-3-gmp-random-函数被废弃\" class=\"headerlink\" title=\"3.3 gmp_random()函数被废弃\"></a>3.3 gmp_random()函数被废弃</h4><p>此函数基于未知的、取决于平台的 limb 尺寸产生随机数。因此，该函数已被废弃。 使用更好的方式产生随机数： GMP 扩展中的<a href=\"http://php.net/manual/zh/function.gmp-random-bits.php\" target=\"_blank\" rel=\"noopener\">gmp_random_bits()</a>  和 <a href=\"http://php.net/manual/zh/function.gmp-random-range.php\" target=\"_blank\" rel=\"noopener\">gmp_random_range()</a>。</p>\n</li>\n</ul>"},{"title":"php 面试题","date":"2017-09-17T03:12:02.000Z","_content":"\n## 1、基础\n\n\n### 1.1 cookie与session的区别\n- 存储位置：session存储于服务器，cookie存储于浏览器\n- 安全性：session安全性比cookie高\n- session为‘会话服务’，在使用时需要开启服务，cookie不需要开启，可以直接用\n<!--more-->\n\n### 1.2 禁用 cookie 后 session 还能用吗?\n\n可以,通过URL传值或者隐藏表单传递Session ID (常用)。\n\n**Session和cookie的工作流程：**\n1. 你第一次访问网站时，\n \n2. 服务端脚本中开启了session_start();，\n \n3. 服务器会生成一个不重复的 SESSIONID 的文件session_id();，比如在/var/lib/php/session目录\n \n4. 并将返回(Response)如下的HTTP头 Set-Cookie:PHPSESSIONID=xxxxxxx\n \n5. 客户端接收到`Set-Cookie`的头，将PHPSESSIONID写入cookie\n \n6. 当你第二次访问页面时，所有Cookie会附带的请求头(Request)发送给服务器端\n \n7. 服务器识别PHPSESSIONID这个cookie，然后去session目录查找对应session文件，\n \n8. 找到这个session文件后，检查是否过期，如果没有过期，去读取Session文件中的配置；如果已经过期，清空其中的配置\n\n### 1.3 表单中get与post提交方法的区别\n```\n参数接收：\n get：通过url参数传递进行接收,\n post：是实体数据,可以通过表单提交大量信息.\n```\n\n### 1.4 数据库中的事务是什么\n\n- 事务（transaction）是作为一个单元的一组有序的数据库操作。\n如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。\n如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。\n如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消\n\n\n### 1.5 echo(),print(),print_r()的区别 \n\n- echo是PHP语句, print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)\n\n- print() 只能打印出简单类型变量的值(如int,string)\n\n- print_r() 可以打印出复杂类型变量的值(如数组,对象)\n\n- echo 输出一个或者多个字符串\n\n\n\n### 1.6 用PHP写出显示客户端IP与服务器IP的代码\n\n- 打印客户端IP:echo $_SERVER['REMOTE_ADDR']; 或者: getenv('REMOTE_ADDR');\n\n- 打印服务器IP:echo gethostbyname(\"www.bolaiwu.com\")\n\n\n### 1.7 include和require的区别是什么?\n\n- require:是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require\n\n- include:有返回值，而require没有(可能因为如此require的速度比include快)\n\n><front color='red'>注意:包含文件不存在或者语法错误的时候,require是致命的,include不是</front>\n\n\n\n### 1.8 Trait是什么?\nTrait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题\n\n单个Trait使用方法：\n```php\n<?php\ntrait ezcReflectionReturnInfo {\n    function getReturnType() { /*1*/ }\n    function getReturnDescription() { /*2*/ }\n}\n\nclass ezcReflectionMethod extends ReflectionMethod {\n    use ezcReflectionReturnInfo;\n    /* ... */\n}\n\nclass ezcReflectionFunction extends ReflectionFunction {\n    use ezcReflectionReturnInfo;\n    /* ... */\n}\n?>\n```\n多个Trait使用方法\n```php\n<?php\ntrait Hello {\n    public function sayHello() {\n        echo 'Hello ';\n    }\n}\n\ntrait World {\n    public function sayWorld() {\n        echo 'World';\n    }\n}\n\nclass MyHelloWorld {\n    use Hello, World;\n    public function sayExclamationMark() {\n        echo '!';\n    }\n}\n\n$o = new MyHelloWorld();\n$o->sayHello();\n$o->sayWorld();\n$o->sayExclamationMark();\n?>\n\n```\n\n\n### 1.9 php7和php5区别\n\n**1.PHP7.0 比PHP5.6性能提升了两倍**。\n1). 变量存储字节减小，减少内存占用，提升变量操作速度\n\n2). 改善数组结构，数组元素和hash映射表被分配在同一块内存里，降低了内存占用、提升了 cpu 缓存命中率\n\n3). 改进了函数的调用机制，通过优化参数传递的环节，减少了一些指令，提高执行效率\n\n**2.PHP7.0全面一致支持64位。**\n\n**3.PHP7.0之前出现的致命错误，都改成了抛出异常。**\n\n**4.增加了空结合操作符（？？）。效果相当于三元运算符。**\n\n**5.PHP7.0新增了函数的返回类型声明。**\n\n**6.PHP7.0新增了标量类型声明。**\n`PHP 7 中的函数的形参类型声明可以是标量。在 PHP 5 中只可以是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。`\n\n\n**7.新增加了匿名类。**\n\n`PHP 5.3 开始有了匿名函数，现在又新增了匿名类；`\n\n**8.PHP7.0之后溢移除了一些老的不再支持的SAPI(服务器端应用编程端口)和扩展。**\n``` \n ereg\n    \n mssql\n    \n mysql\n    \n sybase_ct\n```\n    \n\n**9.define 现在可以定义常量数组。**\n\n\n### 1.10 谈谈对mvc的认识\n`模型(model),视图(view),控制器(controller);\n由模型发出要实现的功能到控制器,控制器接收组织功能传递给视图;`\n\n### 1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?\n\n- 按值传递：函数范围内对值的任何改变在函数外部都会被忽略\n\n- 按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改\n\n> 优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。\n按引用传递则不需要复制值，对于性能提高很有好处\n\n### 1.12 从一个标准url 里取出文件的扩展名\n例如: http://www.sina.com.cn/abc/de/fg.php?id=1 需要取出php 或.php\n\n```php\nfunction getExt($url){\n   $arr = parse_url($url);\n   $file = basename($arr['path']);\n   $ext = explode(\".\",$file);\n   return $ext[1];\n}\n```\n### 1.13 字符串反转\n```php\nfunction strrev($str){\n  $len = mb_strlen($str);\n  $tmp=[];\n  for ($i=0;$i<$len;$i++){\n      $tmp[] = mb_substr($str,$i,1);\n  }\n  krsort($tmp);\n  return implode('',$tmp);\n}\n```\n> strrev函数对英文很好用,直接可以实现字符串翻转,但是面对中文会出现乱码\n\n### 1.14 在HTTP 1.0中，状态码401 的含义是____；如果返回 \"找不到文件\" 的提示，则可用header函数，其语句为____。\n```\n答：401表示未授权; header(\"HTTP/1.0 404 Not Found\");\n[见参考手册》函数参考》HTTP函数》header]\n```\n\n### 1.15 isset、empty和is_null的区别?\n- isset 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。\n- empty 判断变量是否为空，如果变量是非空或非零的值，则empty() 返回 FALSE。换句话说，\"\" 、0 、\"0\"、NULL 、FALSE 、array() 、var $var; 以及没有任何属性的对象都将被认为是空的，如果变量为空，则返回TRUE。　　\n- is_null 判断变量是否为NULL\n\n### 1.16 self、static、$this 的区别?\n- self 和 __CLASS__，都是对当前类的ip静态引用，取决于定义当前方法所在的类。也就是说，self写在哪个类里面,它引用的就是谁。\n- $this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。\n- static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。\n- self可以用于访问类的静态属性、静态方法和常量，但self指向的是当前定义所在的类，这是 self 的限制。\n- $this 指向的对象所属的类和 static 指向的类相同。\n- static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。\n- 静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。\n\n### 1.17 单引号'与双引号\"区别\n  php里的单引号把内容当成纯文本，不会经过服务器翻译。而双引号则与此相反。里面的内容会经过服务器处理(process)；\n\n```php\n$foo=\"data\";\necho '$foo'; //单引号输出$foo\necho \"$foo\"; //双引号输出data\n```\n\n### 1.18 如果理解OOP？\nOOP(object oriented programming)，即面向对象编程，其中两个最重要的概念就是类和对象，类只是具备了某些功能和属性的抽象模型，而实际应用中需要一个一个实体，也就是需要对类进行实例化，类在实例化之后就是对象。\n\n#### (1) OOP具有三大特点：\n- 封装性：\n>将一个类的使用和实现分开,只保留部分接口和方法供外部使用，所以开发人员只需要关注这个类如何使用，而不用去关心其具体的实现过程。\n- 继承性：\n> 子类自动继承其父级类中的属性和方法,并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。 php只支持单继承，也就是说一个子类只能有一个父类。\n- 多态性：\n> 继承了来自父级类中的属性和方法，并对其中部分方法进行重写,于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。多态性增强了软件的灵活性。\n\n### 1.19 PHP缓存技术有哪些 ？\n- 全页面静态化缓存，也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程\n- 页面部分缓存，将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示\n- 数据缓存，通过一个id进行请求的数据,将数据缓存到一个php文件中,id和文件是对应的,下次通过这个id进行请求时 直接读php文件\n- 查询缓存，和数据缓存差不多,根据查询语句进行缓存;\n\n### 1.20 接口和抽象类的区别是什么？\n- 抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。\n- <font color=\"red\">抽象类是通过关键字 abstract 来声明的</font>。\n- 抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，\n- 抽象方法没有方法体，该方法天生就是要被子类重写的。\n- 抽象方法的格式为：abstract function abstractMethod();\n- 因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。\n- <font color=\"red\">接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public</font>，\n- 接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。\n- <font color=\"red\">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现</font>。\n- <font color=\"red\">子类继承抽象类使用extends，子类实现接口使用implements</font>。\n\n### 1.21 常见 HTTP 状态码，分别代表什么含义\n- 200:请求成功\n- 206:部分内容\n> 服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具，都是使用此类响应实现断点续传，或者将一个大文档分解为多个下载段同时下载。\n- 301:永久重定向\n- 302:临时重定向\n- 400:错误请求\n- 401:未经授权\n- 403:禁止访问\n- 404:文件未找到\n- 500:内部服务器错误\n- 502:无效网关\n\n### 1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\n\n#### 方法1：\n```php\n<?php\n/**\n * function：计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\n * param string $date1[格式如：2011-11-5]\n * param string $date2[格式如：2012-12-01]\n * return array array('年','月','日');\n */\nfunction diffDate($date1,$date2)\n{\n    $datetime1 = new \\DateTime($date1);\n    $datetime2 = new \\DateTime($date2);\n    $interval = $datetime1->diff($datetime2);\n    $time['y']         = $interval->format('%Y');\n    $time['m']         = $interval->format('%m');\n    $time['d']         = $interval->format('%d');\n    $time['h']         = $interval->format('%H');\n    $time['i']         = $interval->format('%i');\n    $time['s']         = $interval->format('%s');\n    return $time;\n}\n\n\n# 使用实例\n$sss = diffDate('2018-12-25 12:30:30', '2018-12-26 15:00:00');\nprint_r($sss);\n\n```\n输出结果：\n```\nArray\n(\n    [y] => 00\n    [m] => 0\n    [d] => 1\n    [h] => 02\n    [i] => 29\n    [s] => 30\n)\n\n```\n\n\n## 2、进阶\n### 2.1 yield 是什么，说个使用场景\n- yield是生成器函数的核心关键字，\n- 使用场景：协程可以用在，异步网络 IO 的时候，使其成为非阻塞的，\n\n[在PHP中使用协程实现多任务调度](http://www.laruence.com/2015/05/28/3038.html)\n\n### 2.2 session共享方案\n\n- 搭建redis集群或者memcached集群，用集群自带的同步方法来帮我们在不同的主机中同步session，这样就相当于把原来的一份session变成了N分session，session的同步就依赖于NoSql集群的同步了。\n\n- 单独设置一个session服务器，负载服务器得到一个sessionid过后，去session服务器获得会话状态，然后根据状态来响应用户请求，如果会话状态为空，则在session服务器中设置一个会话状态，然后返回给用户一个sessionid。\n\n### 2.3 php7.2 为什么弃用__autoload\n`自动加载的原理，就是在我们new一个class的时候，PHP系统如果找不到你这个类，就会去自动调用本文件中的__autoload($class_name)方法，我们new的这个class_name 就成为这个方法的参数。所以我们就可以在这个方法中根据我们需要new class_name的各种判断和划分就去require对应的路径类文件，从而实现自动加载。`\n\n**弃用原因**:因是PHP不允许函数重名，所以一个项目中仅能出现一个__autoload函数。自己写的代码保证只有一个__autoload函数虽然有点难但也能做到，要是第三方库也定义了__autoload，那就很头疼了。__autoload的后继者是[spl_autoload_register](http://php.net/manual/zh/function.spl-autoload-register.php)函数\n\n### 2.4 计算文件或数组中单词出现频率\n\n-  如果是小文件，可以一次性读入到数组中，使用方便的数组计数函数进行词频统计（假设文件中内容都是空格隔开的单词）：\n```php\n<?php\n $file = './test.txt';\n $str  = file_get_contents($file);\n preg_match_all(\"/\\b(\\w+[-]\\w+)|(\\w+)\\b/\", $str, $r);\n $words = array_count_values(array_map(\"strtolower\", $r[0]));\n arsort($words);\n var_dump($words);\n```\n- 如果是大文件，读入内存就不合适了，可以采用如下方法：\n```php\n<?php\n$file='./test.txt';\n$handle = fopen($file,'r');\n$words=[];\nwhile (($line = fgets($handle)) !== false){\n    //把换行符替换成空格\n    $line = str_replace([\"\\r\",\"\\n\",\"\\r\\n\"],' ',$line);\n    $tmp = explode(' ',$line);\n    $tmp = array_filter($tmp);\n    $words = array_merge($words,$tmp);\n}\n$words = array_count_values($words);\narsort($words);\nvar_dump($words);\nfclose($handle);\n        \n```\n[PHP对大文件的处理思路](https://www.cnblogs.com/Alight/p/3947591.html)\n\n\n\n\n## 3、数据库\n\n### 3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。 \n- MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持.\n- MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快.\n- InnoDB不支持FULLTEXT(全文索引) 类型的索引.\n- InnoDB 中不保存表的具体行数.\n> 也就是说执行 ：select count(*) from table时，\n   InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可.\n \n- 对于AUTO_INCREMENT(递增)类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。\n- DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。\n- Load Table From Master 操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用.\n- MyISAM支持表锁，InnoDB支持行锁。\n\n\n### 3.2 delete drop truncate区别\n```\n- truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。\n- 删除数据的速度，一般来说: drop> truncate > delete\n- delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚\n\n- 使用场合：\n  1.当你不再需要该表时， 用drop;\n  2.当你仍要保留该表，但要删除所有记录时， 用truncate;\n  3.当你要删除部分记录时（always with a where clause), 用 delete.\n```\n> 对于有主外键关系的表，不能使用truncate而应该使用不带where子句的delete语句，由于truncate不记录在日志中，不能够激活触发器\n\n### 3.3 优化MYSQL数据库的方法\n - 选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL,例如'省份,性别',最好设置为ENUM\n - 使用连接（JOIN）来代替子查询\n ``` \n  a.删除没有任何订单客户:\n  DELETE FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)\n  \n  b.提取所有没有订单客户:\n  SELECT FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)\n   \n  c.提高b的速度优化:\n  SELECT FROM customerinfo LEFT JOIN orderid customerinfo.customerid=orderinfo.customerid WHERE orderinfo.customerid IS NULL\n ```\n - 使用联合(UNION)来代替手动创建的临时表\n ``` \nSELECT name FROM `nametest` UNION SELECT username FROM `nametest2`\n ```\n - 事务处理\n >保证数据完整性,例如添加和修改同时,两者成立则都执行,一者失败都失败。\n \n - 锁定表,优化事务处理\n \n  `我们用一个 SELECT 语句取出初始数据，通过一些计算，用 UPDATE 语句将新值更新到表中。包含有 WRITE 关键字的 LOCK TABLE 语句可以保证在 UNLOCK TABLES 命令被执行之前，不会有其它的访问来对 inventory 进行插入、更新或者删除的操作.`\n ``` \nmysql_query(\"LOCK TABLE customerinfo READ, orderinfo WRITE\");\nmysql_query(\"SELECT customerid FROM `customerinfo` where id=\".$id);\nmysql_query(\"UPDATE `orderinfo` SET ordertitle='$title' where customerid=\".$id);\nmysql_query(\"UNLOCK TABLES\");\n ```\n - 建立索引\n [索引类型,请看3.7](https://mrliuqh.github.io/2017/09/17/php-interView-question/#3-7-索引类型)\n - 优化查询语句\n   - 避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n   - 避免全表扫描，首先应考虑在where及order by涉及的列上建立索引\n   - 避免在 where子句中对字段进行null值判断，会引起全表扫描\n   ``` \n   如：select id from test where num is null\n   ```\n   > <font color='red'>因此字段都应设置为NOT NULL，将来查询的时候就不用去比较NULL值</font>\n   \n   - 避免在where子句中使用or来连接条件，会引起全表扫描\n   `\n   如：select id from t where num=10 or num=20\n   可以这样查询：\n   select id from t where num=10 union all select id from t where num=20\n   `\n   - in 和 not in 也要慎用，否则会导致全表扫描\n   - 避免在 where 子句中对字段进行表达式操作\n\n   `如：select id from t where num/2=100\n   应改为：\n   select id from t where num =100*2`\n\n   - 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，一个表的索引数最好不要超过6个。\n   \n   - 任何地方都不要使用 select \\* from t ，用具体的字段列表代替“\\*”，不要返回用不到的任何字段。\n   \n   - 通过explain查询和分析SQL的执行计划\n ![image](https://mrliuqh.github.io/directionsImg/mysql/explain.png)\n \n \n ### 3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？\n ```  \n mysql_fetch_row()\n  返回的结果集是索引数组。\n mysql_fetch_assoc()\n   返回的结果集是关联数组\n mysql_fetch_array()\n  既可以返回索引数组也可以返回关联数组，\n  取决于它的第二个参数 MYSQL_BOTH MYSQL_NUM MYSQL_ASSOC 默认为MYSQL_BOTH\n \n ```\n \n ### 3.5 php访问数据库有哪几步?\n \n 1.连接数据库服务器：\n `mysql_connect('数据库服务器的主机名或ip','数据库服务器的用户名','数据库服务器的密码');\n ` \n 2.选择数据库：\n ` \n mysql_select_db(数据库名);\n `\n 3.设置从数据库提取数据的字符集：\n ` \n mysql_query(\"set names utf8\");\n `\n 4.执行sql语句：\n `\n mysql_query(sql语句);\n `\n 5.关闭结果集，释放资源：\n ` \n mysql_free_result($result);\n `\n 6.关闭与数据库服务器的连接：\n `\n mysql_close($link);\n `\n \n ### 3.6 表设计三大范式\n \n- 1．第一范式(原子性):所有字段值都是不可分解的原子值       \n- 2．第二范式(在第一范式的基础上):确保表中的每列都和主键相关，即一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中\n- 3．第三范式(在第二范式的基础上):确保每列都和主键列直接关联,而不是间接相关\n\n### 3.7 索引类型\n\n- 普通索引(index):\n`\n创建:\n  CREATE INDEX <索引名> ON tablename (索引字段)\n修改:\n  ALTER TABLE tablename ADD INDEX [索引名] (索引字段)\n创表指定索引:\n  CREATE TABLE tablename([...],INDEX[索引名](索引字段))\n`\n\n- 唯一索引(unique):\n<font color='red'>在普通索引的基础上，会进行排除重复值</font>\n`\n创建:\n  CREATE UNIQUE <索引名> ON tablename (索引字段)\n修改:\n  ALTER TABLE tablename ADD UNIQUE [索引名] (索引字段)\n创表指定索引:\n   CREATE TABLE tablename([...],UNIQUE[索引名](索引字段)) \n`\n\n- 主键(primary key):\n<font color='red'>和唯一索引的区别在于一个表里只能有一个主键索引，但是唯一索引可以有多个</font>\n``` \n 它是唯一索引,一般在创建表是建立\n 语法：\n  CREATA TABLE tablename ([...],PRIMARY KEY[索引字段])\n```\n\n- 联合索引:\n`\n语法：\nALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3 )\n`\n\n- 全文索引 (fulltext)\n\n#### 普通索引／唯一索引／主键索引 哪个速度更快？\n`\n速度是一样的快，因为三者都是采用btree二叉树算法进行查找。\n`\n\n### 3.8 索引算法\n- BTREE算法\n>Innodb和MyISAM默认的索引是BTREE索引\n 采用二叉树算法，左边的树枝小于根节点关键词，右边大于根节点，两边的树的深度不大于1，从而降低时间复杂度。\n \n- HASH算法\n>Mermory默认的索引是Hash索引\n Hash索引只能用于HASH值比较，例如=,<> 操作符，不像BTREE索引需要从根节点到枝节点，最后才能访问到页节点这样多次IO访问，所以检索效率远高于BTREE索引。\n \n#### <font>为什么不默认采用HASH索引呢？</font>\n> HASH只能用在=和<>上，所以功能受限，所以默认采用BTREE。\n\n\n### 3.9 insert 和 replace的区别\n`replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。`\n\n> <font color='red'>要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</font>\n\n- **MySQL replace into 有三种形式：**\n```\nreplace into tbl_name(col_name, ...) values(...)\n\nreplace into tbl_name(col_name, ...) select ...\n\nreplace into tbl_name set col_name=value, ...\n\n```\n\n>前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值\n\n\n### 3.10 数据库操作事务的四大特性\n#### 3.10.1 事务操作数据库的四大特性(ACID)\n\n- 原子性 (Atomicity):就是事务的所包含的所有操作，要么全部成功，要么全部失败回滚。\n- 一致性 (Consistency):简单来说就是在事务执行前和执行后，必须保持数据的一致。\n- 隔离性 (Isolation):一个事务执行的过程当中，不能被其他的事务干扰。\n  >比如有事务A和事务B，相对于A来说，B想要执行，要么在我执行之前执行，要么在我执行完毕之后，你再开始执行.\n \n- 持久性 (Durability):事务被提交之后，他就被永久的存储到了数据库当中.\n  \n#### 3.10.2 不考虑事务的隔离性所引发的问题\n- 脏读:一个事务读取到了一个未提交的事务的数据。\n- 不可重复读:\n>在读取数据库的某条数据的时候返回了不同的值，造成这个结果的原因是因为我们在查询了一次之后准备进行第二次查询的这个间隔之间，对我们要进行查询的这条数据进行了修改操作，从而导致两次读取的数据不一致。\n  \n> 脏读和不可重复读的区别:脏读是一个事务读取到了一个未提交事务的脏数据，而不可重复读是一个数据读取了一个已经提交了的事务的数据。\n  \n- 虚读(幻读)\n>出现幻读不是对一条数据的操作而产生的问题，而是操作多条数据产生的问题，例如：事务A想要对一张表中的某一字段的值进行修改，假设有一个字段的值全部为1，事务A现在想要将1全部修改为2，在提交事务之后，事务B接着又进行了一个操作，在这张表中添加了一个字段，值全部为1。那么这时候操作事务A的用户在查看的时候，会发现还有一行数据没有进行修改，其实这是事务B在他查看之前添加的。\n  \n> 幻读和不可重复读都是读取了一个已经提交的事务，而脏读是读取了一个未提交的事务。不同的是不可重复读查询的是同一条数据，而虚读查询的是批量数据。\n \n### 3.11  MySQL数据库的四种隔离级别\n- Serializable (序列化)：可避免脏读、不可重读读、幻读的发生\n- Repeatable-read (可重复读)：可避免脏读、不可重复读的发生。\n- Read-committed (读已提交)：可避免脏读的发生。\n- Read-uncommitted (读未提交)：最低级别，任何情况都无法保证。\n>以上四种的隔离级别最高的Serializable，最低的是Read uncommitted，级别越高，虽然安全级别越高，但是执行的效率就越低，MySQL中默认的隔离级别是:Repeatable read(可重复读)，oracle默认的隔离级别是：Read committed(读已提交)。\n  \n> <font color='red'>这里需要注意的是，mysql支持以上四种隔离级别，但是oracle只支持Serializable(串行化)和Read committed(读已提交)这两种隔离级别。</font>\n  \n- MySQL中查看当前的事务隔离界别\n```mysql\nselect @@tx_isolation\n```\n- 设置mysql的隔离级别\n```mysql\nset tx_isolation='read-uncommitted'\n```\n><font color='red'>记住:设置数据库的隔离级别一定要是在开启事务之前！</font>\n\n> 隔离级别的设置只对当前的链接有效。对于MySQL窗口来说，一个窗口就是一个链接，当前设置的事务隔离级别只对当前的窗口有效。\n  \n  \n## 4、缓存\n\n### 4.1 Memcache和Redis区别\n\n- **数据类型**：都是k/v数据库，但memcache只支持string，redis除了string，还支持list，set，hash等数据\n- **持久化**：memcache不支持内存持久化，redis支持。\n- **内存管理**：memcache内存用完时，会删除用得最少的缓存；redis内存用完时，会把最少的缓存交换到磁盘里。\n\n### 4.2 如何提高memcache的缓存命中率\n- 合理组合缓存 Key，保证Key最大复用率。\n- 合理设置过期时间，减少因为缓存数据过期后被穿透\n\n\n## 5、服务器\n\n\n### 5.1 Apache与Nginx的优缺点比较\n1、nginx相对于apache的优点：\n轻量级，比apache 占用更少的内存及资源。高度模块化的设计，编写模块相对简单抗并发，nginx处理请求是异步非阻塞，多个连接（万级别）可以对应一个进程，而apache 则是阻塞型的，是同步多进程模型，一个连接对应一个进程，在高并发下nginx 能保持低资源低消耗高性能。nginx处理静态文件好，Nginx 静态处理性能比 Apache 高 3倍以上\n2、apache 相对于nginx 的优点：\napache 的rewrite 比nginx 的rewrite 强大 ，模块非常多，基本想到的都可以找到 ，比较稳定，少bug ，nginx的bug相对较多\n3：Nginx比Apache快的原因：这得益于Nginx使用了最新的epoll（Linux 2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。\n\n>目前Linux下能够承受高并发访问的 Squid、Memcached都采用的是epoll网络I/O模型。 处理大量的连接的读写，Apache所采用的select网络I/O模型非常低效。\n### 5.2 fastcgi、cgi、php-fpm\n\n- fastcgi和cgi的区别\n`在web服务器方面在对数据进行处理的进程方面`:\na. cgi fork一个新的进程进行处理读取参数，处理数据，然后就结束生命期。\nb. fastcgi 用tcp方式跟远程机子上的进程或本地进程建立连接要开启tcp端口，进入循环，等待数据的到来，处理数据。\n\n- php-fpm的作用\n`那PHP-FPM又是什么呢？它是一个实现了Fastcgi协议的程序,用来管理Fastcgi起的进程的,即能够调度php-cgi进程的程序。现已在PHP内核中就集成了PHP-FPM，使用--enalbe-fpm这个编译参数即可。另外，修改了php.ini配置文件后，没办法平滑重启，需要重启php-fpm才可。此时新fork的worker会用新的配置，已经存在的worker继续处理完手上的活`\n\n> 举个例子: 服务端现在有个10万个字单词， 客户每次会发来一个字符串，问以这个字符串为前缀的单词有多少个。 那么可以写一个程序，这个程序会建一棵trie树，然后每次用户请求过来时可以直接到这个trie去查找。 但是如果以cgi的方式的话，这次请求结束后这课trie也就没了，等下次再启动该进程时，又要新建一棵trie树，这样的效率就太低下了。 而用fastcgi的方式的话，这课trie树在进程启动时建立，以后就可以直接在trie树上查询指定的前缀了\n\n\n### 5.3 为什么使用独立文件服务器？\n\n- 从服务器本身来说，单台的话会加大机器IO负载,多台(负载均衡)的话涉及到文件同步的问题\n- 浏览器对一个域名下的并发是有数量限制的，独立域名的文件服务器会加快响应\n- 防止域名污染，请求图片的时候是不用带上cookie\n    \n    \n## 6、算法\n\n### 6.1 写一个函数，算出两个文件的相对路径\n```php\n function countOppose(){\n   $arr1 = explode('/', $pathA);\n   $arr2 = explode('/', $pathB);\n   // 获取相同路径的部分\n   $intersection = array_intersect_assoc($arr1, $arr2);\n   $depth =count($intersection);\n   \n   // 将path2的/ 转为 ../，path1获取后面的部分，然后合拼\n   // 计算前缀\n   if (count($arr2) - $depth - 1 > 0) {\n       $prefix = array_fill(0, count($arr2) - $depth - 1, '..');\n   } else {\n       $prefix = array('.');\n   }\n\n   $tmp = array_merge($prefix, array_slice($arr1, $depth));\n   $relativePath = implode('/', $tmp);\n   return $relativePath;\n }\n```\n\n### 6.2 [php排序算法汇总](https://mrliuqh.github.io/2018/01/12/php-sort/)\n\n### 6.3 遍历一个文件夹下的所有文件和子文件夹\n\n```php\n\nfunction childForDir($dir)\n{\n    $files = [];\n    if (!is_dir($dir)) {\n        return $dir;\n    }\n    $handle = opendir($dir);\n    if (!$handle) {\n        return false;\n    }\n\n    //取出.和..\n    readdir($handle);\n    readdir($handle);\n   \n   //遍历剩余的文件和目录\n    while ($file = readdir($handle)) {\n        if (is_dir($file)) {\n            $files[$file] = $this->childForDir($file);\n        } else {\n            $files[] = $dir . '/' . $file;\n        }\n    }\n    closedir($handle);\n    return $files;\n}\n```\n\n### 6.4 猴子选大王\n 一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停 的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。\n\n```php\n<?php\nfunction monkeyKingNum($allNum, $m){\n  $arr = range(1,$allNum);\n  $num = 1;\n  while(count($arr) > 1){\n      foreach ($arr as $key => $value) {\n          if($num == $m){\n              unset($arr[$key]);\n              $num = 1;\n          }else{\n              $num++;\n          }\n      }\n  }\n  $monkeyKingNum = array_values($arr)[0];\n  return $monkeyKingNum;\n}\nmonkeyKingNum(10,10);\n```\n### 6.5 二分查找\n`二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好;其缺点是要求待查表为有序表，且插入删除困难。\n 因此，折半查找方法适用于不经常变动而查找频繁的有序列表。`\n\n```php\n\n<?php\n/**\n * @param $data //待查找的元素数组\n * @param $min //开始元素的下标\n * @param $max //结束元素的下标\n * @param $k //待查找的元素\n * @return bool\n */\nfunction binarySearch($data,$min,$max,$k){\n    if ($min <= $max){\n        //计算中间的元素下标\n        $mid = intval(($min +$max)/2);\n        if ($data[$mid] == $k){\n            //如果相等,则找到\n            return $mid;\n        } else if ($k < $data[$mid]){\n            //元素下标在前面一部分\n            return binarySearch($data, $min, $mid-1, $k);\n        } else {\n            //元素下标在后面一部分\n            return binarySearch($data, $mid+1, $max, $k);\n        }\n    }\n    return false;\n}\n\n```\n\n\n## 7、设计模式\n\n### 7.1单例模式（三私一公）\n>单例模式的用途,是对系统资源的节省, 可以避免重复实例化,而PHP每次执行完都会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的, 这样就失去了单例重复实例化的意义了. 单单从这个方面来说, PHP的单例的确有点让各位失望. \n \n \n>但是php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时(废话), 如果使用单例模式, 则可以避免大量的new 操作消耗的资源。\n\n\n\n```php\n class Test{\n     //私有化后在类内部保存对象并且防止外部访问到\n     private static $obj=null;\n     \n     //私有化后防止在外部创建新的对象\n     private function __construct() {\n     }\n     \n     //公有并且静态方法在类外面可以通过类名直接访问\n     public static function getInstance(){\n         if(self::$obj==null)\n             self::$obj=new self();\n         return self::$obj;\n     }\n     \n     //私有化克隆执行的方法,防止在外部被克隆\n     private function __clone(){\n     }\n }\n```\n\n### 7.2工厂模式\n工厂模式具体可分为四类：简单工厂，工厂方法，抽象工厂、静态工厂；\n\n\n>简单工厂模式:静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同,返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。。\n\n\n示例代码：\n```php\n<?php\n//简单工厂模式\nclass Cat\n{\n  function __construct()\n  {\n      echo \"I am Cat class <br>\";\n  }\n}\nclass Dog\n{\n  function __construct()\n  {\n      echo \"I am Dog class <br>\";\n  }\n}\nclass Factory\n{\n  public static function CreateAnimal($name){\n      if ($name == 'cat') {\n          return new Cat();\n      } elseif ($name == 'dog') {\n          return new Dog();\n      }\n  }\n}\n\n$cat = Factory::CreateAnimal('cat');\n$dog = Factory::CreateAnimal('dog');\n?>\n```\n> <font color=red>IUser 接口定义用户对象应执行什么操作。IUser 的实现称为 User，UserFactory 工厂类则创建 IUser 对象 </font>\n\n\n- [工厂方法，查看详情](https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/FactoryMethod/README.html)\n\n- [抽象工厂，查看详情](https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/AbstractFactory/README.html)\n\n- [静态工厂，查看详情](https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/StaticFactory/README.html)\n\n### 7.3 建造者模式（生成器模式）\n又名：生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。\n\n>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。例如，一辆汽车由轮子，发动机以及其他零件组成，对于普通人而言，我们使用的只是一辆完整的车，这时，我们需要加入一个构造者，让他帮我们把这些组件按序组装成为一辆完整的车\n\n- Builder：抽象构造者类，为创建一个Product对象的各个部件指定抽象接口。\n- ConcreteBuilder：具体构造者类，实现Builder的接口以构造和装配该产品的各个部件。定义并明确它所创建的表示。提供一个检索产品的接口\n- Director：指挥者，构造一个使用Builder接口的对象。\n- Product：表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。\n\n\n **示例代码**：\n```php\n\n<?php \nabstract class Builder\n{\n  protected $car;\n  abstract public function buildPartA();\n  abstract public function buildPartB();\n  abstract public function buildPartC();\n  abstract public function getResult();\n}\nclass CarBuilder extends Builder\n{\n  function __construct()\n  {\n      $this->car = new Car();\n  }\n  public function buildPartA(){\n      $this->car->setPartA('发动机');\n  }\n  public function buildPartB(){\n      $this->car->setPartB('轮子');\n  }\n  public function buildPartC(){\n      $this->car->setPartC('其他零件');\n  }\n  public function getResult(){\n      return $this->car;\n  }\n}\nclass Car\n{\n  protected $partA;\n  protected $partB;\n  protected $partC;\n  public function setPartA($str){\n      $this->partA = $str;\n  }\n  public function setPartB($str){\n      $this->partB = $str;\n  }\n  public function setPartC($str){\n      $this->partC = $str;\n  }\n  public function show()\n  {\n      echo \"这辆车由：\".$this->partA.','.$this->partB.',和'.$this->partC.'组成';\n  }\n}\nclass Director\n{\n  public $myBuilder;\n\n  public function startBuild()\n  {\n      $this->myBuilder->buildPartA();\n      $this->myBuilder->buildPartB();\n      $this->myBuilder->buildPartC();\n      return $this->myBuilder->getResult();\n  }\n\n  public function setBuilder(Builder $builder)\n  {\n      $this->myBuilder = $builder;\n  }\n}\n$carBuilder = new CarBuilder();\n$director = new Director();\n$director->setBuilder($carBuilder);\n$newCar = $director->startBuild();\n$newCar->show();\n```\n\n\n## 8、数据结构\n### 8.1 堆、栈、队列的区别\n- 堆\n\n**堆中主要存放用new构造的对象和数组**\n\n优势：可以动态的分配内存的大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的。\n缺点：由于要在运行时动态分配内存，存取速度比较慢\n\n\n- 栈\n\n**栈中主要存放一些基本类型的变量和对象引用类型。**\n优势：存取速度比较快，仅次于寄存器，栈数据可以共享。\n缺点：栈中的数据大小和生存周期必须是确定的，缺乏灵活性。\n\n\n- 队列\n\n**设计程序中常用的一种数据结构，采用“先进先出”的存储结构，类似于队列。**\n\n数据元素只能从队尾进入，从队首取出。在此队列中，数据元素可以随意增减，\n但是数据元素的次序不会更改。每次都是取出队首的元素，后面的元素会整体向前移动一位。队列遍历数据的速度要快的多\n\n\n\n### 8.2 什么是哈希表？\n`哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。`\n\n`哈希表hashtable(key，value) 的做法其实很简单，就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。\n     而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位\n`\n\n\n\n\n## 附加1、扩展\n\n### 1. 写代码来解决多进程/线程同时读写一个文件的问题\n```php\nfunction write(){\n    //打开文件\n\t$file = fopen('flock.text','w+');\n\tif(!$file){\n\t  return 'the file not exist!';\n\t}\n\t//获取锁\n\tif (flock(file,LOCK_EX)){\n       //todo \n       fwrite(file,'do some things');\n       //释放锁\n       flock(file,LOCK_UN);\n\t} else {\n      return 'the file is write...';\n\t}\n\t//关闭文件\n\tfclose(file);\n}\n```\n\n\n### 2. 什么是写时复制\n>  **写时复制（Copy on Write，也缩写为COW)的应用场景非常多， 比如Linux中对进程复制中内存使用的优化，在各种编程语言中，如C++的STL等等中均有类似的应用。 COW是常用的优化手段，可以归类于：资源延迟分配。只有在真正需要使用资源时才占用资源， 写时复制通常能减少资源的占用。**\n\n在开始之前，我们可以先看一段简单的代码：\n\n```php\n<?php   //例一\n    $foo = 1;\n    $bar = $foo;\n    echo $foo + $bar;\n?>\n```\n> 执行这段代码，会打印出数字2。从内存的角度来分析一下这段代码“可能”是这样执行的： 分配一块内存给foo变量，里面存储一个1； 再分配一块内存给bar变量，也存一个1，最后计算出结果输出。 事实上，我们发现foo和bar变量因为值相同，完全可以使用同一块内存，这样，内存的使用就节省了一个1， 并且，还省去了分配内存和管理内存地址的计算开销。 没错，很多涉及到内存管理的系统，都实现了这种相同值共享内存的策略：写时复制\n\n[详情参考](http://www.php-internals.com/book/?p=chapt06/06-06-copy-on-write)\n\n### 3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?\n``` \n输出的结果为：7 \n```\n>关于浮点数精度的警告\n 显然简单的十进制分数如同 0.1 或 0.7 不能在不丢失一点点精度的情况下转换为内部二进制的格式，这就会造成混乱的结果。例如，floor((0.1+0.7)*10) 通常会返回 7 而不是预期中的 8，因为该结果内部的表示其实是类似 7.9。\n \n>注意：永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等\n\n\n\n\n## 附加2、面试题链接\n- https://github.com/hookover/php-engineer-interview-questions\n- https://www.kancloud.cn/pingfan_/php_interview/916716\n- https://www.kancloud.cn/i281151/php_questions/174233\n- https://www.kancloud.cn/tp5girl/interview/329075\n- https://github.com/wudi/PHP-Interview-Best-Practices-in-China\n- https://my.oschina.net/anyeshe/blog/1550238\n- https://www.jianshu.com/p/ac5cad6d64a8\n- https://www.zhaoyafei.cn/content.html?id=150846575347\n- https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html\n- https://segmentfault.com/a/1190000010262869#articleHeader9","source":"_posts/php-interView-question.md","raw":"---\ntitle: php 面试题\ndate: 2017-09-17 11:12:02\ntags:\n - php\ncategories:\n - 面试题\n---\n\n## 1、基础\n\n\n### 1.1 cookie与session的区别\n- 存储位置：session存储于服务器，cookie存储于浏览器\n- 安全性：session安全性比cookie高\n- session为‘会话服务’，在使用时需要开启服务，cookie不需要开启，可以直接用\n<!--more-->\n\n### 1.2 禁用 cookie 后 session 还能用吗?\n\n可以,通过URL传值或者隐藏表单传递Session ID (常用)。\n\n**Session和cookie的工作流程：**\n1. 你第一次访问网站时，\n \n2. 服务端脚本中开启了session_start();，\n \n3. 服务器会生成一个不重复的 SESSIONID 的文件session_id();，比如在/var/lib/php/session目录\n \n4. 并将返回(Response)如下的HTTP头 Set-Cookie:PHPSESSIONID=xxxxxxx\n \n5. 客户端接收到`Set-Cookie`的头，将PHPSESSIONID写入cookie\n \n6. 当你第二次访问页面时，所有Cookie会附带的请求头(Request)发送给服务器端\n \n7. 服务器识别PHPSESSIONID这个cookie，然后去session目录查找对应session文件，\n \n8. 找到这个session文件后，检查是否过期，如果没有过期，去读取Session文件中的配置；如果已经过期，清空其中的配置\n\n### 1.3 表单中get与post提交方法的区别\n```\n参数接收：\n get：通过url参数传递进行接收,\n post：是实体数据,可以通过表单提交大量信息.\n```\n\n### 1.4 数据库中的事务是什么\n\n- 事务（transaction）是作为一个单元的一组有序的数据库操作。\n如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。\n如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。\n如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消\n\n\n### 1.5 echo(),print(),print_r()的区别 \n\n- echo是PHP语句, print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)\n\n- print() 只能打印出简单类型变量的值(如int,string)\n\n- print_r() 可以打印出复杂类型变量的值(如数组,对象)\n\n- echo 输出一个或者多个字符串\n\n\n\n### 1.6 用PHP写出显示客户端IP与服务器IP的代码\n\n- 打印客户端IP:echo $_SERVER['REMOTE_ADDR']; 或者: getenv('REMOTE_ADDR');\n\n- 打印服务器IP:echo gethostbyname(\"www.bolaiwu.com\")\n\n\n### 1.7 include和require的区别是什么?\n\n- require:是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require\n\n- include:有返回值，而require没有(可能因为如此require的速度比include快)\n\n><front color='red'>注意:包含文件不存在或者语法错误的时候,require是致命的,include不是</front>\n\n\n\n### 1.8 Trait是什么?\nTrait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题\n\n单个Trait使用方法：\n```php\n<?php\ntrait ezcReflectionReturnInfo {\n    function getReturnType() { /*1*/ }\n    function getReturnDescription() { /*2*/ }\n}\n\nclass ezcReflectionMethod extends ReflectionMethod {\n    use ezcReflectionReturnInfo;\n    /* ... */\n}\n\nclass ezcReflectionFunction extends ReflectionFunction {\n    use ezcReflectionReturnInfo;\n    /* ... */\n}\n?>\n```\n多个Trait使用方法\n```php\n<?php\ntrait Hello {\n    public function sayHello() {\n        echo 'Hello ';\n    }\n}\n\ntrait World {\n    public function sayWorld() {\n        echo 'World';\n    }\n}\n\nclass MyHelloWorld {\n    use Hello, World;\n    public function sayExclamationMark() {\n        echo '!';\n    }\n}\n\n$o = new MyHelloWorld();\n$o->sayHello();\n$o->sayWorld();\n$o->sayExclamationMark();\n?>\n\n```\n\n\n### 1.9 php7和php5区别\n\n**1.PHP7.0 比PHP5.6性能提升了两倍**。\n1). 变量存储字节减小，减少内存占用，提升变量操作速度\n\n2). 改善数组结构，数组元素和hash映射表被分配在同一块内存里，降低了内存占用、提升了 cpu 缓存命中率\n\n3). 改进了函数的调用机制，通过优化参数传递的环节，减少了一些指令，提高执行效率\n\n**2.PHP7.0全面一致支持64位。**\n\n**3.PHP7.0之前出现的致命错误，都改成了抛出异常。**\n\n**4.增加了空结合操作符（？？）。效果相当于三元运算符。**\n\n**5.PHP7.0新增了函数的返回类型声明。**\n\n**6.PHP7.0新增了标量类型声明。**\n`PHP 7 中的函数的形参类型声明可以是标量。在 PHP 5 中只可以是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。`\n\n\n**7.新增加了匿名类。**\n\n`PHP 5.3 开始有了匿名函数，现在又新增了匿名类；`\n\n**8.PHP7.0之后溢移除了一些老的不再支持的SAPI(服务器端应用编程端口)和扩展。**\n``` \n ereg\n    \n mssql\n    \n mysql\n    \n sybase_ct\n```\n    \n\n**9.define 现在可以定义常量数组。**\n\n\n### 1.10 谈谈对mvc的认识\n`模型(model),视图(view),控制器(controller);\n由模型发出要实现的功能到控制器,控制器接收组织功能传递给视图;`\n\n### 1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?\n\n- 按值传递：函数范围内对值的任何改变在函数外部都会被忽略\n\n- 按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改\n\n> 优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。\n按引用传递则不需要复制值，对于性能提高很有好处\n\n### 1.12 从一个标准url 里取出文件的扩展名\n例如: http://www.sina.com.cn/abc/de/fg.php?id=1 需要取出php 或.php\n\n```php\nfunction getExt($url){\n   $arr = parse_url($url);\n   $file = basename($arr['path']);\n   $ext = explode(\".\",$file);\n   return $ext[1];\n}\n```\n### 1.13 字符串反转\n```php\nfunction strrev($str){\n  $len = mb_strlen($str);\n  $tmp=[];\n  for ($i=0;$i<$len;$i++){\n      $tmp[] = mb_substr($str,$i,1);\n  }\n  krsort($tmp);\n  return implode('',$tmp);\n}\n```\n> strrev函数对英文很好用,直接可以实现字符串翻转,但是面对中文会出现乱码\n\n### 1.14 在HTTP 1.0中，状态码401 的含义是____；如果返回 \"找不到文件\" 的提示，则可用header函数，其语句为____。\n```\n答：401表示未授权; header(\"HTTP/1.0 404 Not Found\");\n[见参考手册》函数参考》HTTP函数》header]\n```\n\n### 1.15 isset、empty和is_null的区别?\n- isset 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。\n- empty 判断变量是否为空，如果变量是非空或非零的值，则empty() 返回 FALSE。换句话说，\"\" 、0 、\"0\"、NULL 、FALSE 、array() 、var $var; 以及没有任何属性的对象都将被认为是空的，如果变量为空，则返回TRUE。　　\n- is_null 判断变量是否为NULL\n\n### 1.16 self、static、$this 的区别?\n- self 和 __CLASS__，都是对当前类的ip静态引用，取决于定义当前方法所在的类。也就是说，self写在哪个类里面,它引用的就是谁。\n- $this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。\n- static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。\n- self可以用于访问类的静态属性、静态方法和常量，但self指向的是当前定义所在的类，这是 self 的限制。\n- $this 指向的对象所属的类和 static 指向的类相同。\n- static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。\n- 静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。\n\n### 1.17 单引号'与双引号\"区别\n  php里的单引号把内容当成纯文本，不会经过服务器翻译。而双引号则与此相反。里面的内容会经过服务器处理(process)；\n\n```php\n$foo=\"data\";\necho '$foo'; //单引号输出$foo\necho \"$foo\"; //双引号输出data\n```\n\n### 1.18 如果理解OOP？\nOOP(object oriented programming)，即面向对象编程，其中两个最重要的概念就是类和对象，类只是具备了某些功能和属性的抽象模型，而实际应用中需要一个一个实体，也就是需要对类进行实例化，类在实例化之后就是对象。\n\n#### (1) OOP具有三大特点：\n- 封装性：\n>将一个类的使用和实现分开,只保留部分接口和方法供外部使用，所以开发人员只需要关注这个类如何使用，而不用去关心其具体的实现过程。\n- 继承性：\n> 子类自动继承其父级类中的属性和方法,并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。 php只支持单继承，也就是说一个子类只能有一个父类。\n- 多态性：\n> 继承了来自父级类中的属性和方法，并对其中部分方法进行重写,于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。多态性增强了软件的灵活性。\n\n### 1.19 PHP缓存技术有哪些 ？\n- 全页面静态化缓存，也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程\n- 页面部分缓存，将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示\n- 数据缓存，通过一个id进行请求的数据,将数据缓存到一个php文件中,id和文件是对应的,下次通过这个id进行请求时 直接读php文件\n- 查询缓存，和数据缓存差不多,根据查询语句进行缓存;\n\n### 1.20 接口和抽象类的区别是什么？\n- 抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。\n- <font color=\"red\">抽象类是通过关键字 abstract 来声明的</font>。\n- 抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，\n- 抽象方法没有方法体，该方法天生就是要被子类重写的。\n- 抽象方法的格式为：abstract function abstractMethod();\n- 因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。\n- <font color=\"red\">接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public</font>，\n- 接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。\n- <font color=\"red\">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现</font>。\n- <font color=\"red\">子类继承抽象类使用extends，子类实现接口使用implements</font>。\n\n### 1.21 常见 HTTP 状态码，分别代表什么含义\n- 200:请求成功\n- 206:部分内容\n> 服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具，都是使用此类响应实现断点续传，或者将一个大文档分解为多个下载段同时下载。\n- 301:永久重定向\n- 302:临时重定向\n- 400:错误请求\n- 401:未经授权\n- 403:禁止访问\n- 404:文件未找到\n- 500:内部服务器错误\n- 502:无效网关\n\n### 1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\n\n#### 方法1：\n```php\n<?php\n/**\n * function：计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\n * param string $date1[格式如：2011-11-5]\n * param string $date2[格式如：2012-12-01]\n * return array array('年','月','日');\n */\nfunction diffDate($date1,$date2)\n{\n    $datetime1 = new \\DateTime($date1);\n    $datetime2 = new \\DateTime($date2);\n    $interval = $datetime1->diff($datetime2);\n    $time['y']         = $interval->format('%Y');\n    $time['m']         = $interval->format('%m');\n    $time['d']         = $interval->format('%d');\n    $time['h']         = $interval->format('%H');\n    $time['i']         = $interval->format('%i');\n    $time['s']         = $interval->format('%s');\n    return $time;\n}\n\n\n# 使用实例\n$sss = diffDate('2018-12-25 12:30:30', '2018-12-26 15:00:00');\nprint_r($sss);\n\n```\n输出结果：\n```\nArray\n(\n    [y] => 00\n    [m] => 0\n    [d] => 1\n    [h] => 02\n    [i] => 29\n    [s] => 30\n)\n\n```\n\n\n## 2、进阶\n### 2.1 yield 是什么，说个使用场景\n- yield是生成器函数的核心关键字，\n- 使用场景：协程可以用在，异步网络 IO 的时候，使其成为非阻塞的，\n\n[在PHP中使用协程实现多任务调度](http://www.laruence.com/2015/05/28/3038.html)\n\n### 2.2 session共享方案\n\n- 搭建redis集群或者memcached集群，用集群自带的同步方法来帮我们在不同的主机中同步session，这样就相当于把原来的一份session变成了N分session，session的同步就依赖于NoSql集群的同步了。\n\n- 单独设置一个session服务器，负载服务器得到一个sessionid过后，去session服务器获得会话状态，然后根据状态来响应用户请求，如果会话状态为空，则在session服务器中设置一个会话状态，然后返回给用户一个sessionid。\n\n### 2.3 php7.2 为什么弃用__autoload\n`自动加载的原理，就是在我们new一个class的时候，PHP系统如果找不到你这个类，就会去自动调用本文件中的__autoload($class_name)方法，我们new的这个class_name 就成为这个方法的参数。所以我们就可以在这个方法中根据我们需要new class_name的各种判断和划分就去require对应的路径类文件，从而实现自动加载。`\n\n**弃用原因**:因是PHP不允许函数重名，所以一个项目中仅能出现一个__autoload函数。自己写的代码保证只有一个__autoload函数虽然有点难但也能做到，要是第三方库也定义了__autoload，那就很头疼了。__autoload的后继者是[spl_autoload_register](http://php.net/manual/zh/function.spl-autoload-register.php)函数\n\n### 2.4 计算文件或数组中单词出现频率\n\n-  如果是小文件，可以一次性读入到数组中，使用方便的数组计数函数进行词频统计（假设文件中内容都是空格隔开的单词）：\n```php\n<?php\n $file = './test.txt';\n $str  = file_get_contents($file);\n preg_match_all(\"/\\b(\\w+[-]\\w+)|(\\w+)\\b/\", $str, $r);\n $words = array_count_values(array_map(\"strtolower\", $r[0]));\n arsort($words);\n var_dump($words);\n```\n- 如果是大文件，读入内存就不合适了，可以采用如下方法：\n```php\n<?php\n$file='./test.txt';\n$handle = fopen($file,'r');\n$words=[];\nwhile (($line = fgets($handle)) !== false){\n    //把换行符替换成空格\n    $line = str_replace([\"\\r\",\"\\n\",\"\\r\\n\"],' ',$line);\n    $tmp = explode(' ',$line);\n    $tmp = array_filter($tmp);\n    $words = array_merge($words,$tmp);\n}\n$words = array_count_values($words);\narsort($words);\nvar_dump($words);\nfclose($handle);\n        \n```\n[PHP对大文件的处理思路](https://www.cnblogs.com/Alight/p/3947591.html)\n\n\n\n\n## 3、数据库\n\n### 3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。 \n- MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持.\n- MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快.\n- InnoDB不支持FULLTEXT(全文索引) 类型的索引.\n- InnoDB 中不保存表的具体行数.\n> 也就是说执行 ：select count(*) from table时，\n   InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可.\n \n- 对于AUTO_INCREMENT(递增)类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。\n- DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。\n- Load Table From Master 操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用.\n- MyISAM支持表锁，InnoDB支持行锁。\n\n\n### 3.2 delete drop truncate区别\n```\n- truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。\n- 删除数据的速度，一般来说: drop> truncate > delete\n- delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚\n\n- 使用场合：\n  1.当你不再需要该表时， 用drop;\n  2.当你仍要保留该表，但要删除所有记录时， 用truncate;\n  3.当你要删除部分记录时（always with a where clause), 用 delete.\n```\n> 对于有主外键关系的表，不能使用truncate而应该使用不带where子句的delete语句，由于truncate不记录在日志中，不能够激活触发器\n\n### 3.3 优化MYSQL数据库的方法\n - 选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL,例如'省份,性别',最好设置为ENUM\n - 使用连接（JOIN）来代替子查询\n ``` \n  a.删除没有任何订单客户:\n  DELETE FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)\n  \n  b.提取所有没有订单客户:\n  SELECT FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)\n   \n  c.提高b的速度优化:\n  SELECT FROM customerinfo LEFT JOIN orderid customerinfo.customerid=orderinfo.customerid WHERE orderinfo.customerid IS NULL\n ```\n - 使用联合(UNION)来代替手动创建的临时表\n ``` \nSELECT name FROM `nametest` UNION SELECT username FROM `nametest2`\n ```\n - 事务处理\n >保证数据完整性,例如添加和修改同时,两者成立则都执行,一者失败都失败。\n \n - 锁定表,优化事务处理\n \n  `我们用一个 SELECT 语句取出初始数据，通过一些计算，用 UPDATE 语句将新值更新到表中。包含有 WRITE 关键字的 LOCK TABLE 语句可以保证在 UNLOCK TABLES 命令被执行之前，不会有其它的访问来对 inventory 进行插入、更新或者删除的操作.`\n ``` \nmysql_query(\"LOCK TABLE customerinfo READ, orderinfo WRITE\");\nmysql_query(\"SELECT customerid FROM `customerinfo` where id=\".$id);\nmysql_query(\"UPDATE `orderinfo` SET ordertitle='$title' where customerid=\".$id);\nmysql_query(\"UNLOCK TABLES\");\n ```\n - 建立索引\n [索引类型,请看3.7](https://mrliuqh.github.io/2017/09/17/php-interView-question/#3-7-索引类型)\n - 优化查询语句\n   - 避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n   - 避免全表扫描，首先应考虑在where及order by涉及的列上建立索引\n   - 避免在 where子句中对字段进行null值判断，会引起全表扫描\n   ``` \n   如：select id from test where num is null\n   ```\n   > <font color='red'>因此字段都应设置为NOT NULL，将来查询的时候就不用去比较NULL值</font>\n   \n   - 避免在where子句中使用or来连接条件，会引起全表扫描\n   `\n   如：select id from t where num=10 or num=20\n   可以这样查询：\n   select id from t where num=10 union all select id from t where num=20\n   `\n   - in 和 not in 也要慎用，否则会导致全表扫描\n   - 避免在 where 子句中对字段进行表达式操作\n\n   `如：select id from t where num/2=100\n   应改为：\n   select id from t where num =100*2`\n\n   - 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，一个表的索引数最好不要超过6个。\n   \n   - 任何地方都不要使用 select \\* from t ，用具体的字段列表代替“\\*”，不要返回用不到的任何字段。\n   \n   - 通过explain查询和分析SQL的执行计划\n ![image](https://mrliuqh.github.io/directionsImg/mysql/explain.png)\n \n \n ### 3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？\n ```  \n mysql_fetch_row()\n  返回的结果集是索引数组。\n mysql_fetch_assoc()\n   返回的结果集是关联数组\n mysql_fetch_array()\n  既可以返回索引数组也可以返回关联数组，\n  取决于它的第二个参数 MYSQL_BOTH MYSQL_NUM MYSQL_ASSOC 默认为MYSQL_BOTH\n \n ```\n \n ### 3.5 php访问数据库有哪几步?\n \n 1.连接数据库服务器：\n `mysql_connect('数据库服务器的主机名或ip','数据库服务器的用户名','数据库服务器的密码');\n ` \n 2.选择数据库：\n ` \n mysql_select_db(数据库名);\n `\n 3.设置从数据库提取数据的字符集：\n ` \n mysql_query(\"set names utf8\");\n `\n 4.执行sql语句：\n `\n mysql_query(sql语句);\n `\n 5.关闭结果集，释放资源：\n ` \n mysql_free_result($result);\n `\n 6.关闭与数据库服务器的连接：\n `\n mysql_close($link);\n `\n \n ### 3.6 表设计三大范式\n \n- 1．第一范式(原子性):所有字段值都是不可分解的原子值       \n- 2．第二范式(在第一范式的基础上):确保表中的每列都和主键相关，即一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中\n- 3．第三范式(在第二范式的基础上):确保每列都和主键列直接关联,而不是间接相关\n\n### 3.7 索引类型\n\n- 普通索引(index):\n`\n创建:\n  CREATE INDEX <索引名> ON tablename (索引字段)\n修改:\n  ALTER TABLE tablename ADD INDEX [索引名] (索引字段)\n创表指定索引:\n  CREATE TABLE tablename([...],INDEX[索引名](索引字段))\n`\n\n- 唯一索引(unique):\n<font color='red'>在普通索引的基础上，会进行排除重复值</font>\n`\n创建:\n  CREATE UNIQUE <索引名> ON tablename (索引字段)\n修改:\n  ALTER TABLE tablename ADD UNIQUE [索引名] (索引字段)\n创表指定索引:\n   CREATE TABLE tablename([...],UNIQUE[索引名](索引字段)) \n`\n\n- 主键(primary key):\n<font color='red'>和唯一索引的区别在于一个表里只能有一个主键索引，但是唯一索引可以有多个</font>\n``` \n 它是唯一索引,一般在创建表是建立\n 语法：\n  CREATA TABLE tablename ([...],PRIMARY KEY[索引字段])\n```\n\n- 联合索引:\n`\n语法：\nALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3 )\n`\n\n- 全文索引 (fulltext)\n\n#### 普通索引／唯一索引／主键索引 哪个速度更快？\n`\n速度是一样的快，因为三者都是采用btree二叉树算法进行查找。\n`\n\n### 3.8 索引算法\n- BTREE算法\n>Innodb和MyISAM默认的索引是BTREE索引\n 采用二叉树算法，左边的树枝小于根节点关键词，右边大于根节点，两边的树的深度不大于1，从而降低时间复杂度。\n \n- HASH算法\n>Mermory默认的索引是Hash索引\n Hash索引只能用于HASH值比较，例如=,<> 操作符，不像BTREE索引需要从根节点到枝节点，最后才能访问到页节点这样多次IO访问，所以检索效率远高于BTREE索引。\n \n#### <font>为什么不默认采用HASH索引呢？</font>\n> HASH只能用在=和<>上，所以功能受限，所以默认采用BTREE。\n\n\n### 3.9 insert 和 replace的区别\n`replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。`\n\n> <font color='red'>要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</font>\n\n- **MySQL replace into 有三种形式：**\n```\nreplace into tbl_name(col_name, ...) values(...)\n\nreplace into tbl_name(col_name, ...) select ...\n\nreplace into tbl_name set col_name=value, ...\n\n```\n\n>前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值\n\n\n### 3.10 数据库操作事务的四大特性\n#### 3.10.1 事务操作数据库的四大特性(ACID)\n\n- 原子性 (Atomicity):就是事务的所包含的所有操作，要么全部成功，要么全部失败回滚。\n- 一致性 (Consistency):简单来说就是在事务执行前和执行后，必须保持数据的一致。\n- 隔离性 (Isolation):一个事务执行的过程当中，不能被其他的事务干扰。\n  >比如有事务A和事务B，相对于A来说，B想要执行，要么在我执行之前执行，要么在我执行完毕之后，你再开始执行.\n \n- 持久性 (Durability):事务被提交之后，他就被永久的存储到了数据库当中.\n  \n#### 3.10.2 不考虑事务的隔离性所引发的问题\n- 脏读:一个事务读取到了一个未提交的事务的数据。\n- 不可重复读:\n>在读取数据库的某条数据的时候返回了不同的值，造成这个结果的原因是因为我们在查询了一次之后准备进行第二次查询的这个间隔之间，对我们要进行查询的这条数据进行了修改操作，从而导致两次读取的数据不一致。\n  \n> 脏读和不可重复读的区别:脏读是一个事务读取到了一个未提交事务的脏数据，而不可重复读是一个数据读取了一个已经提交了的事务的数据。\n  \n- 虚读(幻读)\n>出现幻读不是对一条数据的操作而产生的问题，而是操作多条数据产生的问题，例如：事务A想要对一张表中的某一字段的值进行修改，假设有一个字段的值全部为1，事务A现在想要将1全部修改为2，在提交事务之后，事务B接着又进行了一个操作，在这张表中添加了一个字段，值全部为1。那么这时候操作事务A的用户在查看的时候，会发现还有一行数据没有进行修改，其实这是事务B在他查看之前添加的。\n  \n> 幻读和不可重复读都是读取了一个已经提交的事务，而脏读是读取了一个未提交的事务。不同的是不可重复读查询的是同一条数据，而虚读查询的是批量数据。\n \n### 3.11  MySQL数据库的四种隔离级别\n- Serializable (序列化)：可避免脏读、不可重读读、幻读的发生\n- Repeatable-read (可重复读)：可避免脏读、不可重复读的发生。\n- Read-committed (读已提交)：可避免脏读的发生。\n- Read-uncommitted (读未提交)：最低级别，任何情况都无法保证。\n>以上四种的隔离级别最高的Serializable，最低的是Read uncommitted，级别越高，虽然安全级别越高，但是执行的效率就越低，MySQL中默认的隔离级别是:Repeatable read(可重复读)，oracle默认的隔离级别是：Read committed(读已提交)。\n  \n> <font color='red'>这里需要注意的是，mysql支持以上四种隔离级别，但是oracle只支持Serializable(串行化)和Read committed(读已提交)这两种隔离级别。</font>\n  \n- MySQL中查看当前的事务隔离界别\n```mysql\nselect @@tx_isolation\n```\n- 设置mysql的隔离级别\n```mysql\nset tx_isolation='read-uncommitted'\n```\n><font color='red'>记住:设置数据库的隔离级别一定要是在开启事务之前！</font>\n\n> 隔离级别的设置只对当前的链接有效。对于MySQL窗口来说，一个窗口就是一个链接，当前设置的事务隔离级别只对当前的窗口有效。\n  \n  \n## 4、缓存\n\n### 4.1 Memcache和Redis区别\n\n- **数据类型**：都是k/v数据库，但memcache只支持string，redis除了string，还支持list，set，hash等数据\n- **持久化**：memcache不支持内存持久化，redis支持。\n- **内存管理**：memcache内存用完时，会删除用得最少的缓存；redis内存用完时，会把最少的缓存交换到磁盘里。\n\n### 4.2 如何提高memcache的缓存命中率\n- 合理组合缓存 Key，保证Key最大复用率。\n- 合理设置过期时间，减少因为缓存数据过期后被穿透\n\n\n## 5、服务器\n\n\n### 5.1 Apache与Nginx的优缺点比较\n1、nginx相对于apache的优点：\n轻量级，比apache 占用更少的内存及资源。高度模块化的设计，编写模块相对简单抗并发，nginx处理请求是异步非阻塞，多个连接（万级别）可以对应一个进程，而apache 则是阻塞型的，是同步多进程模型，一个连接对应一个进程，在高并发下nginx 能保持低资源低消耗高性能。nginx处理静态文件好，Nginx 静态处理性能比 Apache 高 3倍以上\n2、apache 相对于nginx 的优点：\napache 的rewrite 比nginx 的rewrite 强大 ，模块非常多，基本想到的都可以找到 ，比较稳定，少bug ，nginx的bug相对较多\n3：Nginx比Apache快的原因：这得益于Nginx使用了最新的epoll（Linux 2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。\n\n>目前Linux下能够承受高并发访问的 Squid、Memcached都采用的是epoll网络I/O模型。 处理大量的连接的读写，Apache所采用的select网络I/O模型非常低效。\n### 5.2 fastcgi、cgi、php-fpm\n\n- fastcgi和cgi的区别\n`在web服务器方面在对数据进行处理的进程方面`:\na. cgi fork一个新的进程进行处理读取参数，处理数据，然后就结束生命期。\nb. fastcgi 用tcp方式跟远程机子上的进程或本地进程建立连接要开启tcp端口，进入循环，等待数据的到来，处理数据。\n\n- php-fpm的作用\n`那PHP-FPM又是什么呢？它是一个实现了Fastcgi协议的程序,用来管理Fastcgi起的进程的,即能够调度php-cgi进程的程序。现已在PHP内核中就集成了PHP-FPM，使用--enalbe-fpm这个编译参数即可。另外，修改了php.ini配置文件后，没办法平滑重启，需要重启php-fpm才可。此时新fork的worker会用新的配置，已经存在的worker继续处理完手上的活`\n\n> 举个例子: 服务端现在有个10万个字单词， 客户每次会发来一个字符串，问以这个字符串为前缀的单词有多少个。 那么可以写一个程序，这个程序会建一棵trie树，然后每次用户请求过来时可以直接到这个trie去查找。 但是如果以cgi的方式的话，这次请求结束后这课trie也就没了，等下次再启动该进程时，又要新建一棵trie树，这样的效率就太低下了。 而用fastcgi的方式的话，这课trie树在进程启动时建立，以后就可以直接在trie树上查询指定的前缀了\n\n\n### 5.3 为什么使用独立文件服务器？\n\n- 从服务器本身来说，单台的话会加大机器IO负载,多台(负载均衡)的话涉及到文件同步的问题\n- 浏览器对一个域名下的并发是有数量限制的，独立域名的文件服务器会加快响应\n- 防止域名污染，请求图片的时候是不用带上cookie\n    \n    \n## 6、算法\n\n### 6.1 写一个函数，算出两个文件的相对路径\n```php\n function countOppose(){\n   $arr1 = explode('/', $pathA);\n   $arr2 = explode('/', $pathB);\n   // 获取相同路径的部分\n   $intersection = array_intersect_assoc($arr1, $arr2);\n   $depth =count($intersection);\n   \n   // 将path2的/ 转为 ../，path1获取后面的部分，然后合拼\n   // 计算前缀\n   if (count($arr2) - $depth - 1 > 0) {\n       $prefix = array_fill(0, count($arr2) - $depth - 1, '..');\n   } else {\n       $prefix = array('.');\n   }\n\n   $tmp = array_merge($prefix, array_slice($arr1, $depth));\n   $relativePath = implode('/', $tmp);\n   return $relativePath;\n }\n```\n\n### 6.2 [php排序算法汇总](https://mrliuqh.github.io/2018/01/12/php-sort/)\n\n### 6.3 遍历一个文件夹下的所有文件和子文件夹\n\n```php\n\nfunction childForDir($dir)\n{\n    $files = [];\n    if (!is_dir($dir)) {\n        return $dir;\n    }\n    $handle = opendir($dir);\n    if (!$handle) {\n        return false;\n    }\n\n    //取出.和..\n    readdir($handle);\n    readdir($handle);\n   \n   //遍历剩余的文件和目录\n    while ($file = readdir($handle)) {\n        if (is_dir($file)) {\n            $files[$file] = $this->childForDir($file);\n        } else {\n            $files[] = $dir . '/' . $file;\n        }\n    }\n    closedir($handle);\n    return $files;\n}\n```\n\n### 6.4 猴子选大王\n 一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停 的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。\n\n```php\n<?php\nfunction monkeyKingNum($allNum, $m){\n  $arr = range(1,$allNum);\n  $num = 1;\n  while(count($arr) > 1){\n      foreach ($arr as $key => $value) {\n          if($num == $m){\n              unset($arr[$key]);\n              $num = 1;\n          }else{\n              $num++;\n          }\n      }\n  }\n  $monkeyKingNum = array_values($arr)[0];\n  return $monkeyKingNum;\n}\nmonkeyKingNum(10,10);\n```\n### 6.5 二分查找\n`二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好;其缺点是要求待查表为有序表，且插入删除困难。\n 因此，折半查找方法适用于不经常变动而查找频繁的有序列表。`\n\n```php\n\n<?php\n/**\n * @param $data //待查找的元素数组\n * @param $min //开始元素的下标\n * @param $max //结束元素的下标\n * @param $k //待查找的元素\n * @return bool\n */\nfunction binarySearch($data,$min,$max,$k){\n    if ($min <= $max){\n        //计算中间的元素下标\n        $mid = intval(($min +$max)/2);\n        if ($data[$mid] == $k){\n            //如果相等,则找到\n            return $mid;\n        } else if ($k < $data[$mid]){\n            //元素下标在前面一部分\n            return binarySearch($data, $min, $mid-1, $k);\n        } else {\n            //元素下标在后面一部分\n            return binarySearch($data, $mid+1, $max, $k);\n        }\n    }\n    return false;\n}\n\n```\n\n\n## 7、设计模式\n\n### 7.1单例模式（三私一公）\n>单例模式的用途,是对系统资源的节省, 可以避免重复实例化,而PHP每次执行完都会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的, 这样就失去了单例重复实例化的意义了. 单单从这个方面来说, PHP的单例的确有点让各位失望. \n \n \n>但是php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时(废话), 如果使用单例模式, 则可以避免大量的new 操作消耗的资源。\n\n\n\n```php\n class Test{\n     //私有化后在类内部保存对象并且防止外部访问到\n     private static $obj=null;\n     \n     //私有化后防止在外部创建新的对象\n     private function __construct() {\n     }\n     \n     //公有并且静态方法在类外面可以通过类名直接访问\n     public static function getInstance(){\n         if(self::$obj==null)\n             self::$obj=new self();\n         return self::$obj;\n     }\n     \n     //私有化克隆执行的方法,防止在外部被克隆\n     private function __clone(){\n     }\n }\n```\n\n### 7.2工厂模式\n工厂模式具体可分为四类：简单工厂，工厂方法，抽象工厂、静态工厂；\n\n\n>简单工厂模式:静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同,返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。。\n\n\n示例代码：\n```php\n<?php\n//简单工厂模式\nclass Cat\n{\n  function __construct()\n  {\n      echo \"I am Cat class <br>\";\n  }\n}\nclass Dog\n{\n  function __construct()\n  {\n      echo \"I am Dog class <br>\";\n  }\n}\nclass Factory\n{\n  public static function CreateAnimal($name){\n      if ($name == 'cat') {\n          return new Cat();\n      } elseif ($name == 'dog') {\n          return new Dog();\n      }\n  }\n}\n\n$cat = Factory::CreateAnimal('cat');\n$dog = Factory::CreateAnimal('dog');\n?>\n```\n> <font color=red>IUser 接口定义用户对象应执行什么操作。IUser 的实现称为 User，UserFactory 工厂类则创建 IUser 对象 </font>\n\n\n- [工厂方法，查看详情](https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/FactoryMethod/README.html)\n\n- [抽象工厂，查看详情](https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/AbstractFactory/README.html)\n\n- [静态工厂，查看详情](https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/StaticFactory/README.html)\n\n### 7.3 建造者模式（生成器模式）\n又名：生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。\n\n>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。例如，一辆汽车由轮子，发动机以及其他零件组成，对于普通人而言，我们使用的只是一辆完整的车，这时，我们需要加入一个构造者，让他帮我们把这些组件按序组装成为一辆完整的车\n\n- Builder：抽象构造者类，为创建一个Product对象的各个部件指定抽象接口。\n- ConcreteBuilder：具体构造者类，实现Builder的接口以构造和装配该产品的各个部件。定义并明确它所创建的表示。提供一个检索产品的接口\n- Director：指挥者，构造一个使用Builder接口的对象。\n- Product：表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。\n\n\n **示例代码**：\n```php\n\n<?php \nabstract class Builder\n{\n  protected $car;\n  abstract public function buildPartA();\n  abstract public function buildPartB();\n  abstract public function buildPartC();\n  abstract public function getResult();\n}\nclass CarBuilder extends Builder\n{\n  function __construct()\n  {\n      $this->car = new Car();\n  }\n  public function buildPartA(){\n      $this->car->setPartA('发动机');\n  }\n  public function buildPartB(){\n      $this->car->setPartB('轮子');\n  }\n  public function buildPartC(){\n      $this->car->setPartC('其他零件');\n  }\n  public function getResult(){\n      return $this->car;\n  }\n}\nclass Car\n{\n  protected $partA;\n  protected $partB;\n  protected $partC;\n  public function setPartA($str){\n      $this->partA = $str;\n  }\n  public function setPartB($str){\n      $this->partB = $str;\n  }\n  public function setPartC($str){\n      $this->partC = $str;\n  }\n  public function show()\n  {\n      echo \"这辆车由：\".$this->partA.','.$this->partB.',和'.$this->partC.'组成';\n  }\n}\nclass Director\n{\n  public $myBuilder;\n\n  public function startBuild()\n  {\n      $this->myBuilder->buildPartA();\n      $this->myBuilder->buildPartB();\n      $this->myBuilder->buildPartC();\n      return $this->myBuilder->getResult();\n  }\n\n  public function setBuilder(Builder $builder)\n  {\n      $this->myBuilder = $builder;\n  }\n}\n$carBuilder = new CarBuilder();\n$director = new Director();\n$director->setBuilder($carBuilder);\n$newCar = $director->startBuild();\n$newCar->show();\n```\n\n\n## 8、数据结构\n### 8.1 堆、栈、队列的区别\n- 堆\n\n**堆中主要存放用new构造的对象和数组**\n\n优势：可以动态的分配内存的大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的。\n缺点：由于要在运行时动态分配内存，存取速度比较慢\n\n\n- 栈\n\n**栈中主要存放一些基本类型的变量和对象引用类型。**\n优势：存取速度比较快，仅次于寄存器，栈数据可以共享。\n缺点：栈中的数据大小和生存周期必须是确定的，缺乏灵活性。\n\n\n- 队列\n\n**设计程序中常用的一种数据结构，采用“先进先出”的存储结构，类似于队列。**\n\n数据元素只能从队尾进入，从队首取出。在此队列中，数据元素可以随意增减，\n但是数据元素的次序不会更改。每次都是取出队首的元素，后面的元素会整体向前移动一位。队列遍历数据的速度要快的多\n\n\n\n### 8.2 什么是哈希表？\n`哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。`\n\n`哈希表hashtable(key，value) 的做法其实很简单，就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。\n     而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位\n`\n\n\n\n\n## 附加1、扩展\n\n### 1. 写代码来解决多进程/线程同时读写一个文件的问题\n```php\nfunction write(){\n    //打开文件\n\t$file = fopen('flock.text','w+');\n\tif(!$file){\n\t  return 'the file not exist!';\n\t}\n\t//获取锁\n\tif (flock(file,LOCK_EX)){\n       //todo \n       fwrite(file,'do some things');\n       //释放锁\n       flock(file,LOCK_UN);\n\t} else {\n      return 'the file is write...';\n\t}\n\t//关闭文件\n\tfclose(file);\n}\n```\n\n\n### 2. 什么是写时复制\n>  **写时复制（Copy on Write，也缩写为COW)的应用场景非常多， 比如Linux中对进程复制中内存使用的优化，在各种编程语言中，如C++的STL等等中均有类似的应用。 COW是常用的优化手段，可以归类于：资源延迟分配。只有在真正需要使用资源时才占用资源， 写时复制通常能减少资源的占用。**\n\n在开始之前，我们可以先看一段简单的代码：\n\n```php\n<?php   //例一\n    $foo = 1;\n    $bar = $foo;\n    echo $foo + $bar;\n?>\n```\n> 执行这段代码，会打印出数字2。从内存的角度来分析一下这段代码“可能”是这样执行的： 分配一块内存给foo变量，里面存储一个1； 再分配一块内存给bar变量，也存一个1，最后计算出结果输出。 事实上，我们发现foo和bar变量因为值相同，完全可以使用同一块内存，这样，内存的使用就节省了一个1， 并且，还省去了分配内存和管理内存地址的计算开销。 没错，很多涉及到内存管理的系统，都实现了这种相同值共享内存的策略：写时复制\n\n[详情参考](http://www.php-internals.com/book/?p=chapt06/06-06-copy-on-write)\n\n### 3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?\n``` \n输出的结果为：7 \n```\n>关于浮点数精度的警告\n 显然简单的十进制分数如同 0.1 或 0.7 不能在不丢失一点点精度的情况下转换为内部二进制的格式，这就会造成混乱的结果。例如，floor((0.1+0.7)*10) 通常会返回 7 而不是预期中的 8，因为该结果内部的表示其实是类似 7.9。\n \n>注意：永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等\n\n\n\n\n## 附加2、面试题链接\n- https://github.com/hookover/php-engineer-interview-questions\n- https://www.kancloud.cn/pingfan_/php_interview/916716\n- https://www.kancloud.cn/i281151/php_questions/174233\n- https://www.kancloud.cn/tp5girl/interview/329075\n- https://github.com/wudi/PHP-Interview-Best-Practices-in-China\n- https://my.oschina.net/anyeshe/blog/1550238\n- https://www.jianshu.com/p/ac5cad6d64a8\n- https://www.zhaoyafei.cn/content.html?id=150846575347\n- https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html\n- https://segmentfault.com/a/1190000010262869#articleHeader9","slug":"php-interView-question","published":1,"updated":"2019-04-22T11:05:30.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus987q2002a0641gacko2k1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"1、基础\"><a href=\"#1、基础\" class=\"headerlink\" title=\"1、基础\"></a>1、基础</h2><h3 id=\"1-1-cookie与session的区别\"><a href=\"#1-1-cookie与session的区别\" class=\"headerlink\" title=\"1.1 cookie与session的区别\"></a>1.1 cookie与session的区别</h3><ul>\n<li>存储位置：session存储于服务器，cookie存储于浏览器</li>\n<li>安全性：session安全性比cookie高</li>\n<li>session为‘会话服务’，在使用时需要开启服务，cookie不需要开启，可以直接用<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"1-2-禁用-cookie-后-session-还能用吗\"><a href=\"#1-2-禁用-cookie-后-session-还能用吗\" class=\"headerlink\" title=\"1.2 禁用 cookie 后 session 还能用吗?\"></a>1.2 禁用 cookie 后 session 还能用吗?</h3><p>可以,通过URL传值或者隐藏表单传递Session ID (常用)。</p>\n<p><strong>Session和cookie的工作流程：</strong></p>\n<ol>\n<li><p>你第一次访问网站时，</p>\n</li>\n<li><p>服务端脚本中开启了session_start();，</p>\n</li>\n<li><p>服务器会生成一个不重复的 SESSIONID 的文件session_id();，比如在/var/lib/php/session目录</p>\n</li>\n<li><p>并将返回(Response)如下的HTTP头 Set-Cookie:PHPSESSIONID=xxxxxxx</p>\n</li>\n<li><p>客户端接收到<code>Set-Cookie</code>的头，将PHPSESSIONID写入cookie</p>\n</li>\n<li><p>当你第二次访问页面时，所有Cookie会附带的请求头(Request)发送给服务器端</p>\n</li>\n<li><p>服务器识别PHPSESSIONID这个cookie，然后去session目录查找对应session文件，</p>\n</li>\n<li><p>找到这个session文件后，检查是否过期，如果没有过期，去读取Session文件中的配置；如果已经过期，清空其中的配置</p>\n</li>\n</ol>\n<h3 id=\"1-3-表单中get与post提交方法的区别\"><a href=\"#1-3-表单中get与post提交方法的区别\" class=\"headerlink\" title=\"1.3 表单中get与post提交方法的区别\"></a>1.3 表单中get与post提交方法的区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数接收：</span><br><span class=\"line\"> get：通过url参数传递进行接收,</span><br><span class=\"line\"> post：是实体数据,可以通过表单提交大量信息.</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-数据库中的事务是什么\"><a href=\"#1-4-数据库中的事务是什么\" class=\"headerlink\" title=\"1.4 数据库中的事务是什么\"></a>1.4 数据库中的事务是什么</h3><ul>\n<li>事务（transaction）是作为一个单元的一组有序的数据库操作。<br>如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。<br>如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。<br>如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消</li>\n</ul>\n<h3 id=\"1-5-echo-print-print-r-的区别\"><a href=\"#1-5-echo-print-print-r-的区别\" class=\"headerlink\" title=\"1.5 echo(),print(),print_r()的区别\"></a>1.5 echo(),print(),print_r()的区别</h3><ul>\n<li><p>echo是PHP语句, print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)</p>\n</li>\n<li><p>print() 只能打印出简单类型变量的值(如int,string)</p>\n</li>\n<li><p>print_r() 可以打印出复杂类型变量的值(如数组,对象)</p>\n</li>\n<li><p>echo 输出一个或者多个字符串</p>\n</li>\n</ul>\n<h3 id=\"1-6-用PHP写出显示客户端IP与服务器IP的代码\"><a href=\"#1-6-用PHP写出显示客户端IP与服务器IP的代码\" class=\"headerlink\" title=\"1.6 用PHP写出显示客户端IP与服务器IP的代码\"></a>1.6 用PHP写出显示客户端IP与服务器IP的代码</h3><ul>\n<li><p>打印客户端IP:echo $_SERVER[‘REMOTE_ADDR’]; 或者: getenv(‘REMOTE_ADDR’);</p>\n</li>\n<li><p>打印服务器IP:echo gethostbyname(“<a href=\"http://www.bolaiwu.com&quot;\" target=\"_blank\" rel=\"noopener\">www.bolaiwu.com&quot;</a>)</p>\n</li>\n</ul>\n<h3 id=\"1-7-include和require的区别是什么\"><a href=\"#1-7-include和require的区别是什么\" class=\"headerlink\" title=\"1.7 include和require的区别是什么?\"></a>1.7 include和require的区别是什么?</h3><ul>\n<li><p>require:是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require</p>\n</li>\n<li><p>include:有返回值，而require没有(可能因为如此require的速度比include快)</p>\n</li>\n</ul>\n<blockquote>\n<front color=\"red\">注意:包含文件不存在或者语法错误的时候,require是致命的,include不是</front>\n</blockquote>\n<h3 id=\"1-8-Trait是什么\"><a href=\"#1-8-Trait是什么\" class=\"headerlink\" title=\"1.8 Trait是什么?\"></a>1.8 Trait是什么?</h3><p>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题</p>\n<p>单个Trait使用方法：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">trait</span> ezcReflectionReturnInfo &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getReturnType</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/*1*/</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getReturnDescription</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/*2*/</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ezcReflectionMethod</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReflectionMethod</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">ezcReflectionReturnInfo</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ezcReflectionFunction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReflectionFunction</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">ezcReflectionReturnInfo</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>多个Trait使用方法<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">trait</span> Hello &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Hello '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">trait</span> World &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayWorld</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'World'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Hello</span>, <span class=\"title\">World</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayExclamationMark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$o = <span class=\"keyword\">new</span> MyHelloWorld();</span><br><span class=\"line\">$o-&gt;sayHello();</span><br><span class=\"line\">$o-&gt;sayWorld();</span><br><span class=\"line\">$o-&gt;sayExclamationMark();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-9-php7和php5区别\"><a href=\"#1-9-php7和php5区别\" class=\"headerlink\" title=\"1.9 php7和php5区别\"></a>1.9 php7和php5区别</h3><p><strong>1.PHP7.0 比PHP5.6性能提升了两倍</strong>。<br>1). 变量存储字节减小，减少内存占用，提升变量操作速度</p>\n<p>2). 改善数组结构，数组元素和hash映射表被分配在同一块内存里，降低了内存占用、提升了 cpu 缓存命中率</p>\n<p>3). 改进了函数的调用机制，通过优化参数传递的环节，减少了一些指令，提高执行效率</p>\n<p><strong>2.PHP7.0全面一致支持64位。</strong></p>\n<p><strong>3.PHP7.0之前出现的致命错误，都改成了抛出异常。</strong></p>\n<p><strong>4.增加了空结合操作符（？？）。效果相当于三元运算符。</strong></p>\n<p><strong>5.PHP7.0新增了函数的返回类型声明。</strong></p>\n<p><strong>6.PHP7.0新增了标量类型声明。</strong><br><code>PHP 7 中的函数的形参类型声明可以是标量。在 PHP 5 中只可以是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。</code></p>\n<p><strong>7.新增加了匿名类。</strong></p>\n<p><code>PHP 5.3 开始有了匿名函数，现在又新增了匿名类；</code></p>\n<p><strong>8.PHP7.0之后溢移除了一些老的不再支持的SAPI(服务器端应用编程端口)和扩展。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ereg</span><br><span class=\"line\">   </span><br><span class=\"line\">mssql</span><br><span class=\"line\">   </span><br><span class=\"line\">mysql</span><br><span class=\"line\">   </span><br><span class=\"line\">sybase_ct</span><br></pre></td></tr></table></figure></p>\n<p><strong>9.define 现在可以定义常量数组。</strong></p>\n<h3 id=\"1-10-谈谈对mvc的认识\"><a href=\"#1-10-谈谈对mvc的认识\" class=\"headerlink\" title=\"1.10 谈谈对mvc的认识\"></a>1.10 谈谈对mvc的认识</h3><p><code>模型(model),视图(view),控制器(controller);\n由模型发出要实现的功能到控制器,控制器接收组织功能传递给视图;</code></p>\n<h3 id=\"1-11-请说明php中传值与传引用的区别。什么时候传值什么时候传引用\"><a href=\"#1-11-请说明php中传值与传引用的区别。什么时候传值什么时候传引用\" class=\"headerlink\" title=\"1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?\"></a>1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?</h3><ul>\n<li><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略</p>\n</li>\n<li><p>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改</p>\n</li>\n</ul>\n<blockquote>\n<p>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。<br>按引用传递则不需要复制值，对于性能提高很有好处</p>\n</blockquote>\n<h3 id=\"1-12-从一个标准url-里取出文件的扩展名\"><a href=\"#1-12-从一个标准url-里取出文件的扩展名\" class=\"headerlink\" title=\"1.12 从一个标准url 里取出文件的扩展名\"></a>1.12 从一个标准url 里取出文件的扩展名</h3><p>例如: <a href=\"http://www.sina.com.cn/abc/de/fg.php?id=1\" target=\"_blank\" rel=\"noopener\">http://www.sina.com.cn/abc/de/fg.php?id=1</a> 需要取出php 或.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getExt</span><span class=\"params\">($url)</span></span>&#123;</span><br><span class=\"line\">   $arr = parse_url($url);</span><br><span class=\"line\">   $file = basename($arr[<span class=\"string\">'path'</span>]);</span><br><span class=\"line\">   $ext = explode(<span class=\"string\">\".\"</span>,$file);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $ext[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-13-字符串反转\"><a href=\"#1-13-字符串反转\" class=\"headerlink\" title=\"1.13 字符串反转\"></a>1.13 字符串反转</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strrev</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">  $len = mb_strlen($str);</span><br><span class=\"line\">  $tmp=[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;$len;$i++)&#123;</span><br><span class=\"line\">      $tmp[] = mb_substr($str,$i,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  krsort($tmp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> implode(<span class=\"string\">''</span>,$tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>strrev函数对英文很好用,直接可以实现字符串翻转,但是面对中文会出现乱码</p>\n</blockquote>\n<h3 id=\"1-14-在HTTP-1-0中，状态码401-的含义是；如果返回-“找不到文件”-的提示，则可用header函数，其语句为。\"><a href=\"#1-14-在HTTP-1-0中，状态码401-的含义是；如果返回-“找不到文件”-的提示，则可用header函数，其语句为。\" class=\"headerlink\" title=\"1.14 在HTTP 1.0中，状态码401 的含义是；如果返回 “找不到文件” 的提示，则可用header函数，其语句为。\"></a>1.14 在HTTP 1.0中，状态码401 的含义是<strong><strong>；如果返回 “找不到文件” 的提示，则可用header函数，其语句为</strong></strong>。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答：401表示未授权; header(&quot;HTTP/1.0 404 Not Found&quot;);</span><br><span class=\"line\">[见参考手册》函数参考》HTTP函数》header]</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-15-isset、empty和is-null的区别\"><a href=\"#1-15-isset、empty和is-null的区别\" class=\"headerlink\" title=\"1.15 isset、empty和is_null的区别?\"></a>1.15 isset、empty和is_null的区别?</h3><ul>\n<li>isset 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。</li>\n<li>empty 判断变量是否为空，如果变量是非空或非零的值，则empty() 返回 FALSE。换句话说，”” 、0 、”0”、NULL 、FALSE 、array() 、var $var; 以及没有任何属性的对象都将被认为是空的，如果变量为空，则返回TRUE。　　</li>\n<li>is_null 判断变量是否为NULL</li>\n</ul>\n<h3 id=\"1-16-self、static、-this-的区别\"><a href=\"#1-16-self、static、-this-的区别\" class=\"headerlink\" title=\"1.16 self、static、$this 的区别?\"></a>1.16 self、static、$this 的区别?</h3><ul>\n<li>self 和 <strong>CLASS</strong>，都是对当前类的ip静态引用，取决于定义当前方法所在的类。也就是说，self写在哪个类里面,它引用的就是谁。</li>\n<li>$this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。</li>\n<li>static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。</li>\n<li>self可以用于访问类的静态属性、静态方法和常量，但self指向的是当前定义所在的类，这是 self 的限制。</li>\n<li>$this 指向的对象所属的类和 static 指向的类相同。</li>\n<li>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。</li>\n<li>静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。</li>\n</ul>\n<h3 id=\"1-17-单引号’与双引号”区别\"><a href=\"#1-17-单引号’与双引号”区别\" class=\"headerlink\" title=\"1.17 单引号’与双引号”区别\"></a>1.17 单引号’与双引号”区别</h3><p>  php里的单引号把内容当成纯文本，不会经过服务器翻译。而双引号则与此相反。里面的内容会经过服务器处理(process)；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$foo=<span class=\"string\">\"data\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'$foo'</span>; <span class=\"comment\">//单引号输出$foo</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$foo\"</span>; <span class=\"comment\">//双引号输出data</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-18-如果理解OOP？\"><a href=\"#1-18-如果理解OOP？\" class=\"headerlink\" title=\"1.18 如果理解OOP？\"></a>1.18 如果理解OOP？</h3><p>OOP(object oriented programming)，即面向对象编程，其中两个最重要的概念就是类和对象，类只是具备了某些功能和属性的抽象模型，而实际应用中需要一个一个实体，也就是需要对类进行实例化，类在实例化之后就是对象。</p>\n<h4 id=\"1-OOP具有三大特点：\"><a href=\"#1-OOP具有三大特点：\" class=\"headerlink\" title=\"(1) OOP具有三大特点：\"></a>(1) OOP具有三大特点：</h4><ul>\n<li>封装性：<blockquote>\n<p>将一个类的使用和实现分开,只保留部分接口和方法供外部使用，所以开发人员只需要关注这个类如何使用，而不用去关心其具体的实现过程。</p>\n</blockquote>\n</li>\n<li>继承性：<blockquote>\n<p>子类自动继承其父级类中的属性和方法,并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。 php只支持单继承，也就是说一个子类只能有一个父类。</p>\n</blockquote>\n</li>\n<li>多态性：<blockquote>\n<p>继承了来自父级类中的属性和方法，并对其中部分方法进行重写,于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。多态性增强了软件的灵活性。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1-19-PHP缓存技术有哪些-？\"><a href=\"#1-19-PHP缓存技术有哪些-？\" class=\"headerlink\" title=\"1.19 PHP缓存技术有哪些 ？\"></a>1.19 PHP缓存技术有哪些 ？</h3><ul>\n<li>全页面静态化缓存，也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程</li>\n<li>页面部分缓存，将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示</li>\n<li>数据缓存，通过一个id进行请求的数据,将数据缓存到一个php文件中,id和文件是对应的,下次通过这个id进行请求时 直接读php文件</li>\n<li>查询缓存，和数据缓存差不多,根据查询语句进行缓存;</li>\n</ul>\n<h3 id=\"1-20-接口和抽象类的区别是什么？\"><a href=\"#1-20-接口和抽象类的区别是什么？\" class=\"headerlink\" title=\"1.20 接口和抽象类的区别是什么？\"></a>1.20 接口和抽象类的区别是什么？</h3><ul>\n<li>抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。</li>\n<li><font color=\"red\">抽象类是通过关键字 abstract 来声明的</font>。</li>\n<li>抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，</li>\n<li>抽象方法没有方法体，该方法天生就是要被子类重写的。</li>\n<li>抽象方法的格式为：abstract function abstractMethod();</li>\n<li>因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。</li>\n<li><font color=\"red\">接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public</font>，</li>\n<li>接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。</li>\n<li><font color=\"red\">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现</font>。</li>\n<li><font color=\"red\">子类继承抽象类使用extends，子类实现接口使用implements</font>。</li>\n</ul>\n<h3 id=\"1-21-常见-HTTP-状态码，分别代表什么含义\"><a href=\"#1-21-常见-HTTP-状态码，分别代表什么含义\" class=\"headerlink\" title=\"1.21 常见 HTTP 状态码，分别代表什么含义\"></a>1.21 常见 HTTP 状态码，分别代表什么含义</h3><ul>\n<li>200:请求成功</li>\n<li>206:部分内容<blockquote>\n<p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具，都是使用此类响应实现断点续传，或者将一个大文档分解为多个下载段同时下载。</p>\n</blockquote>\n</li>\n<li>301:永久重定向</li>\n<li>302:临时重定向</li>\n<li>400:错误请求</li>\n<li>401:未经授权</li>\n<li>403:禁止访问</li>\n<li>404:文件未找到</li>\n<li>500:内部服务器错误</li>\n<li>502:无效网关</li>\n</ul>\n<h3 id=\"1-22-计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\"><a href=\"#1-22-计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\" class=\"headerlink\" title=\"1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\"></a>1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒</h3><h4 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * function：计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒</span></span><br><span class=\"line\"><span class=\"comment\"> * param string $date1[格式如：2011-11-5]</span></span><br><span class=\"line\"><span class=\"comment\"> * param string $date2[格式如：2012-12-01]</span></span><br><span class=\"line\"><span class=\"comment\"> * return array array('年','月','日');</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffDate</span><span class=\"params\">($date1,$date2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $datetime1 = <span class=\"keyword\">new</span> \\DateTime($date1);</span><br><span class=\"line\">    $datetime2 = <span class=\"keyword\">new</span> \\DateTime($date2);</span><br><span class=\"line\">    $interval = $datetime1-&gt;diff($datetime2);</span><br><span class=\"line\">    $time[<span class=\"string\">'y'</span>]         = $interval-&gt;format(<span class=\"string\">'%Y'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'m'</span>]         = $interval-&gt;format(<span class=\"string\">'%m'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'d'</span>]         = $interval-&gt;format(<span class=\"string\">'%d'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'h'</span>]         = $interval-&gt;format(<span class=\"string\">'%H'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'i'</span>]         = $interval-&gt;format(<span class=\"string\">'%i'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'s'</span>]         = $interval-&gt;format(<span class=\"string\">'%s'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $time;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用实例</span></span><br><span class=\"line\">$sss = diffDate(<span class=\"string\">'2018-12-25 12:30:30'</span>, <span class=\"string\">'2018-12-26 15:00:00'</span>);</span><br><span class=\"line\">print_r($sss);</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [y] =&gt; 00</span><br><span class=\"line\">    [m] =&gt; 0</span><br><span class=\"line\">    [d] =&gt; 1</span><br><span class=\"line\">    [h] =&gt; 02</span><br><span class=\"line\">    [i] =&gt; 29</span><br><span class=\"line\">    [s] =&gt; 30</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、进阶\"><a href=\"#2、进阶\" class=\"headerlink\" title=\"2、进阶\"></a>2、进阶</h2><h3 id=\"2-1-yield-是什么，说个使用场景\"><a href=\"#2-1-yield-是什么，说个使用场景\" class=\"headerlink\" title=\"2.1 yield 是什么，说个使用场景\"></a>2.1 yield 是什么，说个使用场景</h3><ul>\n<li>yield是生成器函数的核心关键字，</li>\n<li>使用场景：协程可以用在，异步网络 IO 的时候，使其成为非阻塞的，</li>\n</ul>\n<p><a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"noopener\">在PHP中使用协程实现多任务调度</a></p>\n<h3 id=\"2-2-session共享方案\"><a href=\"#2-2-session共享方案\" class=\"headerlink\" title=\"2.2 session共享方案\"></a>2.2 session共享方案</h3><ul>\n<li><p>搭建redis集群或者memcached集群，用集群自带的同步方法来帮我们在不同的主机中同步session，这样就相当于把原来的一份session变成了N分session，session的同步就依赖于NoSql集群的同步了。</p>\n</li>\n<li><p>单独设置一个session服务器，负载服务器得到一个sessionid过后，去session服务器获得会话状态，然后根据状态来响应用户请求，如果会话状态为空，则在session服务器中设置一个会话状态，然后返回给用户一个sessionid。</p>\n</li>\n</ul>\n<h3 id=\"2-3-php7-2-为什么弃用-autoload\"><a href=\"#2-3-php7-2-为什么弃用-autoload\" class=\"headerlink\" title=\"2.3 php7.2 为什么弃用__autoload\"></a>2.3 php7.2 为什么弃用__autoload</h3><p><code>自动加载的原理，就是在我们new一个class的时候，PHP系统如果找不到你这个类，就会去自动调用本文件中的__autoload($class_name)方法，我们new的这个class_name 就成为这个方法的参数。所以我们就可以在这个方法中根据我们需要new class_name的各种判断和划分就去require对应的路径类文件，从而实现自动加载。</code></p>\n<p><strong>弃用原因</strong>:因是PHP不允许函数重名，所以一个项目中仅能出现一个<strong>autoload函数。自己写的代码保证只有一个</strong>autoload函数虽然有点难但也能做到，要是第三方库也定义了<strong>autoload，那就很头疼了。</strong>autoload的后继者是<a href=\"http://php.net/manual/zh/function.spl-autoload-register.php\" target=\"_blank\" rel=\"noopener\">spl_autoload_register</a>函数</p>\n<h3 id=\"2-4-计算文件或数组中单词出现频率\"><a href=\"#2-4-计算文件或数组中单词出现频率\" class=\"headerlink\" title=\"2.4 计算文件或数组中单词出现频率\"></a>2.4 计算文件或数组中单词出现频率</h3><ul>\n<li><p>如果是小文件，可以一次性读入到数组中，使用方便的数组计数函数进行词频统计（假设文件中内容都是空格隔开的单词）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> $file = <span class=\"string\">'./test.txt'</span>;</span><br><span class=\"line\"> $str  = file_get_contents($file);</span><br><span class=\"line\"> preg_match_all(<span class=\"string\">\"/\\b(\\w+[-]\\w+)|(\\w+)\\b/\"</span>, $str, $r);</span><br><span class=\"line\"> $words = array_count_values(array_map(<span class=\"string\">\"strtolower\"</span>, $r[<span class=\"number\">0</span>]));</span><br><span class=\"line\"> arsort($words);</span><br><span class=\"line\"> var_dump($words);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是大文件，读入内存就不合适了，可以采用如下方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$file=<span class=\"string\">'./test.txt'</span>;</span><br><span class=\"line\">$handle = fopen($file,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">$words=[];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (($line = fgets($handle)) !== <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//把换行符替换成空格</span></span><br><span class=\"line\">    $line = str_replace([<span class=\"string\">\"\\r\"</span>,<span class=\"string\">\"\\n\"</span>,<span class=\"string\">\"\\r\\n\"</span>],<span class=\"string\">' '</span>,$line);</span><br><span class=\"line\">    $tmp = explode(<span class=\"string\">' '</span>,$line);</span><br><span class=\"line\">    $tmp = array_filter($tmp);</span><br><span class=\"line\">    $words = array_merge($words,$tmp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$words = array_count_values($words);</span><br><span class=\"line\">arsort($words);</span><br><span class=\"line\">var_dump($words);</span><br><span class=\"line\">fclose($handle);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/Alight/p/3947591.html\" target=\"_blank\" rel=\"noopener\">PHP对大文件的处理思路</a></p>\n<h2 id=\"3、数据库\"><a href=\"#3、数据库\" class=\"headerlink\" title=\"3、数据库\"></a>3、数据库</h2><h3 id=\"3-1-Mysql的存储引擎-MyISAM和InnoDB的区别。\"><a href=\"#3-1-Mysql的存储引擎-MyISAM和InnoDB的区别。\" class=\"headerlink\" title=\"3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。\"></a>3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。</h3><ul>\n<li>MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持.</li>\n<li>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快.</li>\n<li>InnoDB不支持FULLTEXT(全文索引) 类型的索引.</li>\n<li><p>InnoDB 中不保存表的具体行数.</p>\n<blockquote>\n<p>也就是说执行 ：select count(*) from table时，<br> InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可.</p>\n</blockquote>\n</li>\n<li><p>对于AUTO_INCREMENT(递增)类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p>\n</li>\n<li>DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</li>\n<li>Load Table From Master 操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用.</li>\n<li>MyISAM支持表锁，InnoDB支持行锁。</li>\n</ul>\n<h3 id=\"3-2-delete-drop-truncate区别\"><a href=\"#3-2-delete-drop-truncate区别\" class=\"headerlink\" title=\"3.2 delete drop truncate区别\"></a>3.2 delete drop truncate区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。</span><br><span class=\"line\">- 删除数据的速度，一般来说: drop&gt; truncate &gt; delete</span><br><span class=\"line\">- delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚</span><br><span class=\"line\"></span><br><span class=\"line\">- 使用场合：</span><br><span class=\"line\">  1.当你不再需要该表时， 用drop;</span><br><span class=\"line\">  2.当你仍要保留该表，但要删除所有记录时， 用truncate;</span><br><span class=\"line\">  3.当你要删除部分记录时（always with a where clause), 用 delete.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于有主外键关系的表，不能使用truncate而应该使用不带where子句的delete语句，由于truncate不记录在日志中，不能够激活触发器</p>\n</blockquote>\n<h3 id=\"3-3-优化MYSQL数据库的方法\"><a href=\"#3-3-优化MYSQL数据库的方法\" class=\"headerlink\" title=\"3.3 优化MYSQL数据库的方法\"></a>3.3 优化MYSQL数据库的方法</h3><ul>\n<li>选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL,例如’省份,性别’,最好设置为ENUM</li>\n<li><p>使用连接（JOIN）来代替子查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.删除没有任何订单客户:</span><br><span class=\"line\">DELETE FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)</span><br><span class=\"line\"></span><br><span class=\"line\">b.提取所有没有订单客户:</span><br><span class=\"line\">SELECT FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)</span><br><span class=\"line\"> </span><br><span class=\"line\">c.提高b的速度优化:</span><br><span class=\"line\">SELECT FROM customerinfo LEFT JOIN orderid customerinfo.customerid=orderinfo.customerid WHERE orderinfo.customerid IS NULL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用联合(UNION)来代替手动创建的临时表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT name FROM `nametest` UNION SELECT username FROM `nametest2`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事务处理</p>\n<blockquote>\n<p>保证数据完整性,例如添加和修改同时,两者成立则都执行,一者失败都失败。</p>\n</blockquote>\n</li>\n<li><p>锁定表,优化事务处理</p>\n<p><code>我们用一个 SELECT 语句取出初始数据，通过一些计算，用 UPDATE 语句将新值更新到表中。包含有 WRITE 关键字的 LOCK TABLE 语句可以保证在 UNLOCK TABLES 命令被执行之前，不会有其它的访问来对 inventory 进行插入、更新或者删除的操作.</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_query(&quot;LOCK TABLE customerinfo READ, orderinfo WRITE&quot;);</span><br><span class=\"line\">mysql_query(&quot;SELECT customerid FROM `customerinfo` where id=&quot;.$id);</span><br><span class=\"line\">mysql_query(&quot;UPDATE `orderinfo` SET ordertitle=&apos;$title&apos; where customerid=&quot;.$id);</span><br><span class=\"line\">mysql_query(&quot;UNLOCK TABLES&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立索引<br><a href=\"https://mrliuqh.github.io/2017/09/17/php-interView-question/#3-7-索引类型\" target=\"_blank\" rel=\"noopener\">索引类型,请看3.7</a></p>\n</li>\n<li><p>优化查询语句</p>\n<ul>\n<li>避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li>\n<li>避免全表扫描，首先应考虑在where及order by涉及的列上建立索引</li>\n<li>避免在 where子句中对字段进行null值判断，会引起全表扫描<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：select id from test where num is null</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<font color=\"red\">因此字段都应设置为NOT NULL，将来查询的时候就不用去比较NULL值</font>\n</blockquote>\n<ul>\n<li>避免在where子句中使用or来连接条件，会引起全表扫描<br><code>如：select id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10 union all select id from t where num=20</code></li>\n<li>in 和 not in 也要慎用，否则会导致全表扫描</li>\n<li>避免在 where 子句中对字段进行表达式操作</li>\n</ul>\n<p><code>如：select id from t where num/2=100\n应改为：\nselect id from t where num =100*2</code></p>\n<ul>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，一个表的索引数最好不要超过6个。</p>\n</li>\n<li><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li><p>通过explain查询和分析SQL的执行计划<br><img src=\"https://mrliuqh.github.io/directionsImg/mysql/explain.png\" alt=\"image\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-mysql-fetch-row-和-mysql-fetch-array-有什么分别？\"><a href=\"#3-4-mysql-fetch-row-和-mysql-fetch-array-有什么分别？\" class=\"headerlink\" title=\"3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？\"></a>3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_fetch_row()</span><br><span class=\"line\"> 返回的结果集是索引数组。</span><br><span class=\"line\">mysql_fetch_assoc()</span><br><span class=\"line\">  返回的结果集是关联数组</span><br><span class=\"line\">mysql_fetch_array()</span><br><span class=\"line\"> 既可以返回索引数组也可以返回关联数组，</span><br><span class=\"line\"> 取决于它的第二个参数 MYSQL_BOTH MYSQL_NUM MYSQL_ASSOC 默认为MYSQL_BOTH</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-php访问数据库有哪几步\"><a href=\"#3-5-php访问数据库有哪几步\" class=\"headerlink\" title=\"3.5 php访问数据库有哪几步?\"></a>3.5 php访问数据库有哪几步?</h3><p> 1.连接数据库服务器：<br> <code>mysql_connect(&#39;数据库服务器的主机名或ip&#39;,&#39;数据库服务器的用户名&#39;,&#39;数据库服务器的密码&#39;);</code><br> 2.选择数据库：<br> <code>mysql_select_db(数据库名);</code><br> 3.设置从数据库提取数据的字符集：<br> <code>mysql_query(&quot;set names utf8&quot;);</code><br> 4.执行sql语句：<br> <code>mysql_query(sql语句);</code><br> 5.关闭结果集，释放资源：<br> <code>mysql_free_result($result);</code><br> 6.关闭与数据库服务器的连接：<br> <code>mysql_close($link);</code></p>\n<h3 id=\"3-6-表设计三大范式\"><a href=\"#3-6-表设计三大范式\" class=\"headerlink\" title=\"3.6 表设计三大范式\"></a>3.6 表设计三大范式</h3><ul>\n<li>1．第一范式(原子性):所有字段值都是不可分解的原子值       </li>\n<li>2．第二范式(在第一范式的基础上):确保表中的每列都和主键相关，即一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中</li>\n<li>3．第三范式(在第二范式的基础上):确保每列都和主键列直接关联,而不是间接相关</li>\n</ul>\n<h3 id=\"3-7-索引类型\"><a href=\"#3-7-索引类型\" class=\"headerlink\" title=\"3.7 索引类型\"></a>3.7 索引类型</h3><ul>\n<li><p>普通索引(index):<br><code>创建:\nCREATE INDEX &lt;索引名&gt; ON tablename (索引字段)\n修改:\nALTER TABLE tablename ADD INDEX [索引名] (索引字段)\n创表指定索引:\nCREATE TABLE tablename([...],INDEX[索引名](索引字段))</code></p>\n</li>\n<li><p>唯一索引(unique):<br><font color=\"red\">在普通索引的基础上，会进行排除重复值</font><br><code>创建:\nCREATE UNIQUE &lt;索引名&gt; ON tablename (索引字段)\n修改:\nALTER TABLE tablename ADD UNIQUE [索引名] (索引字段)\n创表指定索引:\n CREATE TABLE tablename([...],UNIQUE[索引名](索引字段))</code></p>\n</li>\n<li><p>主键(primary key):<br><font color=\"red\">和唯一索引的区别在于一个表里只能有一个主键索引，但是唯一索引可以有多个</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">它是唯一索引,一般在创建表是建立</span><br><span class=\"line\">语法：</span><br><span class=\"line\"> CREATA TABLE tablename ([...],PRIMARY KEY[索引字段])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>联合索引:<br><code>语法：\nALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3 )</code></p>\n</li>\n<li><p>全文索引 (fulltext)</p>\n</li>\n</ul>\n<h4 id=\"普通索引／唯一索引／主键索引-哪个速度更快？\"><a href=\"#普通索引／唯一索引／主键索引-哪个速度更快？\" class=\"headerlink\" title=\"普通索引／唯一索引／主键索引 哪个速度更快？\"></a>普通索引／唯一索引／主键索引 哪个速度更快？</h4><p><code>速度是一样的快，因为三者都是采用btree二叉树算法进行查找。</code></p>\n<h3 id=\"3-8-索引算法\"><a href=\"#3-8-索引算法\" class=\"headerlink\" title=\"3.8 索引算法\"></a>3.8 索引算法</h3><ul>\n<li><p>BTREE算法</p>\n<blockquote>\n<p>Innodb和MyISAM默认的索引是BTREE索引<br>采用二叉树算法，左边的树枝小于根节点关键词，右边大于根节点，两边的树的深度不大于1，从而降低时间复杂度。</p>\n</blockquote>\n</li>\n<li><p>HASH算法</p>\n<blockquote>\n<p>Mermory默认的索引是Hash索引<br>Hash索引只能用于HASH值比较，例如=,&lt;&gt; 操作符，不像BTREE索引需要从根节点到枝节点，最后才能访问到页节点这样多次IO访问，所以检索效率远高于BTREE索引。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"为什么不默认采用HASH索引呢？\"><a href=\"#为什么不默认采用HASH索引呢？\" class=\"headerlink\" title=\"为什么不默认采用HASH索引呢？\"></a><font>为什么不默认采用HASH索引呢？</font></h4><blockquote>\n<p>HASH只能用在=和&lt;&gt;上，所以功能受限，所以默认采用BTREE。</p>\n</blockquote>\n<h3 id=\"3-9-insert-和-replace的区别\"><a href=\"#3-9-insert-和-replace的区别\" class=\"headerlink\" title=\"3.9 insert 和 replace的区别\"></a>3.9 insert 和 replace的区别</h3><p><code>replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。</code></p>\n<blockquote>\n<font color=\"red\">要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</font>\n</blockquote>\n<ul>\n<li><strong>MySQL replace into 有三种形式：</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace into tbl_name(col_name, ...) values(...)</span><br><span class=\"line\"></span><br><span class=\"line\">replace into tbl_name(col_name, ...) select ...</span><br><span class=\"line\"></span><br><span class=\"line\">replace into tbl_name set col_name=value, ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值</p>\n</blockquote>\n<h3 id=\"3-10-数据库操作事务的四大特性\"><a href=\"#3-10-数据库操作事务的四大特性\" class=\"headerlink\" title=\"3.10 数据库操作事务的四大特性\"></a>3.10 数据库操作事务的四大特性</h3><h4 id=\"3-10-1-事务操作数据库的四大特性-ACID\"><a href=\"#3-10-1-事务操作数据库的四大特性-ACID\" class=\"headerlink\" title=\"3.10.1 事务操作数据库的四大特性(ACID)\"></a>3.10.1 事务操作数据库的四大特性(ACID)</h4><ul>\n<li>原子性 (Atomicity):就是事务的所包含的所有操作，要么全部成功，要么全部失败回滚。</li>\n<li>一致性 (Consistency):简单来说就是在事务执行前和执行后，必须保持数据的一致。</li>\n<li><p>隔离性 (Isolation):一个事务执行的过程当中，不能被其他的事务干扰。</p>\n<blockquote>\n<p>比如有事务A和事务B，相对于A来说，B想要执行，要么在我执行之前执行，要么在我执行完毕之后，你再开始执行.</p>\n</blockquote>\n</li>\n<li><p>持久性 (Durability):事务被提交之后，他就被永久的存储到了数据库当中.</p>\n</li>\n</ul>\n<h4 id=\"3-10-2-不考虑事务的隔离性所引发的问题\"><a href=\"#3-10-2-不考虑事务的隔离性所引发的问题\" class=\"headerlink\" title=\"3.10.2 不考虑事务的隔离性所引发的问题\"></a>3.10.2 不考虑事务的隔离性所引发的问题</h4><ul>\n<li>脏读:一个事务读取到了一个未提交的事务的数据。</li>\n<li>不可重复读:<blockquote>\n<p>在读取数据库的某条数据的时候返回了不同的值，造成这个结果的原因是因为我们在查询了一次之后准备进行第二次查询的这个间隔之间，对我们要进行查询的这条数据进行了修改操作，从而导致两次读取的数据不一致。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>脏读和不可重复读的区别:脏读是一个事务读取到了一个未提交事务的脏数据，而不可重复读是一个数据读取了一个已经提交了的事务的数据。</p>\n</blockquote>\n<ul>\n<li>虚读(幻读)<blockquote>\n<p>出现幻读不是对一条数据的操作而产生的问题，而是操作多条数据产生的问题，例如：事务A想要对一张表中的某一字段的值进行修改，假设有一个字段的值全部为1，事务A现在想要将1全部修改为2，在提交事务之后，事务B接着又进行了一个操作，在这张表中添加了一个字段，值全部为1。那么这时候操作事务A的用户在查看的时候，会发现还有一行数据没有进行修改，其实这是事务B在他查看之前添加的。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>幻读和不可重复读都是读取了一个已经提交的事务，而脏读是读取了一个未提交的事务。不同的是不可重复读查询的是同一条数据，而虚读查询的是批量数据。</p>\n</blockquote>\n<h3 id=\"3-11-MySQL数据库的四种隔离级别\"><a href=\"#3-11-MySQL数据库的四种隔离级别\" class=\"headerlink\" title=\"3.11  MySQL数据库的四种隔离级别\"></a>3.11  MySQL数据库的四种隔离级别</h3><ul>\n<li>Serializable (序列化)：可避免脏读、不可重读读、幻读的发生</li>\n<li>Repeatable-read (可重复读)：可避免脏读、不可重复读的发生。</li>\n<li>Read-committed (读已提交)：可避免脏读的发生。</li>\n<li>Read-uncommitted (读未提交)：最低级别，任何情况都无法保证。<blockquote>\n<p>以上四种的隔离级别最高的Serializable，最低的是Read uncommitted，级别越高，虽然安全级别越高，但是执行的效率就越低，MySQL中默认的隔离级别是:Repeatable read(可重复读)，oracle默认的隔离级别是：Read committed(读已提交)。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<font color=\"red\">这里需要注意的是，mysql支持以上四种隔离级别，但是oracle只支持Serializable(串行化)和Read committed(读已提交)这两种隔离级别。</font>\n</blockquote>\n<ul>\n<li><p>MySQL中查看当前的事务隔离界别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置mysql的隔离级别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set tx_isolation=&apos;read-uncommitted&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<font color=\"red\">记住:设置数据库的隔离级别一定要是在开启事务之前！</font>\n</blockquote>\n<blockquote>\n<p>隔离级别的设置只对当前的链接有效。对于MySQL窗口来说，一个窗口就是一个链接，当前设置的事务隔离级别只对当前的窗口有效。</p>\n</blockquote>\n<h2 id=\"4、缓存\"><a href=\"#4、缓存\" class=\"headerlink\" title=\"4、缓存\"></a>4、缓存</h2><h3 id=\"4-1-Memcache和Redis区别\"><a href=\"#4-1-Memcache和Redis区别\" class=\"headerlink\" title=\"4.1 Memcache和Redis区别\"></a>4.1 Memcache和Redis区别</h3><ul>\n<li><strong>数据类型</strong>：都是k/v数据库，但memcache只支持string，redis除了string，还支持list，set，hash等数据</li>\n<li><strong>持久化</strong>：memcache不支持内存持久化，redis支持。</li>\n<li><strong>内存管理</strong>：memcache内存用完时，会删除用得最少的缓存；redis内存用完时，会把最少的缓存交换到磁盘里。</li>\n</ul>\n<h3 id=\"4-2-如何提高memcache的缓存命中率\"><a href=\"#4-2-如何提高memcache的缓存命中率\" class=\"headerlink\" title=\"4.2 如何提高memcache的缓存命中率\"></a>4.2 如何提高memcache的缓存命中率</h3><ul>\n<li>合理组合缓存 Key，保证Key最大复用率。</li>\n<li>合理设置过期时间，减少因为缓存数据过期后被穿透</li>\n</ul>\n<h2 id=\"5、服务器\"><a href=\"#5、服务器\" class=\"headerlink\" title=\"5、服务器\"></a>5、服务器</h2><h3 id=\"5-1-Apache与Nginx的优缺点比较\"><a href=\"#5-1-Apache与Nginx的优缺点比较\" class=\"headerlink\" title=\"5.1 Apache与Nginx的优缺点比较\"></a>5.1 Apache与Nginx的优缺点比较</h3><p>1、nginx相对于apache的优点：<br>轻量级，比apache 占用更少的内存及资源。高度模块化的设计，编写模块相对简单抗并发，nginx处理请求是异步非阻塞，多个连接（万级别）可以对应一个进程，而apache 则是阻塞型的，是同步多进程模型，一个连接对应一个进程，在高并发下nginx 能保持低资源低消耗高性能。nginx处理静态文件好，Nginx 静态处理性能比 Apache 高 3倍以上<br>2、apache 相对于nginx 的优点：<br>apache 的rewrite 比nginx 的rewrite 强大 ，模块非常多，基本想到的都可以找到 ，比较稳定，少bug ，nginx的bug相对较多<br>3：Nginx比Apache快的原因：这得益于Nginx使用了最新的epoll（Linux 2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。</p>\n<blockquote>\n<p>目前Linux下能够承受高并发访问的 Squid、Memcached都采用的是epoll网络I/O模型。 处理大量的连接的读写，Apache所采用的select网络I/O模型非常低效。</p>\n</blockquote>\n<h3 id=\"5-2-fastcgi、cgi、php-fpm\"><a href=\"#5-2-fastcgi、cgi、php-fpm\" class=\"headerlink\" title=\"5.2 fastcgi、cgi、php-fpm\"></a>5.2 fastcgi、cgi、php-fpm</h3><ul>\n<li><p>fastcgi和cgi的区别<br><code>在web服务器方面在对数据进行处理的进程方面</code>:<br>a. cgi fork一个新的进程进行处理读取参数，处理数据，然后就结束生命期。<br>b. fastcgi 用tcp方式跟远程机子上的进程或本地进程建立连接要开启tcp端口，进入循环，等待数据的到来，处理数据。</p>\n</li>\n<li><p>php-fpm的作用<br><code>那PHP-FPM又是什么呢？它是一个实现了Fastcgi协议的程序,用来管理Fastcgi起的进程的,即能够调度php-cgi进程的程序。现已在PHP内核中就集成了PHP-FPM，使用--enalbe-fpm这个编译参数即可。另外，修改了php.ini配置文件后，没办法平滑重启，需要重启php-fpm才可。此时新fork的worker会用新的配置，已经存在的worker继续处理完手上的活</code></p>\n</li>\n</ul>\n<blockquote>\n<p>举个例子: 服务端现在有个10万个字单词， 客户每次会发来一个字符串，问以这个字符串为前缀的单词有多少个。 那么可以写一个程序，这个程序会建一棵trie树，然后每次用户请求过来时可以直接到这个trie去查找。 但是如果以cgi的方式的话，这次请求结束后这课trie也就没了，等下次再启动该进程时，又要新建一棵trie树，这样的效率就太低下了。 而用fastcgi的方式的话，这课trie树在进程启动时建立，以后就可以直接在trie树上查询指定的前缀了</p>\n</blockquote>\n<h3 id=\"5-3-为什么使用独立文件服务器？\"><a href=\"#5-3-为什么使用独立文件服务器？\" class=\"headerlink\" title=\"5.3 为什么使用独立文件服务器？\"></a>5.3 为什么使用独立文件服务器？</h3><ul>\n<li>从服务器本身来说，单台的话会加大机器IO负载,多台(负载均衡)的话涉及到文件同步的问题</li>\n<li>浏览器对一个域名下的并发是有数量限制的，独立域名的文件服务器会加快响应</li>\n<li>防止域名污染，请求图片的时候是不用带上cookie</li>\n</ul>\n<h2 id=\"6、算法\"><a href=\"#6、算法\" class=\"headerlink\" title=\"6、算法\"></a>6、算法</h2><h3 id=\"6-1-写一个函数，算出两个文件的相对路径\"><a href=\"#6-1-写一个函数，算出两个文件的相对路径\" class=\"headerlink\" title=\"6.1 写一个函数，算出两个文件的相对路径\"></a>6.1 写一个函数，算出两个文件的相对路径</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countOppose</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  $arr1 = explode(<span class=\"string\">'/'</span>, $pathA);</span><br><span class=\"line\">  $arr2 = explode(<span class=\"string\">'/'</span>, $pathB);</span><br><span class=\"line\">  <span class=\"comment\">// 获取相同路径的部分</span></span><br><span class=\"line\">  $intersection = array_intersect_assoc($arr1, $arr2);</span><br><span class=\"line\">  $depth =count($intersection);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 将path2的/ 转为 ../，path1获取后面的部分，然后合拼</span></span><br><span class=\"line\">  <span class=\"comment\">// 计算前缀</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count($arr2) - $depth - <span class=\"number\">1</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      $prefix = array_fill(<span class=\"number\">0</span>, count($arr2) - $depth - <span class=\"number\">1</span>, <span class=\"string\">'..'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $prefix = <span class=\"keyword\">array</span>(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $tmp = array_merge($prefix, array_slice($arr1, $depth));</span><br><span class=\"line\">  $relativePath = implode(<span class=\"string\">'/'</span>, $tmp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $relativePath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-php排序算法汇总\"><a href=\"#6-2-php排序算法汇总\" class=\"headerlink\" title=\"6.2 php排序算法汇总\"></a>6.2 <a href=\"https://mrliuqh.github.io/2018/01/12/php-sort/\" target=\"_blank\" rel=\"noopener\">php排序算法汇总</a></h3><h3 id=\"6-3-遍历一个文件夹下的所有文件和子文件夹\"><a href=\"#6-3-遍历一个文件夹下的所有文件和子文件夹\" class=\"headerlink\" title=\"6.3 遍历一个文件夹下的所有文件和子文件夹\"></a>6.3 遍历一个文件夹下的所有文件和子文件夹</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childForDir</span><span class=\"params\">($dir)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $files = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!is_dir($dir)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $dir;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $handle = opendir($dir);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$handle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取出.和..</span></span><br><span class=\"line\">    readdir($handle);</span><br><span class=\"line\">    readdir($handle);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//遍历剩余的文件和目录</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($file = readdir($handle)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_dir($file)) &#123;</span><br><span class=\"line\">            $files[$file] = <span class=\"keyword\">$this</span>-&gt;childForDir($file);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $files[] = $dir . <span class=\"string\">'/'</span> . $file;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    closedir($handle);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-猴子选大王\"><a href=\"#6-4-猴子选大王\" class=\"headerlink\" title=\"6.4 猴子选大王\"></a>6.4 猴子选大王</h3><p> 一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停 的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">monkeyKingNum</span><span class=\"params\">($allNum, $m)</span></span>&#123;</span><br><span class=\"line\">  $arr = range(<span class=\"number\">1</span>,$allNum);</span><br><span class=\"line\">  $num = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(count($arr) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> ($arr <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>($num == $m)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">unset</span>($arr[$key]);</span><br><span class=\"line\">              $num = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              $num++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $monkeyKingNum = array_values($arr)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $monkeyKingNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">monkeyKingNum(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-5-二分查找\"><a href=\"#6-5-二分查找\" class=\"headerlink\" title=\"6.5 二分查找\"></a>6.5 二分查找</h3><p><code>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好;其缺点是要求待查表为有序表，且插入删除困难。\n 因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $data //待查找的元素数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $min //开始元素的下标</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $max //结束元素的下标</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $k //待查找的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span><span class=\"params\">($data,$min,$max,$k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($min &lt;= $max)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算中间的元素下标</span></span><br><span class=\"line\">        $mid = intval(($min +$max)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($data[$mid] == $k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果相等,则找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> $mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($k &lt; $data[$mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">//元素下标在前面一部分</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch($data, $min, $mid<span class=\"number\">-1</span>, $k);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//元素下标在后面一部分</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch($data, $mid+<span class=\"number\">1</span>, $max, $k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、设计模式\"><a href=\"#7、设计模式\" class=\"headerlink\" title=\"7、设计模式\"></a>7、设计模式</h2><h3 id=\"7-1单例模式（三私一公）\"><a href=\"#7-1单例模式（三私一公）\" class=\"headerlink\" title=\"7.1单例模式（三私一公）\"></a>7.1单例模式（三私一公）</h3><blockquote>\n<p>单例模式的用途,是对系统资源的节省, 可以避免重复实例化,而PHP每次执行完都会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的, 这样就失去了单例重复实例化的意义了. 单单从这个方面来说, PHP的单例的确有点让各位失望. </p>\n</blockquote>\n<blockquote>\n<p>但是php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时(废话), 如果使用单例模式, 则可以避免大量的new 操作消耗的资源。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有化后在类内部保存对象并且防止外部访问到</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $obj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私有化后防止在外部创建新的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//公有并且静态方法在类外面可以通过类名直接访问</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>::$obj==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>::$obj=<span class=\"keyword\">new</span> <span class=\"keyword\">self</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私有化克隆执行的方法,防止在外部被克隆</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2工厂模式\"><a href=\"#7-2工厂模式\" class=\"headerlink\" title=\"7.2工厂模式\"></a>7.2工厂模式</h3><p>工厂模式具体可分为四类：简单工厂，工厂方法，抽象工厂、静态工厂；</p>\n<blockquote>\n<p>简单工厂模式:静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同,返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。。</p>\n</blockquote>\n<p>示例代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//简单工厂模式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"I am Cat class &lt;br&gt;\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"I am Dog class &lt;br&gt;\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateAnimal</span><span class=\"params\">($name)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($name == <span class=\"string\">'cat'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">elseif</span> ($name == <span class=\"string\">'dog'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cat = Factory::CreateAnimal(<span class=\"string\">'cat'</span>);</span><br><span class=\"line\">$dog = Factory::CreateAnimal(<span class=\"string\">'dog'</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<font color=\"red\">IUser 接口定义用户对象应执行什么操作。IUser 的实现称为 User，UserFactory 工厂类则创建 IUser 对象 </font>\n</blockquote>\n<ul>\n<li><p><a href=\"https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/FactoryMethod/README.html\" target=\"_blank\" rel=\"noopener\">工厂方法，查看详情</a></p>\n</li>\n<li><p><a href=\"https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/AbstractFactory/README.html\" target=\"_blank\" rel=\"noopener\">抽象工厂，查看详情</a></p>\n</li>\n<li><p><a href=\"https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/StaticFactory/README.html\" target=\"_blank\" rel=\"noopener\">静态工厂，查看详情</a></p>\n</li>\n</ul>\n<h3 id=\"7-3-建造者模式（生成器模式）\"><a href=\"#7-3-建造者模式（生成器模式）\" class=\"headerlink\" title=\"7.3 建造者模式（生成器模式）\"></a>7.3 建造者模式（生成器模式）</h3><p>又名：生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>\n<blockquote>\n<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。例如，一辆汽车由轮子，发动机以及其他零件组成，对于普通人而言，我们使用的只是一辆完整的车，这时，我们需要加入一个构造者，让他帮我们把这些组件按序组装成为一辆完整的车</p>\n</blockquote>\n<ul>\n<li>Builder：抽象构造者类，为创建一个Product对象的各个部件指定抽象接口。</li>\n<li>ConcreteBuilder：具体构造者类，实现Builder的接口以构造和装配该产品的各个部件。定义并明确它所创建的表示。提供一个检索产品的接口</li>\n<li>Director：指挥者，构造一个使用Builder接口的对象。</li>\n<li>Product：表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。</li>\n</ul>\n<p> <strong>示例代码</strong>：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $car;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car-&gt;setPartA(<span class=\"string\">'发动机'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car-&gt;setPartB(<span class=\"string\">'轮子'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car-&gt;setPartC(<span class=\"string\">'其他零件'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;car;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $partA;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $partB;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $partC;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPartA</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;partA = $str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPartB</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;partB = $str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPartC</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;partC = $str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"这辆车由：\"</span>.<span class=\"keyword\">$this</span>-&gt;partA.<span class=\"string\">','</span>.<span class=\"keyword\">$this</span>-&gt;partB.<span class=\"string\">',和'</span>.<span class=\"keyword\">$this</span>-&gt;partC.<span class=\"string\">'组成'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> $myBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startBuild</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;buildPartA();</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;buildPartB();</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;buildPartC();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;getResult();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setBuilder</span><span class=\"params\">(Builder $builder)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder = $builder;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CarBuilder();</span><br><span class=\"line\">$director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">$director-&gt;setBuilder($carBuilder);</span><br><span class=\"line\">$newCar = $director-&gt;startBuild();</span><br><span class=\"line\">$newCar-&gt;show();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8、数据结构\"><a href=\"#8、数据结构\" class=\"headerlink\" title=\"8、数据结构\"></a>8、数据结构</h2><h3 id=\"8-1-堆、栈、队列的区别\"><a href=\"#8-1-堆、栈、队列的区别\" class=\"headerlink\" title=\"8.1 堆、栈、队列的区别\"></a>8.1 堆、栈、队列的区别</h3><ul>\n<li>堆</li>\n</ul>\n<p><strong>堆中主要存放用new构造的对象和数组</strong></p>\n<p>优势：可以动态的分配内存的大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的。<br>缺点：由于要在运行时动态分配内存，存取速度比较慢</p>\n<ul>\n<li>栈</li>\n</ul>\n<p><strong>栈中主要存放一些基本类型的变量和对象引用类型。</strong><br>优势：存取速度比较快，仅次于寄存器，栈数据可以共享。<br>缺点：栈中的数据大小和生存周期必须是确定的，缺乏灵活性。</p>\n<ul>\n<li>队列</li>\n</ul>\n<p><strong>设计程序中常用的一种数据结构，采用“先进先出”的存储结构，类似于队列。</strong></p>\n<p>数据元素只能从队尾进入，从队首取出。在此队列中，数据元素可以随意增减，<br>但是数据元素的次序不会更改。每次都是取出队首的元素，后面的元素会整体向前移动一位。队列遍历数据的速度要快的多</p>\n<h3 id=\"8-2-什么是哈希表？\"><a href=\"#8-2-什么是哈希表？\" class=\"headerlink\" title=\"8.2 什么是哈希表？\"></a>8.2 什么是哈希表？</h3><p><code>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</code></p>\n<p><code>哈希表hashtable(key，value) 的做法其实很简单，就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。\n     而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位</code></p>\n<h2 id=\"附加1、扩展\"><a href=\"#附加1、扩展\" class=\"headerlink\" title=\"附加1、扩展\"></a>附加1、扩展</h2><h3 id=\"1-写代码来解决多进程-线程同时读写一个文件的问题\"><a href=\"#1-写代码来解决多进程-线程同时读写一个文件的问题\" class=\"headerlink\" title=\"1. 写代码来解决多进程/线程同时读写一个文件的问题\"></a>1. 写代码来解决多进程/线程同时读写一个文件的问题</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">\t$file = fopen(<span class=\"string\">'flock.text'</span>,<span class=\"string\">'w+'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!$file)&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"string\">'the file not exist!'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flock(file,LOCK_EX))&#123;</span><br><span class=\"line\">       <span class=\"comment\">//todo </span></span><br><span class=\"line\">       fwrite(file,<span class=\"string\">'do some things'</span>);</span><br><span class=\"line\">       <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">       flock(file,LOCK_UN);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'the file is write...'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">\tfclose(file);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-什么是写时复制\"><a href=\"#2-什么是写时复制\" class=\"headerlink\" title=\"2. 什么是写时复制\"></a>2. 什么是写时复制</h3><blockquote>\n<p> <strong>写时复制（Copy on Write，也缩写为COW)的应用场景非常多， 比如Linux中对进程复制中内存使用的优化，在各种编程语言中，如C++的STL等等中均有类似的应用。 COW是常用的优化手段，可以归类于：资源延迟分配。只有在真正需要使用资源时才占用资源， 写时复制通常能减少资源的占用。</strong></p>\n</blockquote>\n<p>在开始之前，我们可以先看一段简单的代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>   <span class=\"comment\">//例一</span></span><br><span class=\"line\">    $foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">    $bar = $foo;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $foo + $bar;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行这段代码，会打印出数字2。从内存的角度来分析一下这段代码“可能”是这样执行的： 分配一块内存给foo变量，里面存储一个1； 再分配一块内存给bar变量，也存一个1，最后计算出结果输出。 事实上，我们发现foo和bar变量因为值相同，完全可以使用同一块内存，这样，内存的使用就节省了一个1， 并且，还省去了分配内存和管理内存地址的计算开销。 没错，很多涉及到内存管理的系统，都实现了这种相同值共享内存的策略：写时复制</p>\n</blockquote>\n<p><a href=\"http://www.php-internals.com/book/?p=chapt06/06-06-copy-on-write\" target=\"_blank\" rel=\"noopener\">详情参考</a></p>\n<h3 id=\"3-echo-int-0-1-0-7-10-输出是多少？为什么\"><a href=\"#3-echo-int-0-1-0-7-10-输出是多少？为什么\" class=\"headerlink\" title=\"3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?\"></a>3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出的结果为：7</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于浮点数精度的警告<br> 显然简单的十进制分数如同 0.1 或 0.7 不能在不丢失一点点精度的情况下转换为内部二进制的格式，这就会造成混乱的结果。例如，floor((0.1+0.7)*10) 通常会返回 7 而不是预期中的 8，因为该结果内部的表示其实是类似 7.9。</p>\n</blockquote>\n<blockquote>\n<p>注意：永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等</p>\n</blockquote>\n<h2 id=\"附加2、面试题链接\"><a href=\"#附加2、面试题链接\" class=\"headerlink\" title=\"附加2、面试题链接\"></a>附加2、面试题链接</h2><ul>\n<li><a href=\"https://github.com/hookover/php-engineer-interview-questions\" target=\"_blank\" rel=\"noopener\">https://github.com/hookover/php-engineer-interview-questions</a></li>\n<li><a href=\"https://www.kancloud.cn/pingfan_/php_interview/916716\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/pingfan_/php_interview/916716</a></li>\n<li><a href=\"https://www.kancloud.cn/i281151/php_questions/174233\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/i281151/php_questions/174233</a></li>\n<li><a href=\"https://www.kancloud.cn/tp5girl/interview/329075\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/tp5girl/interview/329075</a></li>\n<li><a href=\"https://github.com/wudi/PHP-Interview-Best-Practices-in-China\" target=\"_blank\" rel=\"noopener\">https://github.com/wudi/PHP-Interview-Best-Practices-in-China</a></li>\n<li><a href=\"https://my.oschina.net/anyeshe/blog/1550238\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/anyeshe/blog/1550238</a></li>\n<li><a href=\"https://www.jianshu.com/p/ac5cad6d64a8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ac5cad6d64a8</a></li>\n<li><a href=\"https://www.zhaoyafei.cn/content.html?id=150846575347\" target=\"_blank\" rel=\"noopener\">https://www.zhaoyafei.cn/content.html?id=150846575347</a></li>\n<li><a href=\"https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010262869#articleHeader9\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010262869#articleHeader9</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1、基础\"><a href=\"#1、基础\" class=\"headerlink\" title=\"1、基础\"></a>1、基础</h2><h3 id=\"1-1-cookie与session的区别\"><a href=\"#1-1-cookie与session的区别\" class=\"headerlink\" title=\"1.1 cookie与session的区别\"></a>1.1 cookie与session的区别</h3><ul>\n<li>存储位置：session存储于服务器，cookie存储于浏览器</li>\n<li>安全性：session安全性比cookie高</li>\n<li>session为‘会话服务’，在使用时需要开启服务，cookie不需要开启，可以直接用","more":"</li>\n</ul>\n<h3 id=\"1-2-禁用-cookie-后-session-还能用吗\"><a href=\"#1-2-禁用-cookie-后-session-还能用吗\" class=\"headerlink\" title=\"1.2 禁用 cookie 后 session 还能用吗?\"></a>1.2 禁用 cookie 后 session 还能用吗?</h3><p>可以,通过URL传值或者隐藏表单传递Session ID (常用)。</p>\n<p><strong>Session和cookie的工作流程：</strong></p>\n<ol>\n<li><p>你第一次访问网站时，</p>\n</li>\n<li><p>服务端脚本中开启了session_start();，</p>\n</li>\n<li><p>服务器会生成一个不重复的 SESSIONID 的文件session_id();，比如在/var/lib/php/session目录</p>\n</li>\n<li><p>并将返回(Response)如下的HTTP头 Set-Cookie:PHPSESSIONID=xxxxxxx</p>\n</li>\n<li><p>客户端接收到<code>Set-Cookie</code>的头，将PHPSESSIONID写入cookie</p>\n</li>\n<li><p>当你第二次访问页面时，所有Cookie会附带的请求头(Request)发送给服务器端</p>\n</li>\n<li><p>服务器识别PHPSESSIONID这个cookie，然后去session目录查找对应session文件，</p>\n</li>\n<li><p>找到这个session文件后，检查是否过期，如果没有过期，去读取Session文件中的配置；如果已经过期，清空其中的配置</p>\n</li>\n</ol>\n<h3 id=\"1-3-表单中get与post提交方法的区别\"><a href=\"#1-3-表单中get与post提交方法的区别\" class=\"headerlink\" title=\"1.3 表单中get与post提交方法的区别\"></a>1.3 表单中get与post提交方法的区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数接收：</span><br><span class=\"line\"> get：通过url参数传递进行接收,</span><br><span class=\"line\"> post：是实体数据,可以通过表单提交大量信息.</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-数据库中的事务是什么\"><a href=\"#1-4-数据库中的事务是什么\" class=\"headerlink\" title=\"1.4 数据库中的事务是什么\"></a>1.4 数据库中的事务是什么</h3><ul>\n<li>事务（transaction）是作为一个单元的一组有序的数据库操作。<br>如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。<br>如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。<br>如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消</li>\n</ul>\n<h3 id=\"1-5-echo-print-print-r-的区别\"><a href=\"#1-5-echo-print-print-r-的区别\" class=\"headerlink\" title=\"1.5 echo(),print(),print_r()的区别\"></a>1.5 echo(),print(),print_r()的区别</h3><ul>\n<li><p>echo是PHP语句, print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)</p>\n</li>\n<li><p>print() 只能打印出简单类型变量的值(如int,string)</p>\n</li>\n<li><p>print_r() 可以打印出复杂类型变量的值(如数组,对象)</p>\n</li>\n<li><p>echo 输出一个或者多个字符串</p>\n</li>\n</ul>\n<h3 id=\"1-6-用PHP写出显示客户端IP与服务器IP的代码\"><a href=\"#1-6-用PHP写出显示客户端IP与服务器IP的代码\" class=\"headerlink\" title=\"1.6 用PHP写出显示客户端IP与服务器IP的代码\"></a>1.6 用PHP写出显示客户端IP与服务器IP的代码</h3><ul>\n<li><p>打印客户端IP:echo $_SERVER[‘REMOTE_ADDR’]; 或者: getenv(‘REMOTE_ADDR’);</p>\n</li>\n<li><p>打印服务器IP:echo gethostbyname(“<a href=\"http://www.bolaiwu.com&quot;\" target=\"_blank\" rel=\"noopener\">www.bolaiwu.com&quot;</a>)</p>\n</li>\n</ul>\n<h3 id=\"1-7-include和require的区别是什么\"><a href=\"#1-7-include和require的区别是什么\" class=\"headerlink\" title=\"1.7 include和require的区别是什么?\"></a>1.7 include和require的区别是什么?</h3><ul>\n<li><p>require:是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require</p>\n</li>\n<li><p>include:有返回值，而require没有(可能因为如此require的速度比include快)</p>\n</li>\n</ul>\n<blockquote>\n<front color=\"red\">注意:包含文件不存在或者语法错误的时候,require是致命的,include不是</front>\n</blockquote>\n<h3 id=\"1-8-Trait是什么\"><a href=\"#1-8-Trait是什么\" class=\"headerlink\" title=\"1.8 Trait是什么?\"></a>1.8 Trait是什么?</h3><p>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题</p>\n<p>单个Trait使用方法：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">trait</span> ezcReflectionReturnInfo &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getReturnType</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/*1*/</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getReturnDescription</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/*2*/</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ezcReflectionMethod</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReflectionMethod</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">ezcReflectionReturnInfo</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ezcReflectionFunction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReflectionFunction</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">ezcReflectionReturnInfo</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>多个Trait使用方法<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">trait</span> Hello &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Hello '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">trait</span> World &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayWorld</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'World'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Hello</span>, <span class=\"title\">World</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayExclamationMark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$o = <span class=\"keyword\">new</span> MyHelloWorld();</span><br><span class=\"line\">$o-&gt;sayHello();</span><br><span class=\"line\">$o-&gt;sayWorld();</span><br><span class=\"line\">$o-&gt;sayExclamationMark();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-9-php7和php5区别\"><a href=\"#1-9-php7和php5区别\" class=\"headerlink\" title=\"1.9 php7和php5区别\"></a>1.9 php7和php5区别</h3><p><strong>1.PHP7.0 比PHP5.6性能提升了两倍</strong>。<br>1). 变量存储字节减小，减少内存占用，提升变量操作速度</p>\n<p>2). 改善数组结构，数组元素和hash映射表被分配在同一块内存里，降低了内存占用、提升了 cpu 缓存命中率</p>\n<p>3). 改进了函数的调用机制，通过优化参数传递的环节，减少了一些指令，提高执行效率</p>\n<p><strong>2.PHP7.0全面一致支持64位。</strong></p>\n<p><strong>3.PHP7.0之前出现的致命错误，都改成了抛出异常。</strong></p>\n<p><strong>4.增加了空结合操作符（？？）。效果相当于三元运算符。</strong></p>\n<p><strong>5.PHP7.0新增了函数的返回类型声明。</strong></p>\n<p><strong>6.PHP7.0新增了标量类型声明。</strong><br><code>PHP 7 中的函数的形参类型声明可以是标量。在 PHP 5 中只可以是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。</code></p>\n<p><strong>7.新增加了匿名类。</strong></p>\n<p><code>PHP 5.3 开始有了匿名函数，现在又新增了匿名类；</code></p>\n<p><strong>8.PHP7.0之后溢移除了一些老的不再支持的SAPI(服务器端应用编程端口)和扩展。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ereg</span><br><span class=\"line\">   </span><br><span class=\"line\">mssql</span><br><span class=\"line\">   </span><br><span class=\"line\">mysql</span><br><span class=\"line\">   </span><br><span class=\"line\">sybase_ct</span><br></pre></td></tr></table></figure></p>\n<p><strong>9.define 现在可以定义常量数组。</strong></p>\n<h3 id=\"1-10-谈谈对mvc的认识\"><a href=\"#1-10-谈谈对mvc的认识\" class=\"headerlink\" title=\"1.10 谈谈对mvc的认识\"></a>1.10 谈谈对mvc的认识</h3><p><code>模型(model),视图(view),控制器(controller);\n由模型发出要实现的功能到控制器,控制器接收组织功能传递给视图;</code></p>\n<h3 id=\"1-11-请说明php中传值与传引用的区别。什么时候传值什么时候传引用\"><a href=\"#1-11-请说明php中传值与传引用的区别。什么时候传值什么时候传引用\" class=\"headerlink\" title=\"1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?\"></a>1.11 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?</h3><ul>\n<li><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略</p>\n</li>\n<li><p>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改</p>\n</li>\n</ul>\n<blockquote>\n<p>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。<br>按引用传递则不需要复制值，对于性能提高很有好处</p>\n</blockquote>\n<h3 id=\"1-12-从一个标准url-里取出文件的扩展名\"><a href=\"#1-12-从一个标准url-里取出文件的扩展名\" class=\"headerlink\" title=\"1.12 从一个标准url 里取出文件的扩展名\"></a>1.12 从一个标准url 里取出文件的扩展名</h3><p>例如: <a href=\"http://www.sina.com.cn/abc/de/fg.php?id=1\" target=\"_blank\" rel=\"noopener\">http://www.sina.com.cn/abc/de/fg.php?id=1</a> 需要取出php 或.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getExt</span><span class=\"params\">($url)</span></span>&#123;</span><br><span class=\"line\">   $arr = parse_url($url);</span><br><span class=\"line\">   $file = basename($arr[<span class=\"string\">'path'</span>]);</span><br><span class=\"line\">   $ext = explode(<span class=\"string\">\".\"</span>,$file);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $ext[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-13-字符串反转\"><a href=\"#1-13-字符串反转\" class=\"headerlink\" title=\"1.13 字符串反转\"></a>1.13 字符串反转</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strrev</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">  $len = mb_strlen($str);</span><br><span class=\"line\">  $tmp=[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;$len;$i++)&#123;</span><br><span class=\"line\">      $tmp[] = mb_substr($str,$i,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  krsort($tmp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> implode(<span class=\"string\">''</span>,$tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>strrev函数对英文很好用,直接可以实现字符串翻转,但是面对中文会出现乱码</p>\n</blockquote>\n<h3 id=\"1-14-在HTTP-1-0中，状态码401-的含义是；如果返回-“找不到文件”-的提示，则可用header函数，其语句为。\"><a href=\"#1-14-在HTTP-1-0中，状态码401-的含义是；如果返回-“找不到文件”-的提示，则可用header函数，其语句为。\" class=\"headerlink\" title=\"1.14 在HTTP 1.0中，状态码401 的含义是；如果返回 “找不到文件” 的提示，则可用header函数，其语句为。\"></a>1.14 在HTTP 1.0中，状态码401 的含义是<strong><strong>；如果返回 “找不到文件” 的提示，则可用header函数，其语句为</strong></strong>。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答：401表示未授权; header(&quot;HTTP/1.0 404 Not Found&quot;);</span><br><span class=\"line\">[见参考手册》函数参考》HTTP函数》header]</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-15-isset、empty和is-null的区别\"><a href=\"#1-15-isset、empty和is-null的区别\" class=\"headerlink\" title=\"1.15 isset、empty和is_null的区别?\"></a>1.15 isset、empty和is_null的区别?</h3><ul>\n<li>isset 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。</li>\n<li>empty 判断变量是否为空，如果变量是非空或非零的值，则empty() 返回 FALSE。换句话说，”” 、0 、”0”、NULL 、FALSE 、array() 、var $var; 以及没有任何属性的对象都将被认为是空的，如果变量为空，则返回TRUE。　　</li>\n<li>is_null 判断变量是否为NULL</li>\n</ul>\n<h3 id=\"1-16-self、static、-this-的区别\"><a href=\"#1-16-self、static、-this-的区别\" class=\"headerlink\" title=\"1.16 self、static、$this 的区别?\"></a>1.16 self、static、$this 的区别?</h3><ul>\n<li>self 和 <strong>CLASS</strong>，都是对当前类的ip静态引用，取决于定义当前方法所在的类。也就是说，self写在哪个类里面,它引用的就是谁。</li>\n<li>$this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。</li>\n<li>static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。</li>\n<li>self可以用于访问类的静态属性、静态方法和常量，但self指向的是当前定义所在的类，这是 self 的限制。</li>\n<li>$this 指向的对象所属的类和 static 指向的类相同。</li>\n<li>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。</li>\n<li>静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。</li>\n</ul>\n<h3 id=\"1-17-单引号’与双引号”区别\"><a href=\"#1-17-单引号’与双引号”区别\" class=\"headerlink\" title=\"1.17 单引号’与双引号”区别\"></a>1.17 单引号’与双引号”区别</h3><p>  php里的单引号把内容当成纯文本，不会经过服务器翻译。而双引号则与此相反。里面的内容会经过服务器处理(process)；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$foo=<span class=\"string\">\"data\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'$foo'</span>; <span class=\"comment\">//单引号输出$foo</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$foo\"</span>; <span class=\"comment\">//双引号输出data</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-18-如果理解OOP？\"><a href=\"#1-18-如果理解OOP？\" class=\"headerlink\" title=\"1.18 如果理解OOP？\"></a>1.18 如果理解OOP？</h3><p>OOP(object oriented programming)，即面向对象编程，其中两个最重要的概念就是类和对象，类只是具备了某些功能和属性的抽象模型，而实际应用中需要一个一个实体，也就是需要对类进行实例化，类在实例化之后就是对象。</p>\n<h4 id=\"1-OOP具有三大特点：\"><a href=\"#1-OOP具有三大特点：\" class=\"headerlink\" title=\"(1) OOP具有三大特点：\"></a>(1) OOP具有三大特点：</h4><ul>\n<li>封装性：<blockquote>\n<p>将一个类的使用和实现分开,只保留部分接口和方法供外部使用，所以开发人员只需要关注这个类如何使用，而不用去关心其具体的实现过程。</p>\n</blockquote>\n</li>\n<li>继承性：<blockquote>\n<p>子类自动继承其父级类中的属性和方法,并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。 php只支持单继承，也就是说一个子类只能有一个父类。</p>\n</blockquote>\n</li>\n<li>多态性：<blockquote>\n<p>继承了来自父级类中的属性和方法，并对其中部分方法进行重写,于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。多态性增强了软件的灵活性。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1-19-PHP缓存技术有哪些-？\"><a href=\"#1-19-PHP缓存技术有哪些-？\" class=\"headerlink\" title=\"1.19 PHP缓存技术有哪些 ？\"></a>1.19 PHP缓存技术有哪些 ？</h3><ul>\n<li>全页面静态化缓存，也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程</li>\n<li>页面部分缓存，将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示</li>\n<li>数据缓存，通过一个id进行请求的数据,将数据缓存到一个php文件中,id和文件是对应的,下次通过这个id进行请求时 直接读php文件</li>\n<li>查询缓存，和数据缓存差不多,根据查询语句进行缓存;</li>\n</ul>\n<h3 id=\"1-20-接口和抽象类的区别是什么？\"><a href=\"#1-20-接口和抽象类的区别是什么？\" class=\"headerlink\" title=\"1.20 接口和抽象类的区别是什么？\"></a>1.20 接口和抽象类的区别是什么？</h3><ul>\n<li>抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。</li>\n<li><font color=\"red\">抽象类是通过关键字 abstract 来声明的</font>。</li>\n<li>抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，</li>\n<li>抽象方法没有方法体，该方法天生就是要被子类重写的。</li>\n<li>抽象方法的格式为：abstract function abstractMethod();</li>\n<li>因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。</li>\n<li><font color=\"red\">接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public</font>，</li>\n<li>接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。</li>\n<li><font color=\"red\">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现</font>。</li>\n<li><font color=\"red\">子类继承抽象类使用extends，子类实现接口使用implements</font>。</li>\n</ul>\n<h3 id=\"1-21-常见-HTTP-状态码，分别代表什么含义\"><a href=\"#1-21-常见-HTTP-状态码，分别代表什么含义\" class=\"headerlink\" title=\"1.21 常见 HTTP 状态码，分别代表什么含义\"></a>1.21 常见 HTTP 状态码，分别代表什么含义</h3><ul>\n<li>200:请求成功</li>\n<li>206:部分内容<blockquote>\n<p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具，都是使用此类响应实现断点续传，或者将一个大文档分解为多个下载段同时下载。</p>\n</blockquote>\n</li>\n<li>301:永久重定向</li>\n<li>302:临时重定向</li>\n<li>400:错误请求</li>\n<li>401:未经授权</li>\n<li>403:禁止访问</li>\n<li>404:文件未找到</li>\n<li>500:内部服务器错误</li>\n<li>502:无效网关</li>\n</ul>\n<h3 id=\"1-22-计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\"><a href=\"#1-22-计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\" class=\"headerlink\" title=\"1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒\"></a>1.22 计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒</h3><h4 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * function：计算两个日期相隔多少年，多少月，多少天，多少小时，多少分钟，多少秒</span></span><br><span class=\"line\"><span class=\"comment\"> * param string $date1[格式如：2011-11-5]</span></span><br><span class=\"line\"><span class=\"comment\"> * param string $date2[格式如：2012-12-01]</span></span><br><span class=\"line\"><span class=\"comment\"> * return array array('年','月','日');</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffDate</span><span class=\"params\">($date1,$date2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $datetime1 = <span class=\"keyword\">new</span> \\DateTime($date1);</span><br><span class=\"line\">    $datetime2 = <span class=\"keyword\">new</span> \\DateTime($date2);</span><br><span class=\"line\">    $interval = $datetime1-&gt;diff($datetime2);</span><br><span class=\"line\">    $time[<span class=\"string\">'y'</span>]         = $interval-&gt;format(<span class=\"string\">'%Y'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'m'</span>]         = $interval-&gt;format(<span class=\"string\">'%m'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'d'</span>]         = $interval-&gt;format(<span class=\"string\">'%d'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'h'</span>]         = $interval-&gt;format(<span class=\"string\">'%H'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'i'</span>]         = $interval-&gt;format(<span class=\"string\">'%i'</span>);</span><br><span class=\"line\">    $time[<span class=\"string\">'s'</span>]         = $interval-&gt;format(<span class=\"string\">'%s'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $time;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用实例</span></span><br><span class=\"line\">$sss = diffDate(<span class=\"string\">'2018-12-25 12:30:30'</span>, <span class=\"string\">'2018-12-26 15:00:00'</span>);</span><br><span class=\"line\">print_r($sss);</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [y] =&gt; 00</span><br><span class=\"line\">    [m] =&gt; 0</span><br><span class=\"line\">    [d] =&gt; 1</span><br><span class=\"line\">    [h] =&gt; 02</span><br><span class=\"line\">    [i] =&gt; 29</span><br><span class=\"line\">    [s] =&gt; 30</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、进阶\"><a href=\"#2、进阶\" class=\"headerlink\" title=\"2、进阶\"></a>2、进阶</h2><h3 id=\"2-1-yield-是什么，说个使用场景\"><a href=\"#2-1-yield-是什么，说个使用场景\" class=\"headerlink\" title=\"2.1 yield 是什么，说个使用场景\"></a>2.1 yield 是什么，说个使用场景</h3><ul>\n<li>yield是生成器函数的核心关键字，</li>\n<li>使用场景：协程可以用在，异步网络 IO 的时候，使其成为非阻塞的，</li>\n</ul>\n<p><a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"noopener\">在PHP中使用协程实现多任务调度</a></p>\n<h3 id=\"2-2-session共享方案\"><a href=\"#2-2-session共享方案\" class=\"headerlink\" title=\"2.2 session共享方案\"></a>2.2 session共享方案</h3><ul>\n<li><p>搭建redis集群或者memcached集群，用集群自带的同步方法来帮我们在不同的主机中同步session，这样就相当于把原来的一份session变成了N分session，session的同步就依赖于NoSql集群的同步了。</p>\n</li>\n<li><p>单独设置一个session服务器，负载服务器得到一个sessionid过后，去session服务器获得会话状态，然后根据状态来响应用户请求，如果会话状态为空，则在session服务器中设置一个会话状态，然后返回给用户一个sessionid。</p>\n</li>\n</ul>\n<h3 id=\"2-3-php7-2-为什么弃用-autoload\"><a href=\"#2-3-php7-2-为什么弃用-autoload\" class=\"headerlink\" title=\"2.3 php7.2 为什么弃用__autoload\"></a>2.3 php7.2 为什么弃用__autoload</h3><p><code>自动加载的原理，就是在我们new一个class的时候，PHP系统如果找不到你这个类，就会去自动调用本文件中的__autoload($class_name)方法，我们new的这个class_name 就成为这个方法的参数。所以我们就可以在这个方法中根据我们需要new class_name的各种判断和划分就去require对应的路径类文件，从而实现自动加载。</code></p>\n<p><strong>弃用原因</strong>:因是PHP不允许函数重名，所以一个项目中仅能出现一个<strong>autoload函数。自己写的代码保证只有一个</strong>autoload函数虽然有点难但也能做到，要是第三方库也定义了<strong>autoload，那就很头疼了。</strong>autoload的后继者是<a href=\"http://php.net/manual/zh/function.spl-autoload-register.php\" target=\"_blank\" rel=\"noopener\">spl_autoload_register</a>函数</p>\n<h3 id=\"2-4-计算文件或数组中单词出现频率\"><a href=\"#2-4-计算文件或数组中单词出现频率\" class=\"headerlink\" title=\"2.4 计算文件或数组中单词出现频率\"></a>2.4 计算文件或数组中单词出现频率</h3><ul>\n<li><p>如果是小文件，可以一次性读入到数组中，使用方便的数组计数函数进行词频统计（假设文件中内容都是空格隔开的单词）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> $file = <span class=\"string\">'./test.txt'</span>;</span><br><span class=\"line\"> $str  = file_get_contents($file);</span><br><span class=\"line\"> preg_match_all(<span class=\"string\">\"/\\b(\\w+[-]\\w+)|(\\w+)\\b/\"</span>, $str, $r);</span><br><span class=\"line\"> $words = array_count_values(array_map(<span class=\"string\">\"strtolower\"</span>, $r[<span class=\"number\">0</span>]));</span><br><span class=\"line\"> arsort($words);</span><br><span class=\"line\"> var_dump($words);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是大文件，读入内存就不合适了，可以采用如下方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$file=<span class=\"string\">'./test.txt'</span>;</span><br><span class=\"line\">$handle = fopen($file,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">$words=[];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (($line = fgets($handle)) !== <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//把换行符替换成空格</span></span><br><span class=\"line\">    $line = str_replace([<span class=\"string\">\"\\r\"</span>,<span class=\"string\">\"\\n\"</span>,<span class=\"string\">\"\\r\\n\"</span>],<span class=\"string\">' '</span>,$line);</span><br><span class=\"line\">    $tmp = explode(<span class=\"string\">' '</span>,$line);</span><br><span class=\"line\">    $tmp = array_filter($tmp);</span><br><span class=\"line\">    $words = array_merge($words,$tmp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$words = array_count_values($words);</span><br><span class=\"line\">arsort($words);</span><br><span class=\"line\">var_dump($words);</span><br><span class=\"line\">fclose($handle);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/Alight/p/3947591.html\" target=\"_blank\" rel=\"noopener\">PHP对大文件的处理思路</a></p>\n<h2 id=\"3、数据库\"><a href=\"#3、数据库\" class=\"headerlink\" title=\"3、数据库\"></a>3、数据库</h2><h3 id=\"3-1-Mysql的存储引擎-MyISAM和InnoDB的区别。\"><a href=\"#3-1-Mysql的存储引擎-MyISAM和InnoDB的区别。\" class=\"headerlink\" title=\"3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。\"></a>3.1 Mysql的存储引擎,MyISAM和InnoDB的区别。</h3><ul>\n<li>MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持.</li>\n<li>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快.</li>\n<li>InnoDB不支持FULLTEXT(全文索引) 类型的索引.</li>\n<li><p>InnoDB 中不保存表的具体行数.</p>\n<blockquote>\n<p>也就是说执行 ：select count(*) from table时，<br> InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可.</p>\n</blockquote>\n</li>\n<li><p>对于AUTO_INCREMENT(递增)类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p>\n</li>\n<li>DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</li>\n<li>Load Table From Master 操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用.</li>\n<li>MyISAM支持表锁，InnoDB支持行锁。</li>\n</ul>\n<h3 id=\"3-2-delete-drop-truncate区别\"><a href=\"#3-2-delete-drop-truncate区别\" class=\"headerlink\" title=\"3.2 delete drop truncate区别\"></a>3.2 delete drop truncate区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。</span><br><span class=\"line\">- 删除数据的速度，一般来说: drop&gt; truncate &gt; delete</span><br><span class=\"line\">- delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚</span><br><span class=\"line\"></span><br><span class=\"line\">- 使用场合：</span><br><span class=\"line\">  1.当你不再需要该表时， 用drop;</span><br><span class=\"line\">  2.当你仍要保留该表，但要删除所有记录时， 用truncate;</span><br><span class=\"line\">  3.当你要删除部分记录时（always with a where clause), 用 delete.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于有主外键关系的表，不能使用truncate而应该使用不带where子句的delete语句，由于truncate不记录在日志中，不能够激活触发器</p>\n</blockquote>\n<h3 id=\"3-3-优化MYSQL数据库的方法\"><a href=\"#3-3-优化MYSQL数据库的方法\" class=\"headerlink\" title=\"3.3 优化MYSQL数据库的方法\"></a>3.3 优化MYSQL数据库的方法</h3><ul>\n<li>选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL,例如’省份,性别’,最好设置为ENUM</li>\n<li><p>使用连接（JOIN）来代替子查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.删除没有任何订单客户:</span><br><span class=\"line\">DELETE FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)</span><br><span class=\"line\"></span><br><span class=\"line\">b.提取所有没有订单客户:</span><br><span class=\"line\">SELECT FROM customerinfo WHERE customerid NOT in(SELECT customerid FROM orderinfo)</span><br><span class=\"line\"> </span><br><span class=\"line\">c.提高b的速度优化:</span><br><span class=\"line\">SELECT FROM customerinfo LEFT JOIN orderid customerinfo.customerid=orderinfo.customerid WHERE orderinfo.customerid IS NULL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用联合(UNION)来代替手动创建的临时表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT name FROM `nametest` UNION SELECT username FROM `nametest2`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事务处理</p>\n<blockquote>\n<p>保证数据完整性,例如添加和修改同时,两者成立则都执行,一者失败都失败。</p>\n</blockquote>\n</li>\n<li><p>锁定表,优化事务处理</p>\n<p><code>我们用一个 SELECT 语句取出初始数据，通过一些计算，用 UPDATE 语句将新值更新到表中。包含有 WRITE 关键字的 LOCK TABLE 语句可以保证在 UNLOCK TABLES 命令被执行之前，不会有其它的访问来对 inventory 进行插入、更新或者删除的操作.</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_query(&quot;LOCK TABLE customerinfo READ, orderinfo WRITE&quot;);</span><br><span class=\"line\">mysql_query(&quot;SELECT customerid FROM `customerinfo` where id=&quot;.$id);</span><br><span class=\"line\">mysql_query(&quot;UPDATE `orderinfo` SET ordertitle=&apos;$title&apos; where customerid=&quot;.$id);</span><br><span class=\"line\">mysql_query(&quot;UNLOCK TABLES&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立索引<br><a href=\"https://mrliuqh.github.io/2017/09/17/php-interView-question/#3-7-索引类型\" target=\"_blank\" rel=\"noopener\">索引类型,请看3.7</a></p>\n</li>\n<li><p>优化查询语句</p>\n<ul>\n<li>避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li>\n<li>避免全表扫描，首先应考虑在where及order by涉及的列上建立索引</li>\n<li>避免在 where子句中对字段进行null值判断，会引起全表扫描<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：select id from test where num is null</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<font color=\"red\">因此字段都应设置为NOT NULL，将来查询的时候就不用去比较NULL值</font>\n</blockquote>\n<ul>\n<li>避免在where子句中使用or来连接条件，会引起全表扫描<br><code>如：select id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10 union all select id from t where num=20</code></li>\n<li>in 和 not in 也要慎用，否则会导致全表扫描</li>\n<li>避免在 where 子句中对字段进行表达式操作</li>\n</ul>\n<p><code>如：select id from t where num/2=100\n应改为：\nselect id from t where num =100*2</code></p>\n<ul>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，一个表的索引数最好不要超过6个。</p>\n</li>\n<li><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li><p>通过explain查询和分析SQL的执行计划<br><img src=\"https://mrliuqh.github.io/directionsImg/mysql/explain.png\" alt=\"image\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-mysql-fetch-row-和-mysql-fetch-array-有什么分别？\"><a href=\"#3-4-mysql-fetch-row-和-mysql-fetch-array-有什么分别？\" class=\"headerlink\" title=\"3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？\"></a>3.4 mysql_fetch_row() 和 mysql_fetch_array() 有什么分别？</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_fetch_row()</span><br><span class=\"line\"> 返回的结果集是索引数组。</span><br><span class=\"line\">mysql_fetch_assoc()</span><br><span class=\"line\">  返回的结果集是关联数组</span><br><span class=\"line\">mysql_fetch_array()</span><br><span class=\"line\"> 既可以返回索引数组也可以返回关联数组，</span><br><span class=\"line\"> 取决于它的第二个参数 MYSQL_BOTH MYSQL_NUM MYSQL_ASSOC 默认为MYSQL_BOTH</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-php访问数据库有哪几步\"><a href=\"#3-5-php访问数据库有哪几步\" class=\"headerlink\" title=\"3.5 php访问数据库有哪几步?\"></a>3.5 php访问数据库有哪几步?</h3><p> 1.连接数据库服务器：<br> <code>mysql_connect(&#39;数据库服务器的主机名或ip&#39;,&#39;数据库服务器的用户名&#39;,&#39;数据库服务器的密码&#39;);</code><br> 2.选择数据库：<br> <code>mysql_select_db(数据库名);</code><br> 3.设置从数据库提取数据的字符集：<br> <code>mysql_query(&quot;set names utf8&quot;);</code><br> 4.执行sql语句：<br> <code>mysql_query(sql语句);</code><br> 5.关闭结果集，释放资源：<br> <code>mysql_free_result($result);</code><br> 6.关闭与数据库服务器的连接：<br> <code>mysql_close($link);</code></p>\n<h3 id=\"3-6-表设计三大范式\"><a href=\"#3-6-表设计三大范式\" class=\"headerlink\" title=\"3.6 表设计三大范式\"></a>3.6 表设计三大范式</h3><ul>\n<li>1．第一范式(原子性):所有字段值都是不可分解的原子值       </li>\n<li>2．第二范式(在第一范式的基础上):确保表中的每列都和主键相关，即一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中</li>\n<li>3．第三范式(在第二范式的基础上):确保每列都和主键列直接关联,而不是间接相关</li>\n</ul>\n<h3 id=\"3-7-索引类型\"><a href=\"#3-7-索引类型\" class=\"headerlink\" title=\"3.7 索引类型\"></a>3.7 索引类型</h3><ul>\n<li><p>普通索引(index):<br><code>创建:\nCREATE INDEX &lt;索引名&gt; ON tablename (索引字段)\n修改:\nALTER TABLE tablename ADD INDEX [索引名] (索引字段)\n创表指定索引:\nCREATE TABLE tablename([...],INDEX[索引名](索引字段))</code></p>\n</li>\n<li><p>唯一索引(unique):<br><font color=\"red\">在普通索引的基础上，会进行排除重复值</font><br><code>创建:\nCREATE UNIQUE &lt;索引名&gt; ON tablename (索引字段)\n修改:\nALTER TABLE tablename ADD UNIQUE [索引名] (索引字段)\n创表指定索引:\n CREATE TABLE tablename([...],UNIQUE[索引名](索引字段))</code></p>\n</li>\n<li><p>主键(primary key):<br><font color=\"red\">和唯一索引的区别在于一个表里只能有一个主键索引，但是唯一索引可以有多个</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">它是唯一索引,一般在创建表是建立</span><br><span class=\"line\">语法：</span><br><span class=\"line\"> CREATA TABLE tablename ([...],PRIMARY KEY[索引字段])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>联合索引:<br><code>语法：\nALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3 )</code></p>\n</li>\n<li><p>全文索引 (fulltext)</p>\n</li>\n</ul>\n<h4 id=\"普通索引／唯一索引／主键索引-哪个速度更快？\"><a href=\"#普通索引／唯一索引／主键索引-哪个速度更快？\" class=\"headerlink\" title=\"普通索引／唯一索引／主键索引 哪个速度更快？\"></a>普通索引／唯一索引／主键索引 哪个速度更快？</h4><p><code>速度是一样的快，因为三者都是采用btree二叉树算法进行查找。</code></p>\n<h3 id=\"3-8-索引算法\"><a href=\"#3-8-索引算法\" class=\"headerlink\" title=\"3.8 索引算法\"></a>3.8 索引算法</h3><ul>\n<li><p>BTREE算法</p>\n<blockquote>\n<p>Innodb和MyISAM默认的索引是BTREE索引<br>采用二叉树算法，左边的树枝小于根节点关键词，右边大于根节点，两边的树的深度不大于1，从而降低时间复杂度。</p>\n</blockquote>\n</li>\n<li><p>HASH算法</p>\n<blockquote>\n<p>Mermory默认的索引是Hash索引<br>Hash索引只能用于HASH值比较，例如=,&lt;&gt; 操作符，不像BTREE索引需要从根节点到枝节点，最后才能访问到页节点这样多次IO访问，所以检索效率远高于BTREE索引。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"为什么不默认采用HASH索引呢？\"><a href=\"#为什么不默认采用HASH索引呢？\" class=\"headerlink\" title=\"为什么不默认采用HASH索引呢？\"></a><font>为什么不默认采用HASH索引呢？</font></h4><blockquote>\n<p>HASH只能用在=和&lt;&gt;上，所以功能受限，所以默认采用BTREE。</p>\n</blockquote>\n<h3 id=\"3-9-insert-和-replace的区别\"><a href=\"#3-9-insert-和-replace的区别\" class=\"headerlink\" title=\"3.9 insert 和 replace的区别\"></a>3.9 insert 和 replace的区别</h3><p><code>replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。</code></p>\n<blockquote>\n<font color=\"red\">要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</font>\n</blockquote>\n<ul>\n<li><strong>MySQL replace into 有三种形式：</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace into tbl_name(col_name, ...) values(...)</span><br><span class=\"line\"></span><br><span class=\"line\">replace into tbl_name(col_name, ...) select ...</span><br><span class=\"line\"></span><br><span class=\"line\">replace into tbl_name set col_name=value, ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值</p>\n</blockquote>\n<h3 id=\"3-10-数据库操作事务的四大特性\"><a href=\"#3-10-数据库操作事务的四大特性\" class=\"headerlink\" title=\"3.10 数据库操作事务的四大特性\"></a>3.10 数据库操作事务的四大特性</h3><h4 id=\"3-10-1-事务操作数据库的四大特性-ACID\"><a href=\"#3-10-1-事务操作数据库的四大特性-ACID\" class=\"headerlink\" title=\"3.10.1 事务操作数据库的四大特性(ACID)\"></a>3.10.1 事务操作数据库的四大特性(ACID)</h4><ul>\n<li>原子性 (Atomicity):就是事务的所包含的所有操作，要么全部成功，要么全部失败回滚。</li>\n<li>一致性 (Consistency):简单来说就是在事务执行前和执行后，必须保持数据的一致。</li>\n<li><p>隔离性 (Isolation):一个事务执行的过程当中，不能被其他的事务干扰。</p>\n<blockquote>\n<p>比如有事务A和事务B，相对于A来说，B想要执行，要么在我执行之前执行，要么在我执行完毕之后，你再开始执行.</p>\n</blockquote>\n</li>\n<li><p>持久性 (Durability):事务被提交之后，他就被永久的存储到了数据库当中.</p>\n</li>\n</ul>\n<h4 id=\"3-10-2-不考虑事务的隔离性所引发的问题\"><a href=\"#3-10-2-不考虑事务的隔离性所引发的问题\" class=\"headerlink\" title=\"3.10.2 不考虑事务的隔离性所引发的问题\"></a>3.10.2 不考虑事务的隔离性所引发的问题</h4><ul>\n<li>脏读:一个事务读取到了一个未提交的事务的数据。</li>\n<li>不可重复读:<blockquote>\n<p>在读取数据库的某条数据的时候返回了不同的值，造成这个结果的原因是因为我们在查询了一次之后准备进行第二次查询的这个间隔之间，对我们要进行查询的这条数据进行了修改操作，从而导致两次读取的数据不一致。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>脏读和不可重复读的区别:脏读是一个事务读取到了一个未提交事务的脏数据，而不可重复读是一个数据读取了一个已经提交了的事务的数据。</p>\n</blockquote>\n<ul>\n<li>虚读(幻读)<blockquote>\n<p>出现幻读不是对一条数据的操作而产生的问题，而是操作多条数据产生的问题，例如：事务A想要对一张表中的某一字段的值进行修改，假设有一个字段的值全部为1，事务A现在想要将1全部修改为2，在提交事务之后，事务B接着又进行了一个操作，在这张表中添加了一个字段，值全部为1。那么这时候操作事务A的用户在查看的时候，会发现还有一行数据没有进行修改，其实这是事务B在他查看之前添加的。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>幻读和不可重复读都是读取了一个已经提交的事务，而脏读是读取了一个未提交的事务。不同的是不可重复读查询的是同一条数据，而虚读查询的是批量数据。</p>\n</blockquote>\n<h3 id=\"3-11-MySQL数据库的四种隔离级别\"><a href=\"#3-11-MySQL数据库的四种隔离级别\" class=\"headerlink\" title=\"3.11  MySQL数据库的四种隔离级别\"></a>3.11  MySQL数据库的四种隔离级别</h3><ul>\n<li>Serializable (序列化)：可避免脏读、不可重读读、幻读的发生</li>\n<li>Repeatable-read (可重复读)：可避免脏读、不可重复读的发生。</li>\n<li>Read-committed (读已提交)：可避免脏读的发生。</li>\n<li>Read-uncommitted (读未提交)：最低级别，任何情况都无法保证。<blockquote>\n<p>以上四种的隔离级别最高的Serializable，最低的是Read uncommitted，级别越高，虽然安全级别越高，但是执行的效率就越低，MySQL中默认的隔离级别是:Repeatable read(可重复读)，oracle默认的隔离级别是：Read committed(读已提交)。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<font color=\"red\">这里需要注意的是，mysql支持以上四种隔离级别，但是oracle只支持Serializable(串行化)和Read committed(读已提交)这两种隔离级别。</font>\n</blockquote>\n<ul>\n<li><p>MySQL中查看当前的事务隔离界别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置mysql的隔离级别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set tx_isolation=&apos;read-uncommitted&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<font color=\"red\">记住:设置数据库的隔离级别一定要是在开启事务之前！</font>\n</blockquote>\n<blockquote>\n<p>隔离级别的设置只对当前的链接有效。对于MySQL窗口来说，一个窗口就是一个链接，当前设置的事务隔离级别只对当前的窗口有效。</p>\n</blockquote>\n<h2 id=\"4、缓存\"><a href=\"#4、缓存\" class=\"headerlink\" title=\"4、缓存\"></a>4、缓存</h2><h3 id=\"4-1-Memcache和Redis区别\"><a href=\"#4-1-Memcache和Redis区别\" class=\"headerlink\" title=\"4.1 Memcache和Redis区别\"></a>4.1 Memcache和Redis区别</h3><ul>\n<li><strong>数据类型</strong>：都是k/v数据库，但memcache只支持string，redis除了string，还支持list，set，hash等数据</li>\n<li><strong>持久化</strong>：memcache不支持内存持久化，redis支持。</li>\n<li><strong>内存管理</strong>：memcache内存用完时，会删除用得最少的缓存；redis内存用完时，会把最少的缓存交换到磁盘里。</li>\n</ul>\n<h3 id=\"4-2-如何提高memcache的缓存命中率\"><a href=\"#4-2-如何提高memcache的缓存命中率\" class=\"headerlink\" title=\"4.2 如何提高memcache的缓存命中率\"></a>4.2 如何提高memcache的缓存命中率</h3><ul>\n<li>合理组合缓存 Key，保证Key最大复用率。</li>\n<li>合理设置过期时间，减少因为缓存数据过期后被穿透</li>\n</ul>\n<h2 id=\"5、服务器\"><a href=\"#5、服务器\" class=\"headerlink\" title=\"5、服务器\"></a>5、服务器</h2><h3 id=\"5-1-Apache与Nginx的优缺点比较\"><a href=\"#5-1-Apache与Nginx的优缺点比较\" class=\"headerlink\" title=\"5.1 Apache与Nginx的优缺点比较\"></a>5.1 Apache与Nginx的优缺点比较</h3><p>1、nginx相对于apache的优点：<br>轻量级，比apache 占用更少的内存及资源。高度模块化的设计，编写模块相对简单抗并发，nginx处理请求是异步非阻塞，多个连接（万级别）可以对应一个进程，而apache 则是阻塞型的，是同步多进程模型，一个连接对应一个进程，在高并发下nginx 能保持低资源低消耗高性能。nginx处理静态文件好，Nginx 静态处理性能比 Apache 高 3倍以上<br>2、apache 相对于nginx 的优点：<br>apache 的rewrite 比nginx 的rewrite 强大 ，模块非常多，基本想到的都可以找到 ，比较稳定，少bug ，nginx的bug相对较多<br>3：Nginx比Apache快的原因：这得益于Nginx使用了最新的epoll（Linux 2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。</p>\n<blockquote>\n<p>目前Linux下能够承受高并发访问的 Squid、Memcached都采用的是epoll网络I/O模型。 处理大量的连接的读写，Apache所采用的select网络I/O模型非常低效。</p>\n</blockquote>\n<h3 id=\"5-2-fastcgi、cgi、php-fpm\"><a href=\"#5-2-fastcgi、cgi、php-fpm\" class=\"headerlink\" title=\"5.2 fastcgi、cgi、php-fpm\"></a>5.2 fastcgi、cgi、php-fpm</h3><ul>\n<li><p>fastcgi和cgi的区别<br><code>在web服务器方面在对数据进行处理的进程方面</code>:<br>a. cgi fork一个新的进程进行处理读取参数，处理数据，然后就结束生命期。<br>b. fastcgi 用tcp方式跟远程机子上的进程或本地进程建立连接要开启tcp端口，进入循环，等待数据的到来，处理数据。</p>\n</li>\n<li><p>php-fpm的作用<br><code>那PHP-FPM又是什么呢？它是一个实现了Fastcgi协议的程序,用来管理Fastcgi起的进程的,即能够调度php-cgi进程的程序。现已在PHP内核中就集成了PHP-FPM，使用--enalbe-fpm这个编译参数即可。另外，修改了php.ini配置文件后，没办法平滑重启，需要重启php-fpm才可。此时新fork的worker会用新的配置，已经存在的worker继续处理完手上的活</code></p>\n</li>\n</ul>\n<blockquote>\n<p>举个例子: 服务端现在有个10万个字单词， 客户每次会发来一个字符串，问以这个字符串为前缀的单词有多少个。 那么可以写一个程序，这个程序会建一棵trie树，然后每次用户请求过来时可以直接到这个trie去查找。 但是如果以cgi的方式的话，这次请求结束后这课trie也就没了，等下次再启动该进程时，又要新建一棵trie树，这样的效率就太低下了。 而用fastcgi的方式的话，这课trie树在进程启动时建立，以后就可以直接在trie树上查询指定的前缀了</p>\n</blockquote>\n<h3 id=\"5-3-为什么使用独立文件服务器？\"><a href=\"#5-3-为什么使用独立文件服务器？\" class=\"headerlink\" title=\"5.3 为什么使用独立文件服务器？\"></a>5.3 为什么使用独立文件服务器？</h3><ul>\n<li>从服务器本身来说，单台的话会加大机器IO负载,多台(负载均衡)的话涉及到文件同步的问题</li>\n<li>浏览器对一个域名下的并发是有数量限制的，独立域名的文件服务器会加快响应</li>\n<li>防止域名污染，请求图片的时候是不用带上cookie</li>\n</ul>\n<h2 id=\"6、算法\"><a href=\"#6、算法\" class=\"headerlink\" title=\"6、算法\"></a>6、算法</h2><h3 id=\"6-1-写一个函数，算出两个文件的相对路径\"><a href=\"#6-1-写一个函数，算出两个文件的相对路径\" class=\"headerlink\" title=\"6.1 写一个函数，算出两个文件的相对路径\"></a>6.1 写一个函数，算出两个文件的相对路径</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countOppose</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  $arr1 = explode(<span class=\"string\">'/'</span>, $pathA);</span><br><span class=\"line\">  $arr2 = explode(<span class=\"string\">'/'</span>, $pathB);</span><br><span class=\"line\">  <span class=\"comment\">// 获取相同路径的部分</span></span><br><span class=\"line\">  $intersection = array_intersect_assoc($arr1, $arr2);</span><br><span class=\"line\">  $depth =count($intersection);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 将path2的/ 转为 ../，path1获取后面的部分，然后合拼</span></span><br><span class=\"line\">  <span class=\"comment\">// 计算前缀</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count($arr2) - $depth - <span class=\"number\">1</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      $prefix = array_fill(<span class=\"number\">0</span>, count($arr2) - $depth - <span class=\"number\">1</span>, <span class=\"string\">'..'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $prefix = <span class=\"keyword\">array</span>(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $tmp = array_merge($prefix, array_slice($arr1, $depth));</span><br><span class=\"line\">  $relativePath = implode(<span class=\"string\">'/'</span>, $tmp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $relativePath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-php排序算法汇总\"><a href=\"#6-2-php排序算法汇总\" class=\"headerlink\" title=\"6.2 php排序算法汇总\"></a>6.2 <a href=\"https://mrliuqh.github.io/2018/01/12/php-sort/\" target=\"_blank\" rel=\"noopener\">php排序算法汇总</a></h3><h3 id=\"6-3-遍历一个文件夹下的所有文件和子文件夹\"><a href=\"#6-3-遍历一个文件夹下的所有文件和子文件夹\" class=\"headerlink\" title=\"6.3 遍历一个文件夹下的所有文件和子文件夹\"></a>6.3 遍历一个文件夹下的所有文件和子文件夹</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childForDir</span><span class=\"params\">($dir)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $files = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!is_dir($dir)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $dir;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $handle = opendir($dir);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$handle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取出.和..</span></span><br><span class=\"line\">    readdir($handle);</span><br><span class=\"line\">    readdir($handle);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//遍历剩余的文件和目录</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($file = readdir($handle)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_dir($file)) &#123;</span><br><span class=\"line\">            $files[$file] = <span class=\"keyword\">$this</span>-&gt;childForDir($file);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $files[] = $dir . <span class=\"string\">'/'</span> . $file;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    closedir($handle);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-猴子选大王\"><a href=\"#6-4-猴子选大王\" class=\"headerlink\" title=\"6.4 猴子选大王\"></a>6.4 猴子选大王</h3><p> 一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停 的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">monkeyKingNum</span><span class=\"params\">($allNum, $m)</span></span>&#123;</span><br><span class=\"line\">  $arr = range(<span class=\"number\">1</span>,$allNum);</span><br><span class=\"line\">  $num = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(count($arr) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> ($arr <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>($num == $m)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">unset</span>($arr[$key]);</span><br><span class=\"line\">              $num = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              $num++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $monkeyKingNum = array_values($arr)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $monkeyKingNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">monkeyKingNum(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-5-二分查找\"><a href=\"#6-5-二分查找\" class=\"headerlink\" title=\"6.5 二分查找\"></a>6.5 二分查找</h3><p><code>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好;其缺点是要求待查表为有序表，且插入删除困难。\n 因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $data //待查找的元素数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $min //开始元素的下标</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $max //结束元素的下标</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $k //待查找的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span><span class=\"params\">($data,$min,$max,$k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($min &lt;= $max)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算中间的元素下标</span></span><br><span class=\"line\">        $mid = intval(($min +$max)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($data[$mid] == $k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果相等,则找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> $mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($k &lt; $data[$mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">//元素下标在前面一部分</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch($data, $min, $mid<span class=\"number\">-1</span>, $k);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//元素下标在后面一部分</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch($data, $mid+<span class=\"number\">1</span>, $max, $k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、设计模式\"><a href=\"#7、设计模式\" class=\"headerlink\" title=\"7、设计模式\"></a>7、设计模式</h2><h3 id=\"7-1单例模式（三私一公）\"><a href=\"#7-1单例模式（三私一公）\" class=\"headerlink\" title=\"7.1单例模式（三私一公）\"></a>7.1单例模式（三私一公）</h3><blockquote>\n<p>单例模式的用途,是对系统资源的节省, 可以避免重复实例化,而PHP每次执行完都会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的, 这样就失去了单例重复实例化的意义了. 单单从这个方面来说, PHP的单例的确有点让各位失望. </p>\n</blockquote>\n<blockquote>\n<p>但是php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时(废话), 如果使用单例模式, 则可以避免大量的new 操作消耗的资源。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有化后在类内部保存对象并且防止外部访问到</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $obj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私有化后防止在外部创建新的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//公有并且静态方法在类外面可以通过类名直接访问</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>::$obj==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>::$obj=<span class=\"keyword\">new</span> <span class=\"keyword\">self</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私有化克隆执行的方法,防止在外部被克隆</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2工厂模式\"><a href=\"#7-2工厂模式\" class=\"headerlink\" title=\"7.2工厂模式\"></a>7.2工厂模式</h3><p>工厂模式具体可分为四类：简单工厂，工厂方法，抽象工厂、静态工厂；</p>\n<blockquote>\n<p>简单工厂模式:静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同,返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。。</p>\n</blockquote>\n<p>示例代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//简单工厂模式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"I am Cat class &lt;br&gt;\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"I am Dog class &lt;br&gt;\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateAnimal</span><span class=\"params\">($name)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($name == <span class=\"string\">'cat'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">elseif</span> ($name == <span class=\"string\">'dog'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cat = Factory::CreateAnimal(<span class=\"string\">'cat'</span>);</span><br><span class=\"line\">$dog = Factory::CreateAnimal(<span class=\"string\">'dog'</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<font color=\"red\">IUser 接口定义用户对象应执行什么操作。IUser 的实现称为 User，UserFactory 工厂类则创建 IUser 对象 </font>\n</blockquote>\n<ul>\n<li><p><a href=\"https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/FactoryMethod/README.html\" target=\"_blank\" rel=\"noopener\">工厂方法，查看详情</a></p>\n</li>\n<li><p><a href=\"https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/AbstractFactory/README.html\" target=\"_blank\" rel=\"noopener\">抽象工厂，查看详情</a></p>\n</li>\n<li><p><a href=\"https://designpatternsphp.readthedocs.io/zh_CN/latest/Creational/StaticFactory/README.html\" target=\"_blank\" rel=\"noopener\">静态工厂，查看详情</a></p>\n</li>\n</ul>\n<h3 id=\"7-3-建造者模式（生成器模式）\"><a href=\"#7-3-建造者模式（生成器模式）\" class=\"headerlink\" title=\"7.3 建造者模式（生成器模式）\"></a>7.3 建造者模式（生成器模式）</h3><p>又名：生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>\n<blockquote>\n<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。例如，一辆汽车由轮子，发动机以及其他零件组成，对于普通人而言，我们使用的只是一辆完整的车，这时，我们需要加入一个构造者，让他帮我们把这些组件按序组装成为一辆完整的车</p>\n</blockquote>\n<ul>\n<li>Builder：抽象构造者类，为创建一个Product对象的各个部件指定抽象接口。</li>\n<li>ConcreteBuilder：具体构造者类，实现Builder的接口以构造和装配该产品的各个部件。定义并明确它所创建的表示。提供一个检索产品的接口</li>\n<li>Director：指挥者，构造一个使用Builder接口的对象。</li>\n<li>Product：表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。</li>\n</ul>\n<p> <strong>示例代码</strong>：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $car;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car-&gt;setPartA(<span class=\"string\">'发动机'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car-&gt;setPartB(<span class=\"string\">'轮子'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;car-&gt;setPartC(<span class=\"string\">'其他零件'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;car;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $partA;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $partB;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> $partC;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPartA</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;partA = $str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPartB</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;partB = $str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPartC</span><span class=\"params\">($str)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;partC = $str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"这辆车由：\"</span>.<span class=\"keyword\">$this</span>-&gt;partA.<span class=\"string\">','</span>.<span class=\"keyword\">$this</span>-&gt;partB.<span class=\"string\">',和'</span>.<span class=\"keyword\">$this</span>-&gt;partC.<span class=\"string\">'组成'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> $myBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startBuild</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;buildPartA();</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;buildPartB();</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;buildPartC();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;myBuilder-&gt;getResult();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setBuilder</span><span class=\"params\">(Builder $builder)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;myBuilder = $builder;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CarBuilder();</span><br><span class=\"line\">$director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">$director-&gt;setBuilder($carBuilder);</span><br><span class=\"line\">$newCar = $director-&gt;startBuild();</span><br><span class=\"line\">$newCar-&gt;show();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8、数据结构\"><a href=\"#8、数据结构\" class=\"headerlink\" title=\"8、数据结构\"></a>8、数据结构</h2><h3 id=\"8-1-堆、栈、队列的区别\"><a href=\"#8-1-堆、栈、队列的区别\" class=\"headerlink\" title=\"8.1 堆、栈、队列的区别\"></a>8.1 堆、栈、队列的区别</h3><ul>\n<li>堆</li>\n</ul>\n<p><strong>堆中主要存放用new构造的对象和数组</strong></p>\n<p>优势：可以动态的分配内存的大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的。<br>缺点：由于要在运行时动态分配内存，存取速度比较慢</p>\n<ul>\n<li>栈</li>\n</ul>\n<p><strong>栈中主要存放一些基本类型的变量和对象引用类型。</strong><br>优势：存取速度比较快，仅次于寄存器，栈数据可以共享。<br>缺点：栈中的数据大小和生存周期必须是确定的，缺乏灵活性。</p>\n<ul>\n<li>队列</li>\n</ul>\n<p><strong>设计程序中常用的一种数据结构，采用“先进先出”的存储结构，类似于队列。</strong></p>\n<p>数据元素只能从队尾进入，从队首取出。在此队列中，数据元素可以随意增减，<br>但是数据元素的次序不会更改。每次都是取出队首的元素，后面的元素会整体向前移动一位。队列遍历数据的速度要快的多</p>\n<h3 id=\"8-2-什么是哈希表？\"><a href=\"#8-2-什么是哈希表？\" class=\"headerlink\" title=\"8.2 什么是哈希表？\"></a>8.2 什么是哈希表？</h3><p><code>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</code></p>\n<p><code>哈希表hashtable(key，value) 的做法其实很简单，就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。\n     而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位</code></p>\n<h2 id=\"附加1、扩展\"><a href=\"#附加1、扩展\" class=\"headerlink\" title=\"附加1、扩展\"></a>附加1、扩展</h2><h3 id=\"1-写代码来解决多进程-线程同时读写一个文件的问题\"><a href=\"#1-写代码来解决多进程-线程同时读写一个文件的问题\" class=\"headerlink\" title=\"1. 写代码来解决多进程/线程同时读写一个文件的问题\"></a>1. 写代码来解决多进程/线程同时读写一个文件的问题</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">\t$file = fopen(<span class=\"string\">'flock.text'</span>,<span class=\"string\">'w+'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!$file)&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"string\">'the file not exist!'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flock(file,LOCK_EX))&#123;</span><br><span class=\"line\">       <span class=\"comment\">//todo </span></span><br><span class=\"line\">       fwrite(file,<span class=\"string\">'do some things'</span>);</span><br><span class=\"line\">       <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">       flock(file,LOCK_UN);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'the file is write...'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">\tfclose(file);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-什么是写时复制\"><a href=\"#2-什么是写时复制\" class=\"headerlink\" title=\"2. 什么是写时复制\"></a>2. 什么是写时复制</h3><blockquote>\n<p> <strong>写时复制（Copy on Write，也缩写为COW)的应用场景非常多， 比如Linux中对进程复制中内存使用的优化，在各种编程语言中，如C++的STL等等中均有类似的应用。 COW是常用的优化手段，可以归类于：资源延迟分配。只有在真正需要使用资源时才占用资源， 写时复制通常能减少资源的占用。</strong></p>\n</blockquote>\n<p>在开始之前，我们可以先看一段简单的代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>   <span class=\"comment\">//例一</span></span><br><span class=\"line\">    $foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">    $bar = $foo;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $foo + $bar;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行这段代码，会打印出数字2。从内存的角度来分析一下这段代码“可能”是这样执行的： 分配一块内存给foo变量，里面存储一个1； 再分配一块内存给bar变量，也存一个1，最后计算出结果输出。 事实上，我们发现foo和bar变量因为值相同，完全可以使用同一块内存，这样，内存的使用就节省了一个1， 并且，还省去了分配内存和管理内存地址的计算开销。 没错，很多涉及到内存管理的系统，都实现了这种相同值共享内存的策略：写时复制</p>\n</blockquote>\n<p><a href=\"http://www.php-internals.com/book/?p=chapt06/06-06-copy-on-write\" target=\"_blank\" rel=\"noopener\">详情参考</a></p>\n<h3 id=\"3-echo-int-0-1-0-7-10-输出是多少？为什么\"><a href=\"#3-echo-int-0-1-0-7-10-输出是多少？为什么\" class=\"headerlink\" title=\"3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?\"></a>3. echo (int) ( (0.1+0.7) * 10 ); 输出是多少？为什么?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出的结果为：7</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于浮点数精度的警告<br> 显然简单的十进制分数如同 0.1 或 0.7 不能在不丢失一点点精度的情况下转换为内部二进制的格式，这就会造成混乱的结果。例如，floor((0.1+0.7)*10) 通常会返回 7 而不是预期中的 8，因为该结果内部的表示其实是类似 7.9。</p>\n</blockquote>\n<blockquote>\n<p>注意：永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等</p>\n</blockquote>\n<h2 id=\"附加2、面试题链接\"><a href=\"#附加2、面试题链接\" class=\"headerlink\" title=\"附加2、面试题链接\"></a>附加2、面试题链接</h2><ul>\n<li><a href=\"https://github.com/hookover/php-engineer-interview-questions\" target=\"_blank\" rel=\"noopener\">https://github.com/hookover/php-engineer-interview-questions</a></li>\n<li><a href=\"https://www.kancloud.cn/pingfan_/php_interview/916716\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/pingfan_/php_interview/916716</a></li>\n<li><a href=\"https://www.kancloud.cn/i281151/php_questions/174233\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/i281151/php_questions/174233</a></li>\n<li><a href=\"https://www.kancloud.cn/tp5girl/interview/329075\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/tp5girl/interview/329075</a></li>\n<li><a href=\"https://github.com/wudi/PHP-Interview-Best-Practices-in-China\" target=\"_blank\" rel=\"noopener\">https://github.com/wudi/PHP-Interview-Best-Practices-in-China</a></li>\n<li><a href=\"https://my.oschina.net/anyeshe/blog/1550238\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/anyeshe/blog/1550238</a></li>\n<li><a href=\"https://www.jianshu.com/p/ac5cad6d64a8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ac5cad6d64a8</a></li>\n<li><a href=\"https://www.zhaoyafei.cn/content.html?id=150846575347\" target=\"_blank\" rel=\"noopener\">https://www.zhaoyafei.cn/content.html?id=150846575347</a></li>\n<li><a href=\"https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zyf-zhaoyafei/p/4828358.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010262869#articleHeader9\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010262869#articleHeader9</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjus987gq0000064170vloj58","category_id":"cjus987h100020641okz0k0w1","_id":"cjus987ha000c0641opursksl"},{"post_id":"cjus987gz00010641xcudnch1","category_id":"cjus987h600070641x5umy0be","_id":"cjus987he000j0641wt8epcm3"},{"post_id":"cjus987h300040641bkch2uiw","category_id":"cjus987h600070641x5umy0be","_id":"cjus987hf000m0641lx6zs1gj"},{"post_id":"cjus987hd000h0641r021pygv","category_id":"cjus987h600070641x5umy0be","_id":"cjus987hg000p0641i6ikizq5"},{"post_id":"cjus987h500050641lyr6u5a1","category_id":"cjus987he000i06411ot0kr4l","_id":"cjus987hg000r0641jkygthga"},{"post_id":"cjus987h6000606415v64fw7f","category_id":"cjus987hf000n0641vknpvsht","_id":"cjus987hh000u0641w0urgwml"},{"post_id":"cjus987h8000a064181ogb4b1","category_id":"cjus987hh000s0641u6iysyoz","_id":"cjus987hj000z0641k08zc9d2"},{"post_id":"cjus987h9000b0641d2up52zd","category_id":"cjus987he000i06411ot0kr4l","_id":"cjus987hk00130641unsnbhpl"},{"post_id":"cjus987hb000f0641yhw6dzlo","category_id":"cjus987hj000y0641zxghs9sq","_id":"cjus987hm001a0641h3xr2dt0"},{"post_id":"cjus987hb000f0641yhw6dzlo","category_id":"cjus987hl0016064186nogffj","_id":"cjus987hn001b06414ecyk695"},{"post_id":"cjus987lg001c06415iz4zfr3","category_id":"cjus987hf000n0641vknpvsht","_id":"cjus987ll001k0641s4hoy4fj"},{"post_id":"cjus987ll001l0641zxi9bo9x","category_id":"cjus987he000i06411ot0kr4l","_id":"cjus987lo001q0641xa3hs9rx"},{"post_id":"cjus987li001e064182hp96rg","category_id":"cjus987lk001h064173nkas8h","_id":"cjus987lp001t0641adt7o7dd"},{"post_id":"cjus987lj001g0641e8dah61d","category_id":"cjus987lk001h064173nkas8h","_id":"cjus987lp001u0641x04fqiz0"},{"post_id":"cjus987lk001j0641b04tpxby","category_id":"cjus987lo001r064154d0y5ai","_id":"cjus987lq001y0641zanstjvc"},{"post_id":"cjus987lm001m0641lqxt1fsn","category_id":"cjus987lp001v06413cl48se6","_id":"cjus987lr002206415bkc2u8o"},{"post_id":"cjus987mu00280641lfdgmg9j","category_id":"cjus987he000i06411ot0kr4l","_id":"cjus987mx002906419rnhfcdj"},{"post_id":"cjus987q2002a0641gacko2k1","category_id":"cjus987hj000y0641zxghs9sq","_id":"cjus987q3002c0641jbt7hko0"}],"PostTag":[{"post_id":"cjus987gq0000064170vloj58","tag_id":"cjus987h300030641gfw80vpz","_id":"cjus987h8000906417zwhltni"},{"post_id":"cjus987gz00010641xcudnch1","tag_id":"cjus987h700080641iou24qky","_id":"cjus987hc000g0641hjwx7x9z"},{"post_id":"cjus987h300040641bkch2uiw","tag_id":"cjus987ha000e0641rl1vga4w","_id":"cjus987hf000l0641zo7a2q0b"},{"post_id":"cjus987h500050641lyr6u5a1","tag_id":"cjus987he000k0641r7ktouu5","_id":"cjus987hg000q0641fw0japs4"},{"post_id":"cjus987h6000606415v64fw7f","tag_id":"cjus987hg000o06410z13l03t","_id":"cjus987hi000x0641gi5puk7o"},{"post_id":"cjus987h6000606415v64fw7f","tag_id":"cjus987hh000t0641fzrqpvi8","_id":"cjus987hj001006411u63aao0"},{"post_id":"cjus987h8000a064181ogb4b1","tag_id":"cjus987hg000o06410z13l03t","_id":"cjus987hk00120641zq2lboht"},{"post_id":"cjus987h9000b0641d2up52zd","tag_id":"cjus987hg000o06410z13l03t","_id":"cjus987hl00150641cqbn7cje"},{"post_id":"cjus987hb000f0641yhw6dzlo","tag_id":"cjus987hg000o06410z13l03t","_id":"cjus987hm00180641w7j3z8zl"},{"post_id":"cjus987hd000h0641r021pygv","tag_id":"cjus987hl00170641q9rczjsm","_id":"cjus987hm0019064175wktd8y"},{"post_id":"cjus987li001e064182hp96rg","tag_id":"cjus987lk001i0641zsxu0s9m","_id":"cjus987ln001p0641kmktobly"},{"post_id":"cjus987lj001g0641e8dah61d","tag_id":"cjus987ln001o0641chrldvet","_id":"cjus987lq001x0641m1tn4jv2"},{"post_id":"cjus987lj001g0641e8dah61d","tag_id":"cjus987lp001s0641ibo6i6kk","_id":"cjus987lq001z0641t2vcrnd7"},{"post_id":"cjus987lk001j0641b04tpxby","tag_id":"cjus987lq001w0641nrpyfjdi","_id":"cjus987lr00210641tupuh7v8"},{"post_id":"cjus987ll001l0641zxi9bo9x","tag_id":"cjus987lq002006418m9i442m","_id":"cjus987lr00240641hfggxoai"},{"post_id":"cjus987lm001m0641lqxt1fsn","tag_id":"cjus987lr002306414ga6trrr","_id":"cjus987ls00260641qyd7lma6"},{"post_id":"cjus987lm001m0641lqxt1fsn","tag_id":"cjus987ls002506418yn8dxvk","_id":"cjus987lt002706410z4fvto1"},{"post_id":"cjus987q2002a0641gacko2k1","tag_id":"cjus987hg000o06410z13l03t","_id":"cjus987q3002b0641ut2wv11h"}],"Tag":[{"name":"mysql","_id":"cjus987h300030641gfw80vpz"},{"name":"crond","_id":"cjus987h700080641iou24qky"},{"name":"禅道","_id":"cjus987ha000e0641rl1vga4w"},{"name":"mac","_id":"cjus987he000k0641r7ktouu5"},{"name":"php","_id":"cjus987hg000o06410z13l03t"},{"name":"yaf","_id":"cjus987hh000t0641fzrqpvi8"},{"name":"nfs","_id":"cjus987hl00170641q9rczjsm"},{"name":"单向链表","_id":"cjus987lk001i0641zsxu0s9m"},{"name":"双链表","_id":"cjus987ln001o0641chrldvet"},{"name":"循环链","_id":"cjus987lp001s0641ibo6i6kk"},{"name":"调优","_id":"cjus987lq001w0641nrpyfjdi"},{"name":"php-fpm","_id":"cjus987lq002006418m9i442m"},{"name":"rabbitmq","_id":"cjus987lr002306414ga6trrr"},{"name":"linux","_id":"cjus987ls002506418yn8dxvk"}]}}